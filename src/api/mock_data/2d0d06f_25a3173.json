{
  "totalLines": 4033,
  "files": [
    {
      "path": "bunsen/README.md",
      "isBinary": false,
      "diffStart": 1,
      "diffEnd": 23
    },
    {
      "path": "bunsen/bunsen-avro/src/main/java/com/cerner/bunsen/avro/AvroConverter.java",
      "isBinary": false,
      "diffStart": 24,
      "diffEnd": 155
    },
    {
      "path": ".../bunsen-avro/src/main/java/com/cerner/bunsen/avro/converters/DefinitionToAvroVisitor.java",
      "isBinary": false,
      "diffStart": 156,
      "diffEnd": 604
    },
    {
      "path": "bunsen/bunsen-avro/src/main/java/com/cerner/bunsen/avro/converters/NoOpConverter.java",
      "isBinary": false,
      "diffStart": 605,
      "diffEnd": 613
    },
    {
      "path": "bunsen/bunsen-avro/src/main/java/com/cerner/bunsen/avro/tools/GenerateSchemas.java",
      "isBinary": false,
      "diffStart": 614,
      "diffEnd": 678
    },
    {
      "path": "bunsen/bunsen-avro/src/test/java/com/cerner/bunsen/avro/R4AvroConverterTest.java",
      "isBinary": false,
      "diffStart": 679,
      "diffEnd": 1070
    },
    {
      "path": "bunsen/bunsen-avro/src/test/java/com/cerner/bunsen/avro/Stu3AvroConverterTest.java",
      "isBinary": false,
      "diffStart": 1071,
      "diffEnd": 1784
    },
    {
      "path": "bunsen/bunsen-avro/src/test/java/com/cerner/bunsen/avro/tools/GenerateSchemasTest.java",
      "isBinary": false,
      "diffStart": 1785,
      "diffEnd": 1822
    },
    {
      "path": "...bunsen-core-r4/src/main/java/com/cerner/bunsen/definitions/r4/R4StructureDefinitions.java",
      "isBinary": false,
      "diffStart": 1823,
      "diffEnd": 1871
    },
    {
      "path": "bunsen/bunsen-core-r4/src/main/java/com/cerner/bunsen/definitions/r4/package-info.java",
      "isBinary": false,
      "diffStart": 1872,
      "diffEnd": 1876
    },
    {
      "path": "bunsen/bunsen-core-r4/src/test/java/com/cerner/bunsen/r4/TestData.java",
      "isBinary": false,
      "diffStart": 1877,
      "diffEnd": 1983
    },
    {
      "path": "...core-stu3/src/main/java/com/cerner/bunsen/definitions/stu3/Stu3FhirConversionSupport.java",
      "isBinary": false,
      "diffStart": 1984,
      "diffEnd": 2014
    },
    {
      "path": "...-core-stu3/src/main/java/com/cerner/bunsen/definitions/stu3/Stu3StructureDefinitions.java",
      "isBinary": false,
      "diffStart": 2015,
      "diffEnd": 2064
    },
    {
      "path": "bunsen/bunsen-core-stu3/src/main/java/com/cerner/bunsen/definitions/stu3/package-info.java",
      "isBinary": false,
      "diffStart": 2065,
      "diffEnd": 2069
    },
    {
      "path": "bunsen/bunsen-core-stu3/src/test/java/com/cerner/bunsen/stu3/TestData.java",
      "isBinary": false,
      "diffStart": 2070,
      "diffEnd": 2202
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/FhirContexts.java",
      "isBinary": false,
      "diffStart": 2203,
      "diffEnd": 2264
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/DefinitionVisitor.java",
      "isBinary": false,
      "diffStart": 2265,
      "diffEnd": 2345
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/DefinitionVisitorsUtil.java",
      "isBinary": false,
      "diffStart": 2346,
      "diffEnd": 2377
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/EnumConverter.java",
      "isBinary": false,
      "diffStart": 2378,
      "diffEnd": 2385
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/FhirConversionSupport.java",
      "isBinary": false,
      "diffStart": 2386,
      "diffEnd": 2448
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/HapiChoiceConverter.java",
      "isBinary": false,
      "diffStart": 2449,
      "diffEnd": 2515
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/HapiCompositeConverter.java",
      "isBinary": false,
      "diffStart": 2516,
      "diffEnd": 2754
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/HapiContainedConverter.java",
      "isBinary": false,
      "diffStart": 2755,
      "diffEnd": 2823
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/HapiConverter.java",
      "isBinary": false,
      "diffStart": 2824,
      "diffEnd": 2880
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/IElementDefinition.java",
      "isBinary": false,
      "diffStart": 2881,
      "diffEnd": 2919
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/IStructureDefinition.java",
      "isBinary": false,
      "diffStart": 2920,
      "diffEnd": 2934
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/IdConverter.java",
      "isBinary": false,
      "diffStart": 2935,
      "diffEnd": 2940
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/LeafExtensionConverter.java",
      "isBinary": false,
      "diffStart": 2941,
      "diffEnd": 2977
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/PrimitiveConverter.java",
      "isBinary": false,
      "diffStart": 2978,
      "diffEnd": 2997
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/QualifiedPath.java",
      "isBinary": false,
      "diffStart": 2998,
      "diffEnd": 3029
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/StringConverter.java",
      "isBinary": false,
      "diffStart": 3030,
      "diffEnd": 3042
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/StringToHapiSetter.java",
      "isBinary": false,
      "diffStart": 3043,
      "diffEnd": 3059
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/StructureDefinitions.java",
      "isBinary": false,
      "diffStart": 3060,
      "diffEnd": 3576
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/StructureField.java",
      "isBinary": false,
      "diffStart": 3577,
      "diffEnd": 3612
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/definitions/package-info.java",
      "isBinary": false,
      "diffStart": 3613,
      "diffEnd": 3617
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/package-info.java",
      "isBinary": false,
      "diffStart": 3618,
      "diffEnd": 3621
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/profiles/ProfileProvider.java",
      "isBinary": false,
      "diffStart": 3622,
      "diffEnd": 3635
    },
    {
      "path": "bunsen/bunsen-core/src/main/java/com/cerner/bunsen/profiles/package-info.java",
      "isBinary": false,
      "diffStart": 3636,
      "diffEnd": 3640
    },
    {
      "path": "bunsen/bunsen-core/src/test/java/com/cerner/bunsen/definitions/IdConverterTest.java",
      "isBinary": false,
      "diffStart": 3641,
      "diffEnd": 3648
    },
    {
      "path": "bunsen/bunsen-uscore-resources/src/main/java/com/cerner/bunsen/UsCoreProfileProvider.java",
      "isBinary": false,
      "diffStart": 3649,
      "diffEnd": 3685
    },
    {
      "path": "...ces/src/test/java/com/cerner/bunsen/test/profiles/stu3/BunsenTestStu3ProfileProvider.java",
      "isBinary": false,
      "diffStart": 3686,
      "diffEnd": 3743
    },
    {
      "path": "bunsen/pom.xml",
      "isBinary": false,
      "diffStart": 3744,
      "diffEnd": 3841
    },
    {
      "path": "pipelines/pom.xml",
      "isBinary": false,
      "diffStart": 3842,
      "diffEnd": 3940
    },
    {
      "path": "pom.xml",
      "isBinary": false,
      "diffStart": 3941,
      "diffEnd": 4033
    }
  ],
  "lines": [
    {
      "type": "modified",
      "oldContent": "This is a fork of a subset of the [Bunsen project](https://github.com/cerner/bunsen).",
      "newContent": "This is a fork of a subset of the",
      "oldLineNo": "1",
      "newLineNo": "1"
    },
    {
      "type": "modified",
      "oldContent": "This is created to unblock us for pushing changes that are needed in the Bunsen",
      "newContent": "[Bunsen project](https://github.com/cerner/bunsen). This is created to unblock",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "modified",
      "oldContent": "codebase. For example:",
      "newContent": "us for pushing changes that are needed in the Bunsen codebase. For example:",
      "oldLineNo": "3",
      "newLineNo": "3"
    },
    {
      "type": "modified",
      "oldContent": "* Make exported resource IDs consistent (Issue",
      "newContent": "",
      "oldLineNo": "4",
      "newLineNo": "4"
    },
    {
      "type": "added",
      "content": "- Make exported resource IDs consistent (Issue",
      "lineNo": "5"
    },
    {
      "type": "not-modified",
      "content": " [#55](https://github.com/GoogleCloudPlatform/openmrs-fhir-analytics/issues/55)).",
      "oldLineNo": "5",
      "newLineNo": "6"
    },
    {
      "type": "modified",
      "oldContent": "  This is fixed by [PR #111 in Bunsen](https://github.com/cerner/bunsen/pull/111)",
      "newContent": "  This is fixed by",
      "oldLineNo": "6",
      "newLineNo": "7"
    },
    {
      "type": "modified",
      "oldContent": "  but not merged.",
      "newContent": " [PR #111 in Bunsen](https://github.com/cerner/bunsen/pull/111) but not merged.",
      "oldLineNo": "7",
      "newLineNo": "8"
    },
    {
      "type": "modified",
      "oldContent": "* AvroTypeException for some edge cases (Issue ",
      "newContent": "- AvroTypeException for some edge cases (Issue",
      "oldLineNo": "8",
      "newLineNo": "9"
    },
    {
      "type": "not-modified",
      "content": " [#156](https://github.com/GoogleCloudPlatform/openmrs-fhir-analytics/issues/156))",
      "oldLineNo": "9",
      "newLineNo": "10"
    },
    {
      "type": "not-modified",
      "content": "  which needs a fix in Bunsen.",
      "oldLineNo": "10",
      "newLineNo": "11"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "11"
    },
    {
      "type": "deleted",
      "content": "When development resumes on Bunsen or at least our PRs are reviewed/merged,",
      "lineNo": "12"
    },
    {
      "type": "deleted",
      "content": "we can drop this fork and go back to directly use Bunsen artifacts. For that",
      "lineNo": "13"
    },
    {
      "type": "deleted",
      "content": "reason we try to keep this copy as close as possible to the up-stream repo such",
      "lineNo": "14"
    },
    {
      "type": "deleted",
      "content": "that commits here can easily be pushed to Bunsen in the future.",
      "lineNo": "15"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "16",
      "newLineNo": "12"
    },
    {
      "type": "modified",
      "oldContent": "**Note**: Both projects use the same Apache v2.0 license.",
      "newContent": "When development resumes on Bunsen or at least our PRs are reviewed/merged, we",
      "oldLineNo": "17",
      "newLineNo": "13"
    },
    {
      "type": "added",
      "content": "can drop this fork and go back to directly use Bunsen artifacts. For that reason",
      "lineNo": "14"
    },
    {
      "type": "added",
      "content": "we try to keep this copy as close as possible to the up-stream repo such that",
      "lineNo": "15"
    },
    {
      "type": "added",
      "content": "commits here can easily be pushed to Bunsen in the future.",
      "lineNo": "16"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "17"
    },
    {
      "type": "added",
      "content": "**Note**: Both projects use the same Apache v2.0 license.",
      "lineNo": "18"
    },
    {
      "type": "not-modified",
      "content": "import org.apache.avro.generic.IndexedRecord;",
      "oldLineNo": "18",
      "newLineNo": "18"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.instance.model.api.IBaseResource;",
      "oldLineNo": "19",
      "newLineNo": "19"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "20",
      "newLineNo": "20"
    },
    {
      "type": "modified",
      "oldContent": "/**",
      "newContent": "/** Converter to change HAPI objects into Avro structures and vice versa. */",
      "oldLineNo": "21",
      "newLineNo": "21"
    },
    {
      "type": "deleted",
      "content": " * Converter to change HAPI objects into Avro structures and vice versa.",
      "lineNo": "22"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "23"
    },
    {
      "type": "not-modified",
      "content": "public class AvroConverter {",
      "oldLineNo": "24",
      "newLineNo": "22"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "25",
      "newLineNo": "23"
    },
    {
      "type": "not-modified",
      "content": " private final HapiConverter<Schema> hapiToAvroConverter;",
      "oldLineNo": "26",
      "newLineNo": "24"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "27",
      "newLineNo": "25"
    },
    {
      "type": "not-modified",
      "content": " private final HapiObjectConverter avroToHapiConverter;",
      "oldLineNo": "28",
      "newLineNo": "26"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "29",
      "newLineNo": "27"
    },
    {
      "type": "modified",
      "oldContent": " private AvroConverter(HapiConverter<Schema> hapiToAvroConverter,",
      "newContent": " private AvroConverter(",
      "oldLineNo": "30",
      "newLineNo": "28"
    },
    {
      "type": "modified",
      "oldContent": " RuntimeResourceDefinition... resources) {",
      "newContent": " HapiConverter<Schema> hapiToAvroConverter, RuntimeResourceDefinition... resources) {",
      "oldLineNo": "31",
      "newLineNo": "29"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "32",
      "newLineNo": "30"
    },
    {
      "type": "not-modified",
      "content": " this.hapiToAvroConverter = hapiToAvroConverter;",
      "oldLineNo": "33",
      "newLineNo": "31"
    },
    {
      "type": "not-modified",
      "content": " this.avroToHapiConverter = (HapiObjectConverter) hapiToAvroConverter.toHapiConverter(resources);",
      "oldLineNo": "34",
      "newLineNo": "32"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "35",
      "newLineNo": "33"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "36",
      "newLineNo": "34"
    },
    {
      "type": "modified",
      "oldContent": " private static AvroConverter visitResource(FhirContext context,",
      "newContent": " private static AvroConverter visitResource(",
      "oldLineNo": "37",
      "newLineNo": "35"
    },
    {
      "type": "added",
      "content": " FhirContext context,",
      "lineNo": "36"
    },
    {
      "type": "not-modified",
      "content": " StructureDefinitions structureDefinitions,",
      "oldLineNo": "38",
      "newLineNo": "37"
    },
    {
      "type": "not-modified",
      "content": " String resourceTypeUrl,",
      "oldLineNo": "39",
      "newLineNo": "38"
    },
    {
      "type": "not-modified",
      "content": " List<String> containedResourceTypeUrls,",
      "oldLineNo": "40",
      "newLineNo": "39"
    },
    {
      "type": "modified",
      "oldContent": " Map<String,HapiConverter<Schema>> compositeConverters) {",
      "newContent": " Map<String, HapiConverter<Schema>> compositeConverters) {",
      "oldLineNo": "41",
      "newLineNo": "40"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "42",
      "newLineNo": "41"
    },
    {
      "type": "not-modified",
      "content": " FhirVersionEnum fhirVersion = context.getVersion().getVersion();",
      "oldLineNo": "43",
      "newLineNo": "42"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "44",
      "newLineNo": "43"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "58",
      "newLineNo": "57"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "59",
      "newLineNo": "58"
    },
    {
      "type": "not-modified",
      "content": " DefinitionToAvroVisitor visitor =",
      "oldLineNo": "60",
      "newLineNo": "59"
    },
    {
      "type": "modified",
      "oldContent": " new DefinitionToAvroVisitor(structureDefinitions.conversionSupport(),",
      "newContent": " new DefinitionToAvroVisitor(",
      "oldLineNo": "61",
      "newLineNo": "60"
    },
    {
      "type": "modified",
      "oldContent": " basePackage,",
      "newContent": " structureDefinitions.conversionSupport(), basePackage, compositeConverters);",
      "oldLineNo": "62",
      "newLineNo": "61"
    },
    {
      "type": "deleted",
      "content": " compositeConverters);",
      "lineNo": "63"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "64",
      "newLineNo": "62"
    },
    {
      "type": "modified",
      "oldContent": " HapiConverter<Schema> converter =  structureDefinitions.transform(visitor,",
      "newContent": " HapiConverter<Schema> converter =",
      "oldLineNo": "65",
      "newLineNo": "63"
    },
    {
      "type": "modified",
      "oldContent": " resourceTypeUrl,",
      "newContent": " structureDefinitions.transform(visitor, resourceTypeUrl, containedResourceTypeUrls);",
      "oldLineNo": "66",
      "newLineNo": "64"
    },
    {
      "type": "deleted",
      "content": " containedResourceTypeUrls);",
      "lineNo": "67"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "68",
      "newLineNo": "65"
    },
    {
      "type": "not-modified",
      "content": " RuntimeResourceDefinition[] resources =",
      "oldLineNo": "69",
      "newLineNo": "66"
    },
    {
      "type": "not-modified",
      "content": " new RuntimeResourceDefinition[1 + containedResourceTypeUrls.size()];",
      "oldLineNo": "70",
      "newLineNo": "67"
    },
    {
      "type": "not-modified",
      "content": " for (int i = 0; i < containedResourceTypeUrls.size(); i++) {",
      "oldLineNo": "74",
      "newLineNo": "71"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "75",
      "newLineNo": "72"
    },
    {
      "type": "not-modified",
      "content": " // Retrieve the name of the contained resources from the Resource Container's schema",
      "oldLineNo": "76",
      "newLineNo": "73"
    },
    {
      "type": "modified",
      "oldContent": " Field containedField = converter.getDataType()",
      "newContent": " Field containedField =",
      "oldLineNo": "77",
      "newLineNo": "74"
    },
    {
      "type": "modified",
      "oldContent": "          .getField(\"contained\")",
      "newContent": " converter",
      "oldLineNo": "78",
      "newLineNo": "75"
    },
    {
      "type": "modified",
      "oldContent": "          .schema()",
      "newContent": "              .getDataType()",
      "oldLineNo": "79",
      "newLineNo": "76"
    },
    {
      "type": "modified",
      "oldContent": "          .getTypes()",
      "newContent": "              .getField(\"contained\")",
      "oldLineNo": "80",
      "newLineNo": "77"
    },
    {
      "type": "modified",
      "oldContent": "          .get(1) // Get non-null element of the Union",
      "newContent": "              .schema()",
      "oldLineNo": "81",
      "newLineNo": "78"
    },
    {
      "type": "modified",
      "oldContent": "          .getElementType()",
      "newContent": "              .getTypes()",
      "oldLineNo": "82",
      "newLineNo": "79"
    },
    {
      "type": "modified",
      "oldContent": "          .getFields()",
      "newContent": "              .get(1) // Get non-null element of the Union",
      "oldLineNo": "83",
      "newLineNo": "80"
    },
    {
      "type": "modified",
      "oldContent": "          .get(i);",
      "newContent": "              .getElementType()",
      "oldLineNo": "84",
      "newLineNo": "81"
    },
    {
      "type": "added",
      "content": "              .getFields()",
      "lineNo": "82"
    },
    {
      "type": "added",
      "content": "              .get(i);",
      "lineNo": "83"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "85",
      "newLineNo": "84"
    },
    {
      "type": "not-modified",
      "content": " // Shift array by 1, since the 0 index holds the parent definition",
      "oldLineNo": "86",
      "newLineNo": "85"
    },
    {
      "type": "not-modified",
      "content": " resources[i + 1] = context.getResourceDefinition(containedField.name());",
      "oldLineNo": "87",
      "newLineNo": "86"
    },
    {
      "type": "not-modified",
      "content": "   * @param resourceTypeUrls the URLs of the resource types and any resources URLs contained to them",
      "oldLineNo": "97",
      "newLineNo": "96"
    },
    {
      "type": "not-modified",
      "content": "   * @return a list of Avro schemas",
      "oldLineNo": "98",
      "newLineNo": "97"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "99",
      "newLineNo": "98"
    },
    {
      "type": "modified",
      "oldContent": " public static List<Schema> generateSchemas(FhirContext context,",
      "newContent": " public static List<Schema> generateSchemas(",
      "oldLineNo": "100",
      "newLineNo": "99"
    },
    {
      "type": "modified",
      "oldContent": " Map<String, List<String>> resourceTypeUrls) {",
      "newContent": " FhirContext context, Map<String, List<String>> resourceTypeUrls) {",
      "oldLineNo": "101",
      "newLineNo": "100"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "102",
      "newLineNo": "101"
    },
    {
      "type": "not-modified",
      "content": " StructureDefinitions structureDefinitions = StructureDefinitions.create(context);",
      "oldLineNo": "103",
      "newLineNo": "102"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "104",
      "newLineNo": "103"
    },
    {
      "type": "not-modified",
      "content": " Map<String, HapiConverter<Schema>> converters = new HashMap<>();",
      "oldLineNo": "105",
      "newLineNo": "104"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "106",
      "newLineNo": "105"
    },
    {
      "type": "modified",
      "oldContent": " for (Entry<String, List<String>> resourceTypeUrlEntry: resourceTypeUrls.entrySet()) {",
      "newContent": " for (Entry<String, List<String>> resourceTypeUrlEntry : resourceTypeUrls.entrySet()) {",
      "oldLineNo": "107",
      "newLineNo": "106"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "108",
      "newLineNo": "107"
    },
    {
      "type": "modified",
      "oldContent": " visitResource(context,",
      "newContent": " visitResource(",
      "oldLineNo": "109",
      "newLineNo": "108"
    },
    {
      "type": "added",
      "content": " context,",
      "lineNo": "109"
    },
    {
      "type": "not-modified",
      "content": " structureDefinitions,",
      "oldLineNo": "110",
      "newLineNo": "110"
    },
    {
      "type": "not-modified",
      "content": " resourceTypeUrlEntry.getKey(),",
      "oldLineNo": "111",
      "newLineNo": "111"
    },
    {
      "type": "not-modified",
      "content": " resourceTypeUrlEntry.getValue(),",
      "oldLineNo": "112",
      "newLineNo": "112"
    },
    {
      "type": "not-modified",
      "content": " converters);",
      "oldLineNo": "113",
      "newLineNo": "113"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "114",
      "newLineNo": "114"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "115",
      "newLineNo": "115"
    },
    {
      "type": "modified",
      "oldContent": " return converters.values()",
      "newContent": " return converters.values().stream()",
      "oldLineNo": "116",
      "newLineNo": "116"
    },
    {
      "type": "deleted",
      "content": "        .stream()",
      "lineNo": "117"
    },
    {
      "type": "not-modified",
      "content": "        .map(HapiConverter::getDataType)",
      "oldLineNo": "118",
      "newLineNo": "117"
    },
    {
      "type": "not-modified",
      "content": "        .collect(Collectors.toList());",
      "oldLineNo": "119",
      "newLineNo": "118"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "120",
      "newLineNo": "119"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "121",
      "newLineNo": "120"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "122",
      "newLineNo": "121"
    },
    {
      "type": "modified",
      "oldContent": "   * Returns an Avro converter for the given resource type. The resource type can",
      "newContent": "   * Returns an Avro converter for the given resource type. The resource type can either be a",
      "oldLineNo": "123",
      "newLineNo": "122"
    },
    {
      "type": "modified",
      "oldContent": "   * either be a relative URL for a base resource (e.g., \"Condition\" or \"Observation\"),",
      "newContent": "   * relative URL for a base resource (e.g., \"Condition\" or \"Observation\"), or a URL identifying the",
      "oldLineNo": "124",
      "newLineNo": "123"
    },
    {
      "type": "modified",
      "oldContent": "   * or a URL identifying the structure definition for a given profile, such as",
      "newContent": "   * structure definition for a given profile, such as",
      "oldLineNo": "125",
      "newLineNo": "124"
    },
    {
      "type": "not-modified",
      "content": "   * \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient\".",
      "oldLineNo": "126",
      "newLineNo": "125"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "127",
      "newLineNo": "126"
    },
    {
      "type": "not-modified",
      "content": "   * @param context the FHIR context",
      "oldLineNo": "128",
      "newLineNo": "127"
    },
    {
      "type": "not-modified",
      "content": "   * @param resourceTypeUrl the URL of the resource type",
      "oldLineNo": "129",
      "newLineNo": "128"
    },
    {
      "type": "not-modified",
      "content": "   * @return an Avro converter instance.",
      "oldLineNo": "130",
      "newLineNo": "129"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "131",
      "newLineNo": "130"
    },
    {
      "type": "modified",
      "oldContent": " public static AvroConverter forResource(FhirContext context,",
      "newContent": " public static AvroConverter forResource(FhirContext context, String resourceTypeUrl) {",
      "oldLineNo": "132",
      "newLineNo": "131"
    },
    {
      "type": "deleted",
      "content": " String resourceTypeUrl) {",
      "lineNo": "133"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "134",
      "newLineNo": "132"
    },
    {
      "type": "not-modified",
      "content": " return forResource(context, resourceTypeUrl, Collections.emptyList());",
      "oldLineNo": "135",
      "newLineNo": "133"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "136",
      "newLineNo": "134"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "137",
      "newLineNo": "135"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "138",
      "newLineNo": "136"
    },
    {
      "type": "modified",
      "oldContent": "   * Returns an Avro converter for the given resource type. The resource type can",
      "newContent": "   * Returns an Avro converter for the given resource type. The resource type can either be a",
      "oldLineNo": "139",
      "newLineNo": "137"
    },
    {
      "type": "modified",
      "oldContent": "   * either be a relative URL for a base resource (e.g. \"Condition\" or \"Observation\"),",
      "newContent": "   * relative URL for a base resource (e.g. \"Condition\" or \"Observation\"), or a URL identifying the",
      "oldLineNo": "140",
      "newLineNo": "138"
    },
    {
      "type": "modified",
      "oldContent": "   * or a URL identifying the structure definition for a given profile, such as",
      "newContent": "   * structure definition for a given profile, such as",
      "oldLineNo": "141",
      "newLineNo": "139"
    },
    {
      "type": "not-modified",
      "content": "   * \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient\".",
      "oldLineNo": "142",
      "newLineNo": "140"
    },
    {
      "type": "modified",
      "oldContent": "   * <p>",
      "newContent": "   *",
      "oldLineNo": "143",
      "newLineNo": "141"
    },
    {
      "type": "modified",
      "oldContent": "   * Resources that would be contained must be statically declared through this method",
      "newContent": "   * <p>Resources that would be contained must be statically declared through this method via",
      "oldLineNo": "144",
      "newLineNo": "142"
    },
    {
      "type": "modified",
      "oldContent": "   * via similar URLs.",
      "newContent": "   * similar URLs.",
      "oldLineNo": "145",
      "newLineNo": "143"
    },
    {
      "type": "modified",
      "oldContent": "   * </p>",
      "newContent": "   *",
      "oldLineNo": "146",
      "newLineNo": "144"
    },
    {
      "type": "not-modified",
      "content": "   * @param context the FHIR context",
      "oldLineNo": "147",
      "newLineNo": "145"
    },
    {
      "type": "not-modified",
      "content": "   * @param resourceTypeUrl the URL of the resource type",
      "oldLineNo": "148",
      "newLineNo": "146"
    },
    {
      "type": "not-modified",
      "content": "   * @param containedResourceTypeUrls the list of URLs of contained resource types",
      "oldLineNo": "149",
      "newLineNo": "147"
    },
    {
      "type": "not-modified",
      "content": "   * @return an Avro converter instance.",
      "oldLineNo": "150",
      "newLineNo": "148"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "151",
      "newLineNo": "149"
    },
    {
      "type": "modified",
      "oldContent": " public static AvroConverter forResource(FhirContext context,",
      "newContent": " public static AvroConverter forResource(",
      "oldLineNo": "152",
      "newLineNo": "150"
    },
    {
      "type": "modified",
      "oldContent": " String resourceTypeUrl,",
      "newContent": " FhirContext context, String resourceTypeUrl, List<String> containedResourceTypeUrls) {",
      "oldLineNo": "153",
      "newLineNo": "151"
    },
    {
      "type": "deleted",
      "content": " List<String> containedResourceTypeUrls) {",
      "lineNo": "154"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "155",
      "newLineNo": "152"
    },
    {
      "type": "not-modified",
      "content": " StructureDefinitions structureDefinitions = StructureDefinitions.create(context);",
      "oldLineNo": "156",
      "newLineNo": "153"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "157",
      "newLineNo": "154"
    },
    {
      "type": "modified",
      "oldContent": " return visitResource(context,",
      "newContent": " return visitResource(",
      "oldLineNo": "158",
      "newLineNo": "155"
    },
    {
      "type": "modified",
      "oldContent": " structureDefinitions,",
      "newContent": " context, structureDefinitions, resourceTypeUrl, containedResourceTypeUrls, new HashMap<>());",
      "oldLineNo": "159",
      "newLineNo": "156"
    },
    {
      "type": "deleted",
      "content": " resourceTypeUrl,",
      "lineNo": "160"
    },
    {
      "type": "deleted",
      "content": " containedResourceTypeUrls,",
      "lineNo": "161"
    },
    {
      "type": "deleted",
      "content": " new HashMap<>());",
      "lineNo": "162"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "163",
      "newLineNo": "157"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "164",
      "newLineNo": "158"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "165",
      "newLineNo": "159"
    },
    {
      "type": "not-modified",
      "content": " public String getResourceType() {",
      "oldLineNo": "202",
      "newLineNo": "196"
    },
    {
      "type": "not-modified",
      "content": " return hapiToAvroConverter.getElementType();",
      "oldLineNo": "203",
      "newLineNo": "197"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "204",
      "newLineNo": "198"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "205"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "206",
      "newLineNo": "199"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "58",
      "newLineNo": "58"
    },
    {
      "type": "not-modified",
      "content": " private static final Schema BOOLEAN_SCHEMA = Schema.create(Type.BOOLEAN);",
      "oldLineNo": "59",
      "newLineNo": "59"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "60",
      "newLineNo": "60"
    },
    {
      "type": "modified",
      "oldContent": " private static final HapiConverter<Schema> BOOLEAN_CONVERTER = new PrimitiveConverter<Schema>(",
      "newContent": " private static final HapiConverter<Schema> BOOLEAN_CONVERTER =",
      "oldLineNo": "61",
      "newLineNo": "61"
    },
    {
      "type": "modified",
      "oldContent": " \"Boolean\") {",
      "newContent": " new PrimitiveConverter<Schema>(\"Boolean\") {",
      "oldLineNo": "62",
      "newLineNo": "62"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "63",
      "newLineNo": "63"
    },
    {
      "type": "modified",
      "oldContent": " @Override",
      "newContent": "  @Override",
      "oldLineNo": "64",
      "newLineNo": "64"
    },
    {
      "type": "modified",
      "oldContent": " public Schema getDataType() {",
      "newContent": "  public Schema getDataType() {",
      "oldLineNo": "65",
      "newLineNo": "65"
    },
    {
      "type": "modified",
      "oldContent": " return BOOLEAN_SCHEMA;",
      "newContent": "  return BOOLEAN_SCHEMA;",
      "oldLineNo": "66",
      "newLineNo": "66"
    },
    {
      "type": "modified",
      "oldContent": "    }",
      "newContent": "  }",
      "oldLineNo": "67",
      "newLineNo": "67"
    },
    {
      "type": "modified",
      "oldContent": "  };",
      "newContent": "  };",
      "oldLineNo": "68",
      "newLineNo": "68"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "69",
      "newLineNo": "69"
    },
    {
      "type": "not-modified",
      "content": " private static final Schema INTEGER_SCHEMA = Schema.create(Type.INT);",
      "oldLineNo": "70",
      "newLineNo": "70"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "71",
      "newLineNo": "71"
    },
    {
      "type": "modified",
      "oldContent": " private static final HapiConverter<Schema> INTEGER_CONVERTER = new PrimitiveConverter<Schema>(",
      "newContent": " private static final HapiConverter<Schema> INTEGER_CONVERTER =",
      "oldLineNo": "72",
      "newLineNo": "72"
    },
    {
      "type": "modified",
      "oldContent": " \"Integer\") {",
      "newContent": " new PrimitiveConverter<Schema>(\"Integer\") {",
      "oldLineNo": "73",
      "newLineNo": "73"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "74",
      "newLineNo": "74"
    },
    {
      "type": "modified",
      "oldContent": " @Override",
      "newContent": "  @Override",
      "oldLineNo": "75",
      "newLineNo": "75"
    },
    {
      "type": "modified",
      "oldContent": " public Schema getDataType() {",
      "newContent": "  public Schema getDataType() {",
      "oldLineNo": "76",
      "newLineNo": "76"
    },
    {
      "type": "modified",
      "oldContent": " return INTEGER_SCHEMA;",
      "newContent": "  return INTEGER_SCHEMA;",
      "oldLineNo": "77",
      "newLineNo": "77"
    },
    {
      "type": "modified",
      "oldContent": "    }",
      "newContent": "  }",
      "oldLineNo": "78",
      "newLineNo": "78"
    },
    {
      "type": "modified",
      "oldContent": "  };",
      "newContent": "  };",
      "oldLineNo": "79",
      "newLineNo": "79"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "80",
      "newLineNo": "80"
    },
    {
      "type": "not-modified",
      "content": " private static final Schema DOUBLE_SCHEMA = Schema.create(Type.DOUBLE);",
      "oldLineNo": "81",
      "newLineNo": "81"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "82",
      "newLineNo": "82"
    },
    {
      "type": "not-modified",
      "content": " // Avro `decimal` type  has a fixed scale and a maximum precision but with a fixed scale we have",
      "oldLineNo": "88",
      "newLineNo": "88"
    },
    {
      "type": "not-modified",
      "content": " // no guarantees on the precision of the FHIR `decimal` type. See this for more details:",
      "oldLineNo": "89",
      "newLineNo": "89"
    },
    {
      "type": "not-modified",
      "content": " // https://github.com/GoogleCloudPlatform/openmrs-fhir-analytics/issues/156#issuecomment-880964207",
      "oldLineNo": "90",
      "newLineNo": "90"
    },
    {
      "type": "modified",
      "oldContent": " private static final HapiConverter<Schema> DOUBLE_CONVERTER = new PrimitiveConverter<Schema>(",
      "newContent": " private static final HapiConverter<Schema> DOUBLE_CONVERTER =",
      "oldLineNo": "91",
      "newLineNo": "91"
    },
    {
      "type": "modified",
      "oldContent": " \"Double\") {",
      "newContent": " new PrimitiveConverter<Schema>(\"Double\") {",
      "oldLineNo": "92",
      "newLineNo": "92"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "93",
      "newLineNo": "93"
    },
    {
      "type": "modified",
      "oldContent": " @Override",
      "newContent": "  @Override",
      "oldLineNo": "94",
      "newLineNo": "94"
    },
    {
      "type": "modified",
      "oldContent": " public Schema getDataType() {",
      "newContent": "  public Schema getDataType() {",
      "oldLineNo": "95",
      "newLineNo": "95"
    },
    {
      "type": "modified",
      "oldContent": " return DOUBLE_SCHEMA;",
      "newContent": "  return DOUBLE_SCHEMA;",
      "oldLineNo": "96",
      "newLineNo": "96"
    },
    {
      "type": "modified",
      "oldContent": "    }",
      "newContent": "  }",
      "oldLineNo": "97",
      "newLineNo": "97"
    },
    {
      "type": "modified",
      "oldContent": "  };",
      "newContent": "  };",
      "oldLineNo": "98",
      "newLineNo": "98"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "99",
      "newLineNo": "99"
    },
    {
      "type": "not-modified",
      "content": " // The key set of this map should be exactly the same as StructureDefinitions.PRIMITIVE_TYPES.",
      "oldLineNo": "100",
      "newLineNo": "100"
    },
    {
      "type": "not-modified",
      "content": " // TODO refactor/consolidate these two.",
      "oldLineNo": "101",
      "newLineNo": "101"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "138",
      "newLineNo": "138"
    },
    {
      "type": "not-modified",
      "content": " private final GenericData avroData = SpecificData.get();",
      "oldLineNo": "139",
      "newLineNo": "139"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "140",
      "newLineNo": "140"
    },
    {
      "type": "modified",
      "oldContent": " CompositeToAvroConverter(String elementType,",
      "newContent": " CompositeToAvroConverter(",
      "oldLineNo": "141",
      "newLineNo": "141"
    },
    {
      "type": "added",
      "content": " String elementType,",
      "lineNo": "142"
    },
    {
      "type": "not-modified",
      "content": " List<StructureField<HapiConverter<Schema>>> children,",
      "oldLineNo": "142",
      "newLineNo": "143"
    },
    {
      "type": "not-modified",
      "content": " Schema structType,",
      "oldLineNo": "143",
      "newLineNo": "144"
    },
    {
      "type": "not-modified",
      "content": " FhirConversionSupport fhirSupport) {",
      "oldLineNo": "144",
      "newLineNo": "145"
    },
    {
      "type": "not-modified",
      "content": " this(elementType, children, structType, fhirSupport, null);",
      "oldLineNo": "145",
      "newLineNo": "146"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "146",
      "newLineNo": "147"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "147",
      "newLineNo": "148"
    },
    {
      "type": "modified",
      "oldContent": " CompositeToAvroConverter(String elementType,",
      "newContent": " CompositeToAvroConverter(",
      "oldLineNo": "148",
      "newLineNo": "149"
    },
    {
      "type": "added",
      "content": " String elementType,",
      "lineNo": "150"
    },
    {
      "type": "not-modified",
      "content": " List<StructureField<HapiConverter<Schema>>> children,",
      "oldLineNo": "149",
      "newLineNo": "151"
    },
    {
      "type": "not-modified",
      "content": " Schema structType,",
      "oldLineNo": "150",
      "newLineNo": "152"
    },
    {
      "type": "not-modified",
      "content": " FhirConversionSupport fhirSupport,",
      "oldLineNo": "151",
      "newLineNo": "153"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "187",
      "newLineNo": "189"
    },
    {
      "type": "not-modified",
      "content": " private final GenericData avroData = SpecificData.get();",
      "oldLineNo": "188",
      "newLineNo": "190"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "189",
      "newLineNo": "191"
    },
    {
      "type": "modified",
      "oldContent": " HapiChoiceToAvroConverter(Map<String, HapiConverter<Schema>> choiceTypes,",
      "newContent": " HapiChoiceToAvroConverter(",
      "oldLineNo": "190",
      "newLineNo": "192"
    },
    {
      "type": "added",
      "content": " Map<String, HapiConverter<Schema>> choiceTypes,",
      "lineNo": "193"
    },
    {
      "type": "not-modified",
      "content": " Schema structType,",
      "oldLineNo": "191",
      "newLineNo": "194"
    },
    {
      "type": "not-modified",
      "content": " FhirConversionSupport fhirSupport) {",
      "oldLineNo": "192",
      "newLineNo": "195"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "193",
      "newLineNo": "196"
    },
    {
      "type": "not-modified",
      "content": " private final GenericData avroData = SpecificData.get();",
      "oldLineNo": "219",
      "newLineNo": "222"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "220",
      "newLineNo": "223"
    },
    {
      "type": "not-modified",
      "content": " private HapiContainedToAvroConverter(",
      "oldLineNo": "221",
      "newLineNo": "224"
    },
    {
      "type": "modified",
      "oldContent": " Map<String, StructureField<HapiConverter<Schema>>> contained,",
      "newContent": " Map<String, StructureField<HapiConverter<Schema>>> contained, Schema structType) {",
      "oldLineNo": "222",
      "newLineNo": "225"
    },
    {
      "type": "deleted",
      "content": " Schema structType) {",
      "lineNo": "223"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "224",
      "newLineNo": "226"
    },
    {
      "type": "not-modified",
      "content": " super(contained, structType);",
      "oldLineNo": "225",
      "newLineNo": "227"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "226",
      "newLineNo": "228"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "232",
      "newLineNo": "234"
    },
    {
      "type": "not-modified",
      "content": " List<ContainerEntry> containedEntries = new ArrayList<>();",
      "oldLineNo": "233",
      "newLineNo": "235"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "234",
      "newLineNo": "236"
    },
    {
      "type": "modified",
      "oldContent": " for (Object arrayItem: containedArray) {",
      "newContent": " for (Object arrayItem : containedArray) {",
      "oldLineNo": "235",
      "newLineNo": "237"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "236",
      "newLineNo": "238"
    },
    {
      "type": "not-modified",
      "content": " IndexedRecord resourceContainer = (IndexedRecord) arrayItem;",
      "oldLineNo": "237",
      "newLineNo": "239"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "238",
      "newLineNo": "240"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "262",
      "newLineNo": "264"
    },
    {
      "type": "not-modified",
      "content": " Schema containerType = getDataType().getElementType();",
      "oldLineNo": "263",
      "newLineNo": "265"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "264",
      "newLineNo": "266"
    },
    {
      "type": "modified",
      "oldContent": " for (Object containedEntry: contained) {",
      "newContent": " for (Object containedEntry : contained) {",
      "oldLineNo": "265",
      "newLineNo": "267"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "266",
      "newLineNo": "268"
    },
    {
      "type": "not-modified",
      "content": " IndexedRecord containedRecord = (IndexedRecord) avroData.newRecord(null, containerType);",
      "oldLineNo": "267",
      "newLineNo": "269"
    },
    {
      "type": "not-modified",
      "content": " String recordName = ((IndexedRecord) containedEntry).getSchema().getName();",
      "oldLineNo": "268",
      "newLineNo": "270"
    },
    {
      "type": "not-modified",
      "content": "        }",
      "oldLineNo": "284",
      "newLineNo": "286"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "285",
      "newLineNo": "287"
    },
    {
      "type": "not-modified",
      "content": " if (containedPosition == -1) {",
      "oldLineNo": "286",
      "newLineNo": "288"
    },
    {
      "type": "modified",
      "oldContent": " String fieldNames = containerType.getFields().stream().map(Field::name)",
      "newContent": " String fieldNames =",
      "oldLineNo": "287",
      "newLineNo": "289"
    },
    {
      "type": "modified",
      "oldContent": "              .collect(Collectors.joining(\", \"));",
      "newContent": " containerType.getFields().stream().map(Field::name).collect(Collectors.joining(\", \"));",
      "oldLineNo": "288",
      "newLineNo": "290"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "",
      "oldLineNo": "289",
      "newLineNo": "291"
    },
    {
      "type": "modified",
      "oldContent": " throw new IllegalArgumentException(\"Expected a field to exist in the Contained List\"",
      "newContent": " throw new IllegalArgumentException(",
      "oldLineNo": "290",
      "newLineNo": "292"
    },
    {
      "type": "modified",
      "oldContent": "              + \" having the name of the current record, but found none.\"",
      "newContent": " \"Expected a field to exist in the Contained List\"",
      "oldLineNo": "291",
      "newLineNo": "293"
    },
    {
      "type": "modified",
      "oldContent": "              + \" Contained Field Names: \" + fieldNames + \",\"",
      "newContent": "                  + \" having the name of the current record, but found none.\"",
      "oldLineNo": "292",
      "newLineNo": "294"
    },
    {
      "type": "modified",
      "oldContent": "              + \" Record Name: \" + recordName);",
      "newContent": "                  + \" Contained Field Names: \"",
      "oldLineNo": "293",
      "newLineNo": "295"
    },
    {
      "type": "added",
      "content": "                  + fieldNames",
      "lineNo": "296"
    },
    {
      "type": "added",
      "content": "                  + \",\"",
      "lineNo": "297"
    },
    {
      "type": "added",
      "content": "                  + \" Record Name: \"",
      "lineNo": "298"
    },
    {
      "type": "added",
      "content": "                  + recordName);",
      "lineNo": "299"
    },
    {
      "type": "not-modified",
      "content": "        }",
      "oldLineNo": "294",
      "newLineNo": "300"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "295",
      "newLineNo": "301"
    },
    {
      "type": "not-modified",
      "content": " containedRecord.put(containedPosition, containedEntry);",
      "oldLineNo": "296",
      "newLineNo": "302"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "302",
      "newLineNo": "308"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "303",
      "newLineNo": "309"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "304",
      "newLineNo": "310"
    },
    {
      "type": "modified",
      "oldContent": " private static class MultiValuedToAvroConverter extends HapiConverter<Schema> implements",
      "newContent": " private static class MultiValuedToAvroConverter extends HapiConverter<Schema>",
      "oldLineNo": "305",
      "newLineNo": "311"
    },
    {
      "type": "modified",
      "oldContent": " MultiValueConverter {",
      "newContent": " implements MultiValueConverter {",
      "oldLineNo": "306",
      "newLineNo": "312"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "307",
      "newLineNo": "313"
    },
    {
      "type": "not-modified",
      "content": " private class MultiValuedtoHapiConverter implements HapiFieldSetter {",
      "oldLineNo": "308",
      "newLineNo": "314"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "309",
      "newLineNo": "315"
    },
    {
      "type": "not-modified",
      "content": " private final BaseRuntimeElementDefinition elementDefinition;",
      "oldLineNo": "310",
      "newLineNo": "316"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "311",
      "newLineNo": "317"
    },
    {
      "type": "not-modified",
      "content": " private final HapiObjectConverter elementToHapiConverter;",
      "oldLineNo": "312",
      "newLineNo": "318"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "313",
      "newLineNo": "319"
    },
    {
      "type": "modified",
      "oldContent": " MultiValuedtoHapiConverter(BaseRuntimeElementDefinition elementDefinition,",
      "newContent": " MultiValuedtoHapiConverter(",
      "oldLineNo": "314",
      "newLineNo": "320"
    },
    {
      "type": "added",
      "content": " BaseRuntimeElementDefinition elementDefinition,",
      "lineNo": "321"
    },
    {
      "type": "not-modified",
      "content": " HapiObjectConverter elementToHapiConverter) {",
      "oldLineNo": "315",
      "newLineNo": "322"
    },
    {
      "type": "not-modified",
      "content": " this.elementDefinition = elementDefinition;",
      "oldLineNo": "316",
      "newLineNo": "323"
    },
    {
      "type": "not-modified",
      "content": " this.elementToHapiConverter = elementToHapiConverter;",
      "oldLineNo": "317",
      "newLineNo": "324"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "318",
      "newLineNo": "325"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "319",
      "newLineNo": "326"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "320",
      "newLineNo": "327"
    },
    {
      "type": "modified",
      "oldContent": " public void setField(IBase parentObject,",
      "newContent": " public void setField(",
      "oldLineNo": "321",
      "newLineNo": "328"
    },
    {
      "type": "modified",
      "oldContent": " BaseRuntimeChildDefinition fieldToSet,",
      "newContent": " IBase parentObject, BaseRuntimeChildDefinition fieldToSet, Object element) {",
      "oldLineNo": "322",
      "newLineNo": "329"
    },
    {
      "type": "deleted",
      "content": " Object element) {",
      "lineNo": "323"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "324",
      "newLineNo": "330"
    },
    {
      "type": "modified",
      "oldContent": " for (Object value: (Iterable) element) {",
      "newContent": " for (Object value : (Iterable) element) {",
      "oldLineNo": "325",
      "newLineNo": "331"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "326",
      "newLineNo": "332"
    },
    {
      "type": "not-modified",
      "content": " Object hapiObject = elementToHapiConverter.toHapi(value);",
      "oldLineNo": "327",
      "newLineNo": "333"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "328",
      "newLineNo": "334"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "347",
      "newLineNo": "353"
    },
    {
      "type": "not-modified",
      "content": " List list = (List) input;",
      "oldLineNo": "348",
      "newLineNo": "354"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "349",
      "newLineNo": "355"
    },
    {
      "type": "modified",
      "oldContent": " List convertedList = (List) list.stream()",
      "newContent": " List convertedList =",
      "oldLineNo": "350",
      "newLineNo": "356"
    },
    {
      "type": "modified",
      "oldContent": "          .map(item -> elementConverter.fromHapi(item))",
      "newContent": "          (List)",
      "oldLineNo": "351",
      "newLineNo": "357"
    },
    {
      "type": "modified",
      "oldContent": "          .collect(Collectors.toList());",
      "newContent": " list.stream()",
      "oldLineNo": "352",
      "newLineNo": "358"
    },
    {
      "type": "added",
      "content": "                  .map(item -> elementConverter.fromHapi(item))",
      "lineNo": "359"
    },
    {
      "type": "added",
      "content": "                  .collect(Collectors.toList());",
      "lineNo": "360"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "353",
      "newLineNo": "361"
    },
    {
      "type": "not-modified",
      "content": " return new GenericData.Array<>(getDataType(), convertedList);",
      "oldLineNo": "354",
      "newLineNo": "362"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "355",
      "newLineNo": "363"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "365",
      "newLineNo": "373"
    },
    {
      "type": "not-modified",
      "content": " BaseRuntimeElementDefinition elementDefinition = elementDefinitions[0];",
      "oldLineNo": "366",
      "newLineNo": "374"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "367",
      "newLineNo": "375"
    },
    {
      "type": "modified",
      "oldContent": " HapiObjectConverter rowToHapiConverter = (HapiObjectConverter)",
      "newContent": " HapiObjectConverter rowToHapiConverter =",
      "oldLineNo": "368",
      "newLineNo": "376"
    },
    {
      "type": "modified",
      "oldContent": " elementConverter.toHapiConverter(elementDefinition);",
      "newContent": " (HapiObjectConverter) elementConverter.toHapiConverter(elementDefinition);",
      "oldLineNo": "369",
      "newLineNo": "377"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "370",
      "newLineNo": "378"
    },
    {
      "type": "not-modified",
      "content": " return new MultiValuedtoHapiConverter(elementDefinition, rowToHapiConverter);",
      "oldLineNo": "371",
      "newLineNo": "379"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "372",
      "newLineNo": "380"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "377",
      "newLineNo": "385"
    },
    {
      "type": "not-modified",
      "content": "   * @param fhirSupport support for FHIR conversions.",
      "oldLineNo": "378",
      "newLineNo": "386"
    },
    {
      "type": "not-modified",
      "content": "   * @param basePackage the base package to be used for generated Avro structures.",
      "oldLineNo": "379",
      "newLineNo": "387"
    },
    {
      "type": "modified",
      "oldContent": "   * @param visitedConverters a mutable cache of generated converters that may",
      "newContent": "   * @param visitedConverters a mutable cache of generated converters that may be reused by types",
      "oldLineNo": "380",
      "newLineNo": "388"
    },
    {
      "type": "modified",
      "oldContent": "   *     be reused by types that contain them.",
      "newContent": "   *     that contain them.",
      "oldLineNo": "381",
      "newLineNo": "389"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "382",
      "newLineNo": "390"
    },
    {
      "type": "modified",
      "oldContent": " public DefinitionToAvroVisitor(FhirConversionSupport fhirSupport,",
      "newContent": " public DefinitionToAvroVisitor(",
      "oldLineNo": "383",
      "newLineNo": "391"
    },
    {
      "type": "added",
      "content": " FhirConversionSupport fhirSupport,",
      "lineNo": "392"
    },
    {
      "type": "not-modified",
      "content": " String basePackage,",
      "oldLineNo": "384",
      "newLineNo": "393"
    },
    {
      "type": "modified",
      "oldContent": " Map<String,HapiConverter<Schema>> visitedConverters) {",
      "newContent": " Map<String, HapiConverter<Schema>> visitedConverters) {",
      "oldLineNo": "385",
      "newLineNo": "394"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "386",
      "newLineNo": "395"
    },
    {
      "type": "not-modified",
      "content": " this.fhirSupport = fhirSupport;",
      "oldLineNo": "387",
      "newLineNo": "396"
    },
    {
      "type": "not-modified",
      "content": " this.basePackage = basePackage;",
      "oldLineNo": "388",
      "newLineNo": "397"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "406",
      "newLineNo": "415"
    },
    {
      "type": "not-modified",
      "content": " private static final Schema NULL_SCHEMA = Schema.create(Type.NULL);",
      "oldLineNo": "407",
      "newLineNo": "416"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "408",
      "newLineNo": "417"
    },
    {
      "type": "modified",
      "oldContent": " /**",
      "newContent": " /** Makes a given schema nullable. */",
      "oldLineNo": "409",
      "newLineNo": "418"
    },
    {
      "type": "deleted",
      "content": "   * Makes a given schema nullable.",
      "lineNo": "410"
    },
    {
      "type": "deleted",
      "content": "   */",
      "lineNo": "411"
    },
    {
      "type": "not-modified",
      "content": " private static Schema nullable(Schema schema) {",
      "oldLineNo": "412",
      "newLineNo": "419"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "413",
      "newLineNo": "420"
    },
    {
      "type": "not-modified",
      "content": " return Schema.createUnion(Arrays.asList(NULL_SCHEMA, schema));",
      "oldLineNo": "414",
      "newLineNo": "421"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "415",
      "newLineNo": "422"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "416",
      "newLineNo": "423"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "417",
      "newLineNo": "424"
    },
    {
      "type": "modified",
      "oldContent": " public HapiConverter<Schema> visitContained(String elementPath,",
      "newContent": " public HapiConverter<Schema> visitContained(",
      "oldLineNo": "418",
      "newLineNo": "425"
    },
    {
      "type": "added",
      "content": " String elementPath,",
      "lineNo": "426"
    },
    {
      "type": "not-modified",
      "content": " String elementTypeUrl,",
      "oldLineNo": "419",
      "newLineNo": "427"
    },
    {
      "type": "not-modified",
      "content": " Map<String, StructureField<HapiConverter<Schema>>> contained) {",
      "oldLineNo": "420",
      "newLineNo": "428"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "421",
      "newLineNo": "429"
    },
    {
      "type": "not-modified",
      "content": " String recordName = DefinitionVisitorsUtil.recordNameFor(elementPath);",
      "oldLineNo": "422",
      "newLineNo": "430"
    },
    {
      "type": "not-modified",
      "content": " String recordNamespace = DefinitionVisitorsUtil.namespaceFor(basePackage, elementTypeUrl);",
      "oldLineNo": "423",
      "newLineNo": "431"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "424",
      "newLineNo": "432"
    },
    {
      "type": "modified",
      "oldContent": " List<Field> fields = contained.values()",
      "newContent": " List<Field> fields =",
      "oldLineNo": "425",
      "newLineNo": "433"
    },
    {
      "type": "modified",
      "oldContent": "        .stream()",
      "newContent": " contained.values().stream()",
      "oldLineNo": "426",
      "newLineNo": "434"
    },
    {
      "type": "modified",
      "oldContent": "        .map(containedEntry -> {",
      "newContent": "            .map(",
      "oldLineNo": "427",
      "newLineNo": "435"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " containedEntry -> {",
      "oldLineNo": "428",
      "newLineNo": "436"
    },
    {
      "type": "modified",
      "oldContent": " String doc = \"Field for FHIR property \" + containedEntry.propertyName();",
      "newContent": " String doc = \"Field for FHIR property \" + containedEntry.propertyName();",
      "oldLineNo": "429",
      "newLineNo": "437"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "",
      "oldLineNo": "430",
      "newLineNo": "438"
    },
    {
      "type": "modified",
      "oldContent": " return new Field(containedEntry.fieldName(),",
      "newContent": " return new Field(",
      "oldLineNo": "431",
      "newLineNo": "439"
    },
    {
      "type": "modified",
      "oldContent": " nullable(containedEntry.result().getDataType()),",
      "newContent": " containedEntry.fieldName(),",
      "oldLineNo": "432",
      "newLineNo": "440"
    },
    {
      "type": "modified",
      "oldContent": " doc,",
      "newContent": " nullable(containedEntry.result().getDataType()),",
      "oldLineNo": "433",
      "newLineNo": "441"
    },
    {
      "type": "modified",
      "oldContent": " JsonProperties.NULL_VALUE);",
      "newContent": " doc,",
      "oldLineNo": "434",
      "newLineNo": "442"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " JsonProperties.NULL_VALUE);",
      "oldLineNo": "435",
      "newLineNo": "443"
    },
    {
      "type": "modified",
      "oldContent": "        }).collect(Collectors.toList());",
      "newContent": "                })",
      "oldLineNo": "436",
      "newLineNo": "444"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "            .collect(Collectors.toList());",
      "oldLineNo": "437",
      "newLineNo": "445"
    },
    {
      "type": "modified",
      "oldContent": " Schema containerType = Schema.createArray(",
      "newContent": "",
      "oldLineNo": "438",
      "newLineNo": "446"
    },
    {
      "type": "modified",
      "oldContent": " Schema.createRecord(recordName,",
      "newContent": " Schema containerType =",
      "oldLineNo": "439",
      "newLineNo": "447"
    },
    {
      "type": "modified",
      "oldContent": " \"Structure for FHIR type contained\",",
      "newContent": " Schema.createArray(",
      "oldLineNo": "440",
      "newLineNo": "448"
    },
    {
      "type": "modified",
      "oldContent": " recordNamespace,",
      "newContent": " Schema.createRecord(",
      "oldLineNo": "441",
      "newLineNo": "449"
    },
    {
      "type": "modified",
      "oldContent": " false,",
      "newContent": " recordName, \"Structure for FHIR type contained\", recordNamespace, false, fields));",
      "oldLineNo": "442",
      "newLineNo": "450"
    },
    {
      "type": "deleted",
      "content": " fields));",
      "lineNo": "443"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "444",
      "newLineNo": "451"
    },
    {
      "type": "not-modified",
      "content": " return new HapiContainedToAvroConverter(contained, containerType);",
      "oldLineNo": "445",
      "newLineNo": "452"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "446",
      "newLineNo": "453"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "447",
      "newLineNo": "454"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "448",
      "newLineNo": "455"
    },
    {
      "type": "modified",
      "oldContent": " public HapiConverter<Schema> visitComposite(String elementName,",
      "newContent": " public HapiConverter<Schema> visitComposite(",
      "oldLineNo": "449",
      "newLineNo": "456"
    },
    {
      "type": "added",
      "content": " String elementName,",
      "lineNo": "457"
    },
    {
      "type": "not-modified",
      "content": " String elementPath,",
      "oldLineNo": "450",
      "newLineNo": "458"
    },
    {
      "type": "not-modified",
      "content": " String baseType,",
      "oldLineNo": "451",
      "newLineNo": "459"
    },
    {
      "type": "not-modified",
      "content": " String elementTypeUrl,",
      "oldLineNo": "452",
      "newLineNo": "460"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "461",
      "newLineNo": "469"
    },
    {
      "type": "not-modified",
      "content": " if (converter == null) {",
      "oldLineNo": "462",
      "newLineNo": "470"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "463",
      "newLineNo": "471"
    },
    {
      "type": "modified",
      "oldContent": " List<Field> fields = children.stream()",
      "newContent": " List<Field> fields =",
      "oldLineNo": "464",
      "newLineNo": "472"
    },
    {
      "type": "modified",
      "oldContent": "          .map((StructureField<HapiConverter<Schema>> field) -> {",
      "newContent": " children.stream()",
      "oldLineNo": "465",
      "newLineNo": "473"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "              .map(",
      "oldLineNo": "466",
      "newLineNo": "474"
    },
    {
      "type": "modified",
      "oldContent": " String doc = field.extensionUrl() != null",
      "newContent": "                  (StructureField<HapiConverter<Schema>> field) -> {",
      "oldLineNo": "467",
      "newLineNo": "475"
    },
    {
      "type": "modified",
      "oldContent": "                ? \"Extension field for \" + field.extensionUrl()",
      "newContent": " String doc =",
      "oldLineNo": "468",
      "newLineNo": "476"
    },
    {
      "type": "modified",
      "oldContent": "                : \"Field for FHIR property \" + field.propertyName();",
      "newContent": " field.extensionUrl() != null",
      "oldLineNo": "469",
      "newLineNo": "477"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "                            ? \"Extension field for \" + field.extensionUrl()",
      "oldLineNo": "470",
      "newLineNo": "478"
    },
    {
      "type": "modified",
      "oldContent": " return new Field(field.fieldName(),",
      "newContent": "                            : \"Field for FHIR property \" + field.propertyName();",
      "oldLineNo": "471",
      "newLineNo": "479"
    },
    {
      "type": "modified",
      "oldContent": " nullable(field.result().getDataType()),",
      "newContent": "",
      "oldLineNo": "472",
      "newLineNo": "480"
    },
    {
      "type": "modified",
      "oldContent": " doc,",
      "newContent": " return new Field(",
      "oldLineNo": "473",
      "newLineNo": "481"
    },
    {
      "type": "modified",
      "oldContent": " JsonProperties.NULL_VALUE);",
      "newContent": " field.fieldName(),",
      "oldLineNo": "474",
      "newLineNo": "482"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " nullable(field.result().getDataType()),",
      "oldLineNo": "475",
      "newLineNo": "483"
    },
    {
      "type": "modified",
      "oldContent": "          }).collect(Collectors.toList());",
      "newContent": " doc,",
      "oldLineNo": "476",
      "newLineNo": "484"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " JsonProperties.NULL_VALUE);",
      "oldLineNo": "477",
      "newLineNo": "485"
    },
    {
      "type": "modified",
      "oldContent": " Schema schema = Schema.createRecord(recordName,",
      "newContent": "                  })",
      "oldLineNo": "478",
      "newLineNo": "486"
    },
    {
      "type": "modified",
      "oldContent": " \"Structure for FHIR type \" + baseType,",
      "newContent": "              .collect(Collectors.toList());",
      "oldLineNo": "479",
      "newLineNo": "487"
    },
    {
      "type": "modified",
      "oldContent": " recordNamespace,",
      "newContent": "",
      "oldLineNo": "480",
      "newLineNo": "488"
    },
    {
      "type": "modified",
      "oldContent": " false,",
      "newContent": " Schema schema =",
      "oldLineNo": "481",
      "newLineNo": "489"
    },
    {
      "type": "modified",
      "oldContent": " fields);",
      "newContent": " Schema.createRecord(",
      "oldLineNo": "482",
      "newLineNo": "490"
    },
    {
      "type": "added",
      "content": " recordName, \"Structure for FHIR type \" + baseType, recordNamespace, false, fields);",
      "lineNo": "491"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "483",
      "newLineNo": "492"
    },
    {
      "type": "not-modified",
      "content": " converter = new CompositeToAvroConverter(baseType, children, schema, fhirSupport);",
      "oldLineNo": "484",
      "newLineNo": "493"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "485",
      "newLineNo": "494"
    },
    {
      "type": "not-modified",
      "content": " return converter;",
      "oldLineNo": "489",
      "newLineNo": "498"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "490",
      "newLineNo": "499"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "491",
      "newLineNo": "500"
    },
    {
      "type": "modified",
      "oldContent": " /**",
      "newContent": " /** Field setter that does nothing for synthetic or unsupported field types. */",
      "oldLineNo": "492",
      "newLineNo": "501"
    },
    {
      "type": "modified",
      "oldContent": "   * Field setter that does nothing for synthetic or unsupported field types.",
      "newContent": " private static class NoOpFieldSetter implements HapiFieldSetter, HapiObjectConverter {",
      "oldLineNo": "493",
      "newLineNo": "502"
    },
    {
      "type": "deleted",
      "content": "   */",
      "lineNo": "494"
    },
    {
      "type": "deleted",
      "content": " private static class NoOpFieldSetter implements HapiFieldSetter,",
      "lineNo": "495"
    },
    {
      "type": "deleted",
      "content": " HapiObjectConverter {",
      "lineNo": "496"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "497",
      "newLineNo": "503"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "498",
      "newLineNo": "504"
    },
    {
      "type": "modified",
      "oldContent": " public void setField(IBase parentObject, BaseRuntimeChildDefinition fieldToSet,",
      "newContent": " public void setField(",
      "oldLineNo": "499",
      "newLineNo": "505"
    },
    {
      "type": "modified",
      "oldContent": " Object sparkObject) {",
      "newContent": " IBase parentObject, BaseRuntimeChildDefinition fieldToSet, Object sparkObject) {}",
      "oldLineNo": "500",
      "newLineNo": "506"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "501"
    },
    {
      "type": "deleted",
      "content": "    }",
      "lineNo": "502"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "503",
      "newLineNo": "507"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "504",
      "newLineNo": "508"
    },
    {
      "type": "not-modified",
      "content": " public IBase toHapi(Object input) {",
      "oldLineNo": "505",
      "newLineNo": "509"
    },
    {
      "type": "not-modified",
      "content": " return null;",
      "oldLineNo": "506",
      "newLineNo": "510"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "507",
      "newLineNo": "511"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "508"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "509",
      "newLineNo": "512"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "510",
      "newLineNo": "513"
    },
    {
      "type": "not-modified",
      "content": " private static final HapiFieldSetter NOOP_FIELD_SETTER = new NoOpFieldSetter();",
      "oldLineNo": "511",
      "newLineNo": "514"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "512",
      "newLineNo": "515"
    },
    {
      "type": "modified",
      "oldContent": " /**",
      "newContent": " /** Converter that returns the relative value of a URI type. */",
      "oldLineNo": "513",
      "newLineNo": "516"
    },
    {
      "type": "deleted",
      "content": "   * Converter that returns the relative value of a URI type.",
      "lineNo": "514"
    },
    {
      "type": "deleted",
      "content": "   */",
      "lineNo": "515"
    },
    {
      "type": "not-modified",
      "content": " private static class RelativeValueConverter extends HapiConverter<Schema> {",
      "oldLineNo": "516",
      "newLineNo": "517"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "517",
      "newLineNo": "518"
    },
    {
      "type": "not-modified",
      "content": " private final String prefix;",
      "oldLineNo": "518",
      "newLineNo": "519"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "523",
      "newLineNo": "524"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "524",
      "newLineNo": "525"
    },
    {
      "type": "not-modified",
      "content": " public Object fromHapi(Object input) {",
      "oldLineNo": "525",
      "newLineNo": "526"
    },
    {
      "type": "modified",
      "oldContent": " String uri =  ((IPrimitiveType) input).getValueAsString();",
      "newContent": " String uri = ((IPrimitiveType) input).getValueAsString();",
      "oldLineNo": "526",
      "newLineNo": "527"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "527",
      "newLineNo": "528"
    },
    {
      "type": "not-modified",
      "content": " return uri != null && lowercase(uri).startsWith(lowercase(prefix))",
      "oldLineNo": "528",
      "newLineNo": "529"
    },
    {
      "type": "not-modified",
      "content": "          ? uri.substring(uri.lastIndexOf('/') + 1)",
      "oldLineNo": "529",
      "newLineNo": "530"
    },
    {
      "type": "not-modified",
      "content": " // reference field, and the value will be set from the primary field.",
      "oldLineNo": "548",
      "newLineNo": "549"
    },
    {
      "type": "not-modified",
      "content": " return NOOP_FIELD_SETTER;",
      "oldLineNo": "549",
      "newLineNo": "550"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "550",
      "newLineNo": "551"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "551"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "552",
      "newLineNo": "552"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "553",
      "newLineNo": "553"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "554",
      "newLineNo": "554"
    },
    {
      "type": "modified",
      "oldContent": " public HapiConverter<Schema> visitReference(String elementName,",
      "newContent": " public HapiConverter<Schema> visitReference(",
      "oldLineNo": "555",
      "newLineNo": "555"
    },
    {
      "type": "added",
      "content": " String elementName,",
      "lineNo": "556"
    },
    {
      "type": "not-modified",
      "content": " List<String> referenceTypes,",
      "oldLineNo": "556",
      "newLineNo": "557"
    },
    {
      "type": "not-modified",
      "content": " List<StructureField<HapiConverter<Schema>>> children) {",
      "oldLineNo": "557",
      "newLineNo": "558"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "558",
      "newLineNo": "559"
    },
    {
      "type": "not-modified",
      "content": " // Add direct references",
      "oldLineNo": "570",
      "newLineNo": "571"
    },
    {
      "type": "not-modified",
      "content": " List<StructureField<HapiConverter<Schema>>> fieldsWithReferences =",
      "oldLineNo": "571",
      "newLineNo": "572"
    },
    {
      "type": "not-modified",
      "content": " referenceTypes.stream()",
      "oldLineNo": "572",
      "newLineNo": "573"
    },
    {
      "type": "modified",
      "oldContent": "              .map(refUri -> {",
      "newContent": "              .map(",
      "oldLineNo": "573",
      "newLineNo": "574"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " refUri -> {",
      "oldLineNo": "574",
      "newLineNo": "575"
    },
    {
      "type": "modified",
      "oldContent": " String relativeType = refUri.substring(refUri.lastIndexOf('/') + 1);",
      "newContent": " String relativeType = refUri.substring(refUri.lastIndexOf('/') + 1);",
      "oldLineNo": "575",
      "newLineNo": "576"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "",
      "oldLineNo": "576",
      "newLineNo": "577"
    },
    {
      "type": "modified",
      "oldContent": " // Convert to lower camel case if any of the element name is in upper camel case.",
      "newContent": " // Convert to lower camel case if any of the element name is in upper camel",
      "oldLineNo": "577",
      "newLineNo": "578"
    },
    {
      "type": "modified",
      "oldContent": " // E.g. OrganizationId to organizationId; To make it consistent with SQL-on-FHIR.",
      "newContent": " // case.",
      "oldLineNo": "578",
      "newLineNo": "579"
    },
    {
      "type": "modified",
      "oldContent": " // https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md#referenced",
      "newContent": " // E.g. OrganizationId to organizationId; To make it consistent with",
      "oldLineNo": "579",
      "newLineNo": "580"
    },
    {
      "type": "modified",
      "oldContent": " relativeType = lowercase(relativeType);",
      "newContent": " // SQL-on-FHIR.",
      "oldLineNo": "580",
      "newLineNo": "581"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " // https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md#referenced",
      "oldLineNo": "581",
      "newLineNo": "582"
    },
    {
      "type": "modified",
      "oldContent": " return new StructureField<HapiConverter<Schema>>(\"reference\",",
      "newContent": " relativeType = lowercase(relativeType);",
      "oldLineNo": "582",
      "newLineNo": "583"
    },
    {
      "type": "modified",
      "oldContent": " relativeType + \"Id\",",
      "newContent": "",
      "oldLineNo": "583",
      "newLineNo": "584"
    },
    {
      "type": "modified",
      "oldContent": " null,",
      "newContent": " return new StructureField<HapiConverter<Schema>>(",
      "oldLineNo": "584",
      "newLineNo": "585"
    },
    {
      "type": "modified",
      "oldContent": " false,",
      "newContent": " \"reference\",",
      "oldLineNo": "585",
      "newLineNo": "586"
    },
    {
      "type": "modified",
      "oldContent": " false,",
      "newContent": " relativeType + \"Id\",",
      "oldLineNo": "586",
      "newLineNo": "587"
    },
    {
      "type": "modified",
      "oldContent": " new RelativeValueConverter(relativeType));",
      "newContent": " null,",
      "oldLineNo": "587",
      "newLineNo": "588"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " false,",
      "oldLineNo": "588",
      "newLineNo": "589"
    },
    {
      "type": "modified",
      "oldContent": "              }).collect(Collectors.toList());",
      "newContent": " false,",
      "oldLineNo": "589",
      "newLineNo": "590"
    },
    {
      "type": "added",
      "content": " new RelativeValueConverter(relativeType));",
      "lineNo": "591"
    },
    {
      "type": "added",
      "content": "                  })",
      "lineNo": "592"
    },
    {
      "type": "added",
      "content": "              .collect(Collectors.toList());",
      "lineNo": "593"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "590",
      "newLineNo": "594"
    },
    {
      "type": "not-modified",
      "content": " fieldsWithReferences.addAll(children);",
      "oldLineNo": "591",
      "newLineNo": "595"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "592",
      "newLineNo": "596"
    },
    {
      "type": "modified",
      "oldContent": " List<Field> fields = fieldsWithReferences.stream()",
      "newContent": " List<Field> fields =",
      "oldLineNo": "593",
      "newLineNo": "597"
    },
    {
      "type": "modified",
      "oldContent": "          .map(entry -> new Field(entry.fieldName(),",
      "newContent": " fieldsWithReferences.stream()",
      "oldLineNo": "594",
      "newLineNo": "598"
    },
    {
      "type": "modified",
      "oldContent": " nullable(entry.result().getDataType()),",
      "newContent": "              .map(",
      "oldLineNo": "595",
      "newLineNo": "599"
    },
    {
      "type": "modified",
      "oldContent": " \"Reference field\",",
      "newContent": " entry ->",
      "oldLineNo": "596",
      "newLineNo": "600"
    },
    {
      "type": "modified",
      "oldContent": " JsonProperties.NULL_VALUE))",
      "newContent": " new Field(",
      "oldLineNo": "597",
      "newLineNo": "601"
    },
    {
      "type": "modified",
      "oldContent": "          .collect(Collectors.toList());",
      "newContent": " entry.fieldName(),",
      "oldLineNo": "598",
      "newLineNo": "602"
    },
    {
      "type": "added",
      "content": " nullable(entry.result().getDataType()),",
      "lineNo": "603"
    },
    {
      "type": "added",
      "content": " \"Reference field\",",
      "lineNo": "604"
    },
    {
      "type": "added",
      "content": " JsonProperties.NULL_VALUE))",
      "lineNo": "605"
    },
    {
      "type": "added",
      "content": "              .collect(Collectors.toList());",
      "lineNo": "606"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "599",
      "newLineNo": "607"
    },
    {
      "type": "modified",
      "oldContent": " Schema schema = Schema.createRecord(recordName,",
      "newContent": " Schema schema =",
      "oldLineNo": "600",
      "newLineNo": "608"
    },
    {
      "type": "modified",
      "oldContent": " \"Structure for FHIR type \" + recordName,",
      "newContent": " Schema.createRecord(",
      "oldLineNo": "601",
      "newLineNo": "609"
    },
    {
      "type": "modified",
      "oldContent": " basePackage,",
      "newContent": " recordName, \"Structure for FHIR type \" + recordName, basePackage, false, fields);",
      "oldLineNo": "602",
      "newLineNo": "610"
    },
    {
      "type": "deleted",
      "content": " false, fields);",
      "lineNo": "603"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "604",
      "newLineNo": "611"
    },
    {
      "type": "modified",
      "oldContent": " converter = new CompositeToAvroConverter(null,",
      "newContent": " converter = new CompositeToAvroConverter(null, fieldsWithReferences, schema, fhirSupport);",
      "oldLineNo": "605",
      "newLineNo": "612"
    },
    {
      "type": "deleted",
      "content": " fieldsWithReferences,",
      "lineNo": "606"
    },
    {
      "type": "deleted",
      "content": " schema,",
      "lineNo": "607"
    },
    {
      "type": "deleted",
      "content": " fhirSupport);",
      "lineNo": "608"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "609",
      "newLineNo": "613"
    },
    {
      "type": "not-modified",
      "content": " visitedConverters.put(fullName, converter);",
      "oldLineNo": "610",
      "newLineNo": "614"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "611",
      "newLineNo": "615"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "614",
      "newLineNo": "618"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "615",
      "newLineNo": "619"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "616",
      "newLineNo": "620"
    },
    {
      "type": "modified",
      "oldContent": " public HapiConverter<Schema> visitParentExtension(String elementName,",
      "newContent": " public HapiConverter<Schema> visitParentExtension(",
      "oldLineNo": "617",
      "newLineNo": "621"
    },
    {
      "type": "added",
      "content": " String elementName,",
      "lineNo": "622"
    },
    {
      "type": "not-modified",
      "content": " String extensionUrl,",
      "oldLineNo": "618",
      "newLineNo": "623"
    },
    {
      "type": "not-modified",
      "content": " List<StructureField<HapiConverter<Schema>>> children) {",
      "oldLineNo": "619",
      "newLineNo": "624"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "620",
      "newLineNo": "625"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "629",
      "newLineNo": "634"
    },
    {
      "type": "not-modified",
      "content": " String[] parts = localPart.split(\"[-|_]\");",
      "oldLineNo": "630",
      "newLineNo": "635"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "631",
      "newLineNo": "636"
    },
    {
      "type": "modified",
      "oldContent": " String recordName = Arrays.stream(parts).map(part ->",
      "newContent": " String recordName =",
      "oldLineNo": "632",
      "newLineNo": "637"
    },
    {
      "type": "modified",
      "oldContent": " part.substring(0,1).toUpperCase() + part.substring(1))",
      "newContent": " Arrays.stream(parts)",
      "oldLineNo": "633",
      "newLineNo": "638"
    },
    {
      "type": "modified",
      "oldContent": "        .collect(Collectors.joining());",
      "newContent": "            .map(part -> part.substring(0, 1).toUpperCase() + part.substring(1))",
      "oldLineNo": "634",
      "newLineNo": "639"
    },
    {
      "type": "added",
      "content": "            .collect(Collectors.joining());",
      "lineNo": "640"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "635",
      "newLineNo": "641"
    },
    {
      "type": "not-modified",
      "content": " String fullName = recordNamespace + \".\" + recordName;",
      "oldLineNo": "636",
      "newLineNo": "642"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "637",
      "newLineNo": "643"
    },
    {
      "type": "not-modified",
      "content": " HapiConverter<Schema> converter = visitedConverters.get(fullName);",
      "oldLineNo": "638",
      "newLineNo": "644"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "639",
      "newLineNo": "645"
    },
    {
      "type": "not-modified",
      "content": " if (converter == null) {",
      "oldLineNo": "640",
      "newLineNo": "646"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "641",
      "newLineNo": "647"
    },
    {
      "type": "modified",
      "oldContent": " List<Field> fields = children.stream()",
      "newContent": " List<Field> fields =",
      "oldLineNo": "642",
      "newLineNo": "648"
    },
    {
      "type": "modified",
      "oldContent": "          .map(entry ->",
      "newContent": " children.stream()",
      "oldLineNo": "643",
      "newLineNo": "649"
    },
    {
      "type": "modified",
      "oldContent": " new Field(entry.fieldName(),",
      "newContent": "              .map(",
      "oldLineNo": "644",
      "newLineNo": "650"
    },
    {
      "type": "modified",
      "oldContent": " nullable(entry.result().getDataType()),",
      "newContent": " entry ->",
      "oldLineNo": "645",
      "newLineNo": "651"
    },
    {
      "type": "modified",
      "oldContent": " \"Doc here\",",
      "newContent": " new Field(",
      "oldLineNo": "646",
      "newLineNo": "652"
    },
    {
      "type": "modified",
      "oldContent": " JsonProperties.NULL_VALUE))",
      "newContent": " entry.fieldName(),",
      "oldLineNo": "647",
      "newLineNo": "653"
    },
    {
      "type": "modified",
      "oldContent": "          .collect(Collectors.toList());",
      "newContent": " nullable(entry.result().getDataType()),",
      "oldLineNo": "648",
      "newLineNo": "654"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " \"Doc here\",",
      "oldLineNo": "649",
      "newLineNo": "655"
    },
    {
      "type": "modified",
      "oldContent": " Schema schema = Schema.createRecord(recordName,",
      "newContent": " JsonProperties.NULL_VALUE))",
      "oldLineNo": "650",
      "newLineNo": "656"
    },
    {
      "type": "modified",
      "oldContent": " \"Reference type.\",",
      "newContent": "              .collect(Collectors.toList());",
      "oldLineNo": "651",
      "newLineNo": "657"
    },
    {
      "type": "modified",
      "oldContent": " recordNamespace,",
      "newContent": "",
      "oldLineNo": "652",
      "newLineNo": "658"
    },
    {
      "type": "modified",
      "oldContent": " false, fields);",
      "newContent": " Schema schema =",
      "oldLineNo": "653",
      "newLineNo": "659"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " Schema.createRecord(recordName, \"Reference type.\", recordNamespace, false, fields);",
      "oldLineNo": "654",
      "newLineNo": "660"
    },
    {
      "type": "modified",
      "oldContent": " converter = new CompositeToAvroConverter(null,",
      "newContent": "",
      "oldLineNo": "655",
      "newLineNo": "661"
    },
    {
      "type": "modified",
      "oldContent": " children,",
      "newContent": " converter = new CompositeToAvroConverter(null, children, schema, fhirSupport, extensionUrl);",
      "oldLineNo": "656",
      "newLineNo": "662"
    },
    {
      "type": "deleted",
      "content": " schema,",
      "lineNo": "657"
    },
    {
      "type": "deleted",
      "content": " fhirSupport,",
      "lineNo": "658"
    },
    {
      "type": "deleted",
      "content": " extensionUrl);",
      "lineNo": "659"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "660",
      "newLineNo": "663"
    },
    {
      "type": "not-modified",
      "content": " visitedConverters.put(fullName, converter);",
      "oldLineNo": "661",
      "newLineNo": "664"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "662",
      "newLineNo": "665"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "665",
      "newLineNo": "668"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "666",
      "newLineNo": "669"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "667",
      "newLineNo": "670"
    },
    {
      "type": "modified",
      "oldContent": " public HapiConverter<Schema> visitLeafExtension(String elementName, String extensionUrl,",
      "newContent": " public HapiConverter<Schema> visitLeafExtension(",
      "oldLineNo": "668",
      "newLineNo": "671"
    },
    {
      "type": "modified",
      "oldContent": " HapiConverter<Schema> element) {",
      "newContent": " String elementName, String extensionUrl, HapiConverter<Schema> element) {",
      "oldLineNo": "669",
      "newLineNo": "672"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "670",
      "newLineNo": "673"
    },
    {
      "type": "not-modified",
      "content": " return new LeafExtensionConverter<Schema>(extensionUrl, element);",
      "oldLineNo": "671",
      "newLineNo": "674"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "672",
      "newLineNo": "675"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "673",
      "newLineNo": "676"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "674",
      "newLineNo": "677"
    },
    {
      "type": "modified",
      "oldContent": " public HapiConverter<Schema> visitMultiValued(String elementName,",
      "newContent": " public HapiConverter<Schema> visitMultiValued(",
      "oldLineNo": "675",
      "newLineNo": "678"
    },
    {
      "type": "modified",
      "oldContent": " HapiConverter<Schema> arrayElement) {",
      "newContent": " String elementName, HapiConverter<Schema> arrayElement) {",
      "oldLineNo": "676",
      "newLineNo": "679"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "677",
      "newLineNo": "680"
    },
    {
      "type": "not-modified",
      "content": " return new MultiValuedToAvroConverter(arrayElement);",
      "oldLineNo": "678",
      "newLineNo": "681"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "679",
      "newLineNo": "682"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "680",
      "newLineNo": "683"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "681",
      "newLineNo": "684"
    },
    {
      "type": "modified",
      "oldContent": " public HapiConverter<Schema> visitChoice(String elementName,",
      "newContent": " public HapiConverter<Schema> visitChoice(",
      "oldLineNo": "682",
      "newLineNo": "685"
    },
    {
      "type": "modified",
      "oldContent": " Map<String, HapiConverter<Schema>> choiceTypes) {",
      "newContent": " String elementName, Map<String, HapiConverter<Schema>> choiceTypes) {",
      "oldLineNo": "683",
      "newLineNo": "686"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "",
      "oldLineNo": "684",
      "newLineNo": "687"
    },
    {
      "type": "modified",
      "oldContent": " List<Field> fields = choiceTypes.entrySet()",
      "newContent": " List<Field> fields =",
      "oldLineNo": "685",
      "newLineNo": "688"
    },
    {
      "type": "modified",
      "oldContent": "        .stream()",
      "newContent": " choiceTypes.entrySet().stream()",
      "oldLineNo": "686",
      "newLineNo": "689"
    },
    {
      "type": "modified",
      "oldContent": "        .map(entry -> {",
      "newContent": "            .map(",
      "oldLineNo": "687",
      "newLineNo": "690"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " entry -> {",
      "oldLineNo": "688",
      "newLineNo": "691"
    },
    {
      "type": "modified",
      "oldContent": " // Ensure first character of the field is lower case.",
      "newContent": "",
      "oldLineNo": "689",
      "newLineNo": "692"
    },
    {
      "type": "modified",
      "oldContent": " String fieldName = lowercase(entry.getKey());",
      "newContent": " // Ensure first character of the field is lower case.",
      "oldLineNo": "690",
      "newLineNo": "693"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " String fieldName = lowercase(entry.getKey());",
      "oldLineNo": "691",
      "newLineNo": "694"
    },
    {
      "type": "modified",
      "oldContent": " return new Field(fieldName,",
      "newContent": "",
      "oldLineNo": "692",
      "newLineNo": "695"
    },
    {
      "type": "modified",
      "oldContent": " nullable(entry.getValue().getDataType()),",
      "newContent": " return new Field(",
      "oldLineNo": "693",
      "newLineNo": "696"
    },
    {
      "type": "modified",
      "oldContent": " \"Choice field\",",
      "newContent": " fieldName,",
      "oldLineNo": "694",
      "newLineNo": "697"
    },
    {
      "type": "modified",
      "oldContent": " JsonProperties.NULL_VALUE);",
      "newContent": " nullable(entry.getValue().getDataType()),",
      "oldLineNo": "695",
      "newLineNo": "698"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " \"Choice field\",",
      "oldLineNo": "696",
      "newLineNo": "699"
    },
    {
      "type": "modified",
      "oldContent": "        })",
      "newContent": " JsonProperties.NULL_VALUE);",
      "oldLineNo": "697",
      "newLineNo": "700"
    },
    {
      "type": "modified",
      "oldContent": "        .collect(Collectors.toList());",
      "newContent": "                })",
      "oldLineNo": "698",
      "newLineNo": "701"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "            .collect(Collectors.toList());",
      "oldLineNo": "699",
      "newLineNo": "702"
    },
    {
      "type": "modified",
      "oldContent": " String fieldTypesString = choiceTypes.entrySet()",
      "newContent": "",
      "oldLineNo": "700",
      "newLineNo": "703"
    },
    {
      "type": "modified",
      "oldContent": "        .stream()",
      "newContent": " String fieldTypesString =",
      "oldLineNo": "701",
      "newLineNo": "704"
    },
    {
      "type": "modified",
      "oldContent": "        .map(choiceEntry -> {",
      "newContent": " choiceTypes.entrySet().stream()",
      "oldLineNo": "702",
      "newLineNo": "705"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "            .map(",
      "oldLineNo": "703",
      "newLineNo": "706"
    },
    {
      "type": "modified",
      "oldContent": " // References need their full record name, which includes the permissible referent types",
      "newContent": " choiceEntry -> {",
      "oldLineNo": "704",
      "newLineNo": "707"
    },
    {
      "type": "modified",
      "oldContent": " if (choiceEntry.getKey().equals(\"Reference\")) {",
      "newContent": "",
      "oldLineNo": "705",
      "newLineNo": "708"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " // References need their full record name, which includes the permissible referent",
      "oldLineNo": "706",
      "newLineNo": "709"
    },
    {
      "type": "modified",
      "oldContent": " return choiceEntry.getValue().getDataType().getName();",
      "newContent": " // types",
      "oldLineNo": "707",
      "newLineNo": "710"
    },
    {
      "type": "modified",
      "oldContent": "          } else {",
      "newContent": " if (choiceEntry.getKey().equals(\"Reference\")) {",
      "oldLineNo": "708",
      "newLineNo": "711"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "",
      "oldLineNo": "709",
      "newLineNo": "712"
    },
    {
      "type": "modified",
      "oldContent": " return choiceEntry.getKey();",
      "newContent": " return choiceEntry.getValue().getDataType().getName();",
      "oldLineNo": "710",
      "newLineNo": "713"
    },
    {
      "type": "modified",
      "oldContent": "          }",
      "newContent": "                  } else {",
      "oldLineNo": "711",
      "newLineNo": "714"
    },
    {
      "type": "modified",
      "oldContent": "        }).sorted()",
      "newContent": "",
      "oldLineNo": "712",
      "newLineNo": "715"
    },
    {
      "type": "modified",
      "oldContent": "        .map(StringUtils::capitalize)",
      "newContent": " return choiceEntry.getKey();",
      "oldLineNo": "713",
      "newLineNo": "716"
    },
    {
      "type": "modified",
      "oldContent": "        .collect(Collectors.joining());",
      "newContent": "                  }",
      "oldLineNo": "714",
      "newLineNo": "717"
    },
    {
      "type": "added",
      "content": "                })",
      "lineNo": "718"
    },
    {
      "type": "added",
      "content": "            .sorted()",
      "lineNo": "719"
    },
    {
      "type": "added",
      "content": "            .map(StringUtils::capitalize)",
      "lineNo": "720"
    },
    {
      "type": "added",
      "content": "            .collect(Collectors.joining());",
      "lineNo": "721"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "715",
      "newLineNo": "722"
    },
    {
      "type": "not-modified",
      "content": " String fullName = basePackage + \".\" + \"Choice\" + fieldTypesString;",
      "oldLineNo": "716",
      "newLineNo": "723"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "717",
      "newLineNo": "724"
    },
    {
      "type": "not-modified",
      "content": " HapiConverter<Schema> converter = visitedConverters.get(fullName);",
      "oldLineNo": "718",
      "newLineNo": "725"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "719",
      "newLineNo": "726"
    },
    {
      "type": "not-modified",
      "content": " if (converter == null) {",
      "oldLineNo": "720",
      "newLineNo": "727"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "721",
      "newLineNo": "728"
    },
    {
      "type": "modified",
      "oldContent": " Schema schema = Schema.createRecord(\"Choice\" + fieldTypesString,",
      "newContent": " Schema schema =",
      "oldLineNo": "722",
      "newLineNo": "729"
    },
    {
      "type": "modified",
      "oldContent": " \"Structure for FHIR choice type \",",
      "newContent": " Schema.createRecord(",
      "oldLineNo": "723",
      "newLineNo": "730"
    },
    {
      "type": "modified",
      "oldContent": " basePackage,",
      "newContent": " \"Choice\" + fieldTypesString,",
      "oldLineNo": "724",
      "newLineNo": "731"
    },
    {
      "type": "modified",
      "oldContent": " false, fields);",
      "newContent": " \"Structure for FHIR choice type \",",
      "oldLineNo": "725",
      "newLineNo": "732"
    },
    {
      "type": "added",
      "content": " basePackage,",
      "lineNo": "733"
    },
    {
      "type": "added",
      "content": " false,",
      "lineNo": "734"
    },
    {
      "type": "added",
      "content": " fields);",
      "lineNo": "735"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "726",
      "newLineNo": "736"
    },
    {
      "type": "not-modified",
      "content": " converter = new HapiChoiceToAvroConverter(choiceTypes, schema, fhirSupport);",
      "oldLineNo": "727",
      "newLineNo": "737"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "728",
      "newLineNo": "738"
    },
    {
      "type": "not-modified",
      "content": " private static class FieldSetter implements HapiFieldSetter, HapiObjectConverter {",
      "oldLineNo": "22",
      "newLineNo": "22"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "23",
      "newLineNo": "23"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "24",
      "newLineNo": "24"
    },
    {
      "type": "modified",
      "oldContent": " public void setField(IBase parentObject, BaseRuntimeChildDefinition fieldToSet, Object value) {",
      "newContent": " public void setField(IBase parentObject, BaseRuntimeChildDefinition fieldToSet, Object value) {}",
      "oldLineNo": "25",
      "newLineNo": "25"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "26"
    },
    {
      "type": "deleted",
      "content": "    }",
      "lineNo": "27"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "28",
      "newLineNo": "26"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "29",
      "newLineNo": "27"
    },
    {
      "type": "not-modified",
      "content": " public IBase toHapi(Object input) {",
      "oldLineNo": "30",
      "newLineNo": "28"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "not-modified",
      "content": "import com.cerner.bunsen.FhirContexts;",
      "oldLineNo": "3",
      "newLineNo": "3"
    },
    {
      "type": "not-modified",
      "content": "import com.cerner.bunsen.avro.AvroConverter;",
      "oldLineNo": "4",
      "newLineNo": "4"
    },
    {
      "type": "deleted",
      "content": "import com.google.common.collect.ImmutableList;",
      "lineNo": "5"
    },
    {
      "type": "not-modified",
      "content": "import java.io.File;",
      "oldLineNo": "6",
      "newLineNo": "5"
    },
    {
      "type": "not-modified",
      "content": "import java.io.IOException;",
      "oldLineNo": "7",
      "newLineNo": "6"
    },
    {
      "type": "not-modified",
      "content": "import java.nio.file.Files;",
      "oldLineNo": "8",
      "newLineNo": "7"
    },
    {
      "type": "not-modified",
      "content": "import java.util.Arrays;",
      "oldLineNo": "9",
      "newLineNo": "8"
    },
    {
      "type": "not-modified",
      "content": "import java.util.Collections;",
      "oldLineNo": "10",
      "newLineNo": "9"
    },
    {
      "type": "not-modified",
      "content": "import java.util.List;",
      "oldLineNo": "11",
      "newLineNo": "10"
    },
    {
      "type": "not-modified",
      "content": "import java.util.Map;",
      "oldLineNo": "12",
      "newLineNo": "11"
    },
    {
      "type": "deleted",
      "content": "import java.util.function.Function;",
      "lineNo": "13"
    },
    {
      "type": "not-modified",
      "content": "import java.util.stream.Collectors;",
      "oldLineNo": "14",
      "newLineNo": "12"
    },
    {
      "type": "not-modified",
      "content": "import org.apache.avro.Protocol;",
      "oldLineNo": "15",
      "newLineNo": "13"
    },
    {
      "type": "not-modified",
      "content": "import org.apache.avro.Schema;",
      "oldLineNo": "16",
      "newLineNo": "14"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "17",
      "newLineNo": "15"
    },
    {
      "type": "modified",
      "oldContent": "/**",
      "newContent": "/** Simple utility class to generate avro schemas for a given set of resource types. */",
      "oldLineNo": "18",
      "newLineNo": "16"
    },
    {
      "type": "deleted",
      "content": " * Simple utility class to generate avro schemas for a given set of resource types.",
      "lineNo": "19"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "20"
    },
    {
      "type": "not-modified",
      "content": "public class GenerateSchemas {",
      "oldLineNo": "21",
      "newLineNo": "17"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "22",
      "newLineNo": "18"
    },
    {
      "type": "not-modified",
      "content": " public static final String DELIMITER = \";\";",
      "oldLineNo": "23",
      "newLineNo": "19"
    },
    {
      "type": "not-modified",
      "content": " System.out.println(\"Usage: GenerateSchemas <output file> resourceTypeUrls...\");",
      "oldLineNo": "34",
      "newLineNo": "30"
    },
    {
      "type": "not-modified",
      "content": " System.out.println(\"Example:\");",
      "oldLineNo": "35",
      "newLineNo": "31"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "36",
      "newLineNo": "32"
    },
    {
      "type": "modified",
      "oldContent": " System.out.println(\"  GenerateSchemas my_schemas.avsc \"",
      "newContent": " System.out.println(",
      "oldLineNo": "37",
      "newLineNo": "33"
    },
    {
      "type": "modified",
      "oldContent": "          + \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient \"",
      "newContent": " \"  GenerateSchemas my_schemas.avsc \"",
      "oldLineNo": "38",
      "newLineNo": "34"
    },
    {
      "type": "modified",
      "oldContent": "          + \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-condition\");",
      "newContent": "              + \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient \"",
      "oldLineNo": "39",
      "newLineNo": "35"
    },
    {
      "type": "added",
      "content": "              + \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-condition\");",
      "lineNo": "36"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "40",
      "newLineNo": "37"
    },
    {
      "type": "not-modified",
      "content": " System.out.println();",
      "oldLineNo": "41",
      "newLineNo": "38"
    },
    {
      "type": "modified",
      "oldContent": " System.out.println(\"The resulting avsc file then can be used to generate Java classes \"",
      "newContent": " System.out.println(",
      "oldLineNo": "42",
      "newLineNo": "39"
    },
    {
      "type": "modified",
      "oldContent": "          + \"using avro-tools, for example:\");",
      "newContent": " \"The resulting avsc file then can be used to generate Java classes \"",
      "oldLineNo": "43",
      "newLineNo": "40"
    },
    {
      "type": "added",
      "content": "              + \"using avro-tools, for example:\");",
      "lineNo": "41"
    },
    {
      "type": "not-modified",
      "content": " System.out.println(\"  avro-tools compile protocol my_schemas.avsc <target_directory>\");",
      "oldLineNo": "44",
      "newLineNo": "42"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "45",
      "newLineNo": "43"
    },
    {
      "type": "not-modified",
      "content": " return 1;",
      "oldLineNo": "46",
      "newLineNo": "44"
    },
    {
      "type": "not-modified",
      "content": " return 1;",
      "oldLineNo": "54",
      "newLineNo": "52"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "55",
      "newLineNo": "53"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "56",
      "newLineNo": "54"
    },
    {
      "type": "modified",
      "oldContent": " Map<String, List<String>> resourceTypeUrls = Arrays.stream(args)",
      "newContent": " Map<String, List<String>> resourceTypeUrls =",
      "oldLineNo": "57",
      "newLineNo": "55"
    },
    {
      "type": "modified",
      "oldContent": "        .skip(1)",
      "newContent": " Arrays.stream(args)",
      "oldLineNo": "58",
      "newLineNo": "56"
    },
    {
      "type": "modified",
      "oldContent": "        .collect(Collectors.toMap(item -> item.split(DELIMITER)[0],",
      "newContent": "            .skip(1)",
      "oldLineNo": "59",
      "newLineNo": "57"
    },
    {
      "type": "modified",
      "oldContent": " item -> generateContainedUrls(item)));",
      "newContent": "            .collect(",
      "oldLineNo": "60",
      "newLineNo": "58"
    },
    {
      "type": "added",
      "content": " Collectors.toMap(",
      "lineNo": "59"
    },
    {
      "type": "added",
      "content": " item -> item.split(DELIMITER)[0], item -> generateContainedUrls(item)));",
      "lineNo": "60"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "61",
      "newLineNo": "61"
    },
    {
      "type": "not-modified",
      "content": " List<Schema> schemas = AvroConverter.generateSchemas(FhirContexts.forStu3(), resourceTypeUrls);",
      "oldLineNo": "62",
      "newLineNo": "62"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "63",
      "newLineNo": "63"
    },
    {
      "type": "not-modified",
      "content": " // Wrap the schemas in a protocol to simplify the invocation of the compiler.",
      "oldLineNo": "64",
      "newLineNo": "64"
    },
    {
      "type": "modified",
      "oldContent": " Protocol protocol = new Protocol(\"FhirGeneratedSchemas\",",
      "newContent": " Protocol protocol =",
      "oldLineNo": "65",
      "newLineNo": "65"
    },
    {
      "type": "modified",
      "oldContent": " \"Avro schemas generated from FHIR StructureDefinitions\",",
      "newContent": " new Protocol(",
      "oldLineNo": "66",
      "newLineNo": "66"
    },
    {
      "type": "modified",
      "oldContent": " \"com.cerner.bunsen.avro\");",
      "newContent": " \"FhirGeneratedSchemas\",",
      "oldLineNo": "67",
      "newLineNo": "67"
    },
    {
      "type": "added",
      "content": " \"Avro schemas generated from FHIR StructureDefinitions\",",
      "lineNo": "68"
    },
    {
      "type": "added",
      "content": " \"com.cerner.bunsen.avro\");",
      "lineNo": "69"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "68",
      "newLineNo": "70"
    },
    {
      "type": "not-modified",
      "content": " protocol.setTypes(schemas);",
      "oldLineNo": "69",
      "newLineNo": "71"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "70",
      "newLineNo": "72"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "84",
      "newLineNo": "86"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "85",
      "newLineNo": "87"
    },
    {
      "type": "not-modified",
      "content": "   * Helper function to extract contained resources from resource string.",
      "oldLineNo": "86",
      "newLineNo": "88"
    },
    {
      "type": "modified",
      "oldContent": "   * ",
      "newContent": "   *",
      "oldLineNo": "87",
      "newLineNo": "89"
    },
    {
      "type": "not-modified",
      "content": "   * @param key the string containing resource url(s)",
      "oldLineNo": "88",
      "newLineNo": "90"
    },
    {
      "type": "not-modified",
      "content": "   * @return the list of contained urls",
      "oldLineNo": "89",
      "newLineNo": "91"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "90",
      "newLineNo": "92"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "44",
      "newLineNo": "44"
    },
    {
      "type": "not-modified",
      "content": " private static Observation testObservationDecoded;",
      "oldLineNo": "45",
      "newLineNo": "45"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "46",
      "newLineNo": "46"
    },
    {
      "type": "modified",
      "oldContent": " private static final Observation testObservationNullStatus = TestData.newObservation()",
      "newContent": " private static final Observation testObservationNullStatus =",
      "oldLineNo": "47",
      "newLineNo": "47"
    },
    {
      "type": "modified",
      "oldContent": "      .setStatus(Observation.ObservationStatus.NULL);",
      "newContent": " TestData.newObservation().setStatus(Observation.ObservationStatus.NULL);",
      "oldLineNo": "48",
      "newLineNo": "48"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "49",
      "newLineNo": "49"
    },
    {
      "type": "not-modified",
      "content": " private static Record avroObservationNullStatus;",
      "oldLineNo": "50",
      "newLineNo": "50"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "51",
      "newLineNo": "51"
    },
    {
      "type": "not-modified",
      "content": " private static final Provenance testProvenance = TestData.newProvenance();",
      "oldLineNo": "72",
      "newLineNo": "72"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "73",
      "newLineNo": "73"
    },
    {
      "type": "not-modified",
      "content": " private static final MedicationRequest testMedicationRequest =",
      "oldLineNo": "74",
      "newLineNo": "74"
    },
    {
      "type": "modified",
      "oldContent": "      (MedicationRequest) TestData.newMedicationRequest()",
      "newContent": "      (MedicationRequest)",
      "oldLineNo": "75",
      "newLineNo": "75"
    },
    {
      "type": "modified",
      "oldContent": "          .addContained(testMedicationOne)",
      "newContent": " TestData.newMedicationRequest()",
      "oldLineNo": "76",
      "newLineNo": "76"
    },
    {
      "type": "modified",
      "oldContent": "          .addContained(testProvenance)",
      "newContent": "              .addContained(testMedicationOne)",
      "oldLineNo": "77",
      "newLineNo": "77"
    },
    {
      "type": "modified",
      "oldContent": "          .addContained(testMedicationTwo);",
      "newContent": "              .addContained(testProvenance)",
      "oldLineNo": "78",
      "newLineNo": "78"
    },
    {
      "type": "added",
      "content": "              .addContained(testMedicationTwo);",
      "lineNo": "79"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "79",
      "newLineNo": "80"
    },
    {
      "type": "not-modified",
      "content": " private static Record avroMedicationRequest;",
      "oldLineNo": "80",
      "newLineNo": "81"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "81",
      "newLineNo": "82"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "89",
      "newLineNo": "90"
    },
    {
      "type": "not-modified",
      "content": " private static Patient testBunsenTestProfilePatientDecoded;",
      "oldLineNo": "90",
      "newLineNo": "91"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "91",
      "newLineNo": "92"
    },
    {
      "type": "modified",
      "oldContent": " /**",
      "newContent": " /** Initialize test data. */",
      "oldLineNo": "92",
      "newLineNo": "93"
    },
    {
      "type": "deleted",
      "content": "   * Initialize test data.",
      "lineNo": "93"
    },
    {
      "type": "deleted",
      "content": "   */",
      "lineNo": "94"
    },
    {
      "type": "not-modified",
      "content": " @BeforeClass",
      "oldLineNo": "95",
      "newLineNo": "94"
    },
    {
      "type": "not-modified",
      "content": " public static void convertTestData() throws IOException {",
      "oldLineNo": "96",
      "newLineNo": "95"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "97",
      "newLineNo": "96"
    },
    {
      "type": "modified",
      "oldContent": " AvroConverter observationConverter = AvroConverter.forResource(FhirContexts.forR4(),",
      "newContent": " AvroConverter observationConverter =",
      "oldLineNo": "98",
      "newLineNo": "97"
    },
    {
      "type": "modified",
      "oldContent": " \"Observation\");",
      "newContent": " AvroConverter.forResource(FhirContexts.forR4(), \"Observation\");",
      "oldLineNo": "99",
      "newLineNo": "98"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "100",
      "newLineNo": "99"
    },
    {
      "type": "not-modified",
      "content": " avroObservation = (Record) observationConverter.resourceToAvro(testObservation);",
      "oldLineNo": "101",
      "newLineNo": "100"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "102",
      "newLineNo": "101"
    },
    {
      "type": "not-modified",
      "content": " testObservationDecoded = (Observation) observationConverter.avroToResource(avroObservation);",
      "oldLineNo": "103",
      "newLineNo": "102"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "104",
      "newLineNo": "103"
    },
    {
      "type": "modified",
      "oldContent": " avroObservationNullStatus = (Record) observationConverter",
      "newContent": " avroObservationNullStatus =",
      "oldLineNo": "105",
      "newLineNo": "104"
    },
    {
      "type": "modified",
      "oldContent": "        .resourceToAvro(testObservationNullStatus);",
      "newContent": " (Record) observationConverter.resourceToAvro(testObservationNullStatus);",
      "oldLineNo": "106",
      "newLineNo": "105"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "107",
      "newLineNo": "106"
    },
    {
      "type": "modified",
      "oldContent": " testObservationDecodedNullStatus = (Observation) observationConverter",
      "newContent": " testObservationDecodedNullStatus =",
      "oldLineNo": "108",
      "newLineNo": "107"
    },
    {
      "type": "modified",
      "oldContent": "        .avroToResource(avroObservationNullStatus);",
      "newContent": " (Observation) observationConverter.avroToResource(avroObservationNullStatus);",
      "oldLineNo": "109",
      "newLineNo": "108"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "110",
      "newLineNo": "109"
    },
    {
      "type": "modified",
      "oldContent": " AvroConverter patientConverter = AvroConverter.forResource(FhirContexts.forR4(),",
      "newContent": " AvroConverter patientConverter =",
      "oldLineNo": "111",
      "newLineNo": "110"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_PATIENT);",
      "newContent": " AvroConverter.forResource(FhirContexts.forR4(), TestData.US_CORE_PATIENT);",
      "oldLineNo": "112",
      "newLineNo": "111"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "113",
      "newLineNo": "112"
    },
    {
      "type": "not-modified",
      "content": " avroPatient = (Record) patientConverter.resourceToAvro(testPatient);",
      "oldLineNo": "114",
      "newLineNo": "113"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "115",
      "newLineNo": "114"
    },
    {
      "type": "not-modified",
      "content": " testPatientDecoded = (Patient) patientConverter.avroToResource(avroPatient);",
      "oldLineNo": "116",
      "newLineNo": "115"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "117",
      "newLineNo": "116"
    },
    {
      "type": "modified",
      "oldContent": " AvroConverter conditionConverter = AvroConverter.forResource(FhirContexts.forR4(),",
      "newContent": " AvroConverter conditionConverter =",
      "oldLineNo": "118",
      "newLineNo": "117"
    },
    {
      "type": "modified",
      "oldContent": " \"Condition\" /* TODO TestData.US_CORE_CONDITION */);",
      "newContent": " AvroConverter.forResource(",
      "oldLineNo": "119",
      "newLineNo": "118"
    },
    {
      "type": "added",
      "content": " FhirContexts.forR4(), \"Condition\" /* TODO TestData.US_CORE_CONDITION */);",
      "lineNo": "119"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "120",
      "newLineNo": "120"
    },
    {
      "type": "not-modified",
      "content": " avroCondition = (Record) conditionConverter.resourceToAvro(testCondition);",
      "oldLineNo": "121",
      "newLineNo": "121"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "122",
      "newLineNo": "122"
    },
    {
      "type": "not-modified",
      "content": " testConditionDecoded = (Condition) conditionConverter.avroToResource(avroCondition);",
      "oldLineNo": "123",
      "newLineNo": "123"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "124",
      "newLineNo": "124"
    },
    {
      "type": "modified",
      "oldContent": " AvroConverter medicationConverter = AvroConverter.forResource(FhirContexts.forR4(),",
      "newContent": " AvroConverter medicationConverter =",
      "oldLineNo": "125",
      "newLineNo": "125"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_MEDICATION);",
      "newContent": " AvroConverter.forResource(FhirContexts.forR4(), TestData.US_CORE_MEDICATION);",
      "oldLineNo": "126",
      "newLineNo": "126"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "127",
      "newLineNo": "127"
    },
    {
      "type": "not-modified",
      "content": " Record avroMedication = (Record) medicationConverter.resourceToAvro(testMedicationOne);",
      "oldLineNo": "128",
      "newLineNo": "128"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "129",
      "newLineNo": "129"
    },
    {
      "type": "not-modified",
      "content": " testMedicationDecoded = (Medication) medicationConverter.avroToResource(avroMedication);",
      "oldLineNo": "130",
      "newLineNo": "130"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "131",
      "newLineNo": "131"
    },
    {
      "type": "modified",
      "oldContent": " AvroConverter medicationRequestConverter = AvroConverter.forResource(FhirContexts.forR4(),",
      "newContent": " AvroConverter medicationRequestConverter =",
      "oldLineNo": "132",
      "newLineNo": "132"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_MEDICATION_REQUEST,",
      "newContent": " AvroConverter.forResource(",
      "oldLineNo": "133",
      "newLineNo": "133"
    },
    {
      "type": "modified",
      "oldContent": " Arrays.asList(TestData.US_CORE_MEDICATION, TestData.PROVENANCE));",
      "newContent": " FhirContexts.forR4(),",
      "oldLineNo": "134",
      "newLineNo": "134"
    },
    {
      "type": "added",
      "content": " TestData.US_CORE_MEDICATION_REQUEST,",
      "lineNo": "135"
    },
    {
      "type": "added",
      "content": " Arrays.asList(TestData.US_CORE_MEDICATION, TestData.PROVENANCE));",
      "lineNo": "136"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "135",
      "newLineNo": "137"
    },
    {
      "type": "modified",
      "oldContent": " avroMedicationRequest = (Record) medicationRequestConverter",
      "newContent": " avroMedicationRequest =",
      "oldLineNo": "136",
      "newLineNo": "138"
    },
    {
      "type": "modified",
      "oldContent": "        .resourceToAvro(testMedicationRequest);",
      "newContent": " (Record) medicationRequestConverter.resourceToAvro(testMedicationRequest);",
      "oldLineNo": "137",
      "newLineNo": "139"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "138",
      "newLineNo": "140"
    },
    {
      "type": "modified",
      "oldContent": " testMedicationRequestDecoded = (MedicationRequest) medicationRequestConverter",
      "newContent": " testMedicationRequestDecoded =",
      "oldLineNo": "139",
      "newLineNo": "141"
    },
    {
      "type": "modified",
      "oldContent": "        .avroToResource(avroMedicationRequest);",
      "newContent": " (MedicationRequest) medicationRequestConverter.avroToResource(avroMedicationRequest);",
      "oldLineNo": "140",
      "newLineNo": "142"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "141",
      "newLineNo": "143"
    },
    {
      "type": "not-modified",
      "content": " // TODO add test profile for R4: https://github.com/google/fhir-data-pipes/issues/558",
      "oldLineNo": "142",
      "newLineNo": "144"
    },
    {
      "type": "not-modified",
      "content": " // AvroConverter converterBunsenTestProfilePatient = AvroConverter",
      "oldLineNo": "143",
      "newLineNo": "145"
    },
    {
      "type": "not-modified",
      "content": " BigDecimal originalDecimal = ((Quantity) testObservation.getValue()).getValue();",
      "oldLineNo": "156",
      "newLineNo": "158"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "157",
      "newLineNo": "159"
    },
    {
      "type": "not-modified",
      "content": " // Decode the Avro decimal to ensure the expected value is there.",
      "oldLineNo": "158",
      "newLineNo": "160"
    },
    {
      "type": "modified",
      "oldContent": " BigDecimal avroDecimal  = (BigDecimal) ((Record)",
      "newContent": " BigDecimal avroDecimal =",
      "oldLineNo": "159",
      "newLineNo": "161"
    },
    {
      "type": "modified",
      "oldContent": "        ((Record) avroObservation.get(\"value\"))",
      "newContent": "        (BigDecimal)",
      "oldLineNo": "160",
      "newLineNo": "162"
    },
    {
      "type": "modified",
      "oldContent": "        .get(\"quantity\"))",
      "newContent": "            ((Record) ((Record) avroObservation.get(\"value\")).get(\"quantity\")).get(\"value\");",
      "oldLineNo": "161",
      "newLineNo": "163"
    },
    {
      "type": "deleted",
      "content": "        .get(\"value\");",
      "lineNo": "162"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "163",
      "newLineNo": "164"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(originalDecimal.compareTo(avroDecimal), 0);",
      "oldLineNo": "164",
      "newLineNo": "165"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "165",
      "newLineNo": "166"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(originalDecimal.compareTo(",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "166",
      "newLineNo": "167"
    },
    {
      "type": "modified",
      "oldContent": "        ((Quantity) testObservationDecoded",
      "newContent": " originalDecimal.compareTo(((Quantity) testObservationDecoded.getValue()).getValue()), 0);",
      "oldLineNo": "167",
      "newLineNo": "168"
    },
    {
      "type": "deleted",
      "content": "            .getValue())",
      "lineNo": "168"
    },
    {
      "type": "deleted",
      "content": "            .getValue()), 0);",
      "lineNo": "169"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "170",
      "newLineNo": "169"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "171",
      "newLineNo": "170"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "172",
      "newLineNo": "171"
    },
    {
      "type": "not-modified",
      "content": " public void testPrimitiveMultiplicity() {",
      "oldLineNo": "173",
      "newLineNo": "172"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "174",
      "newLineNo": "173"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(testPatient.getName().get(0).getFamily()",
      "newContent": " Assert.assertTrue(",
      "oldLineNo": "175",
      "newLineNo": "174"
    },
    {
      "type": "modified",
      "oldContent": "        .equalsIgnoreCase(testPatientDecoded.getName().get(0).getFamily()));",
      "newContent": " testPatient",
      "oldLineNo": "176",
      "newLineNo": "175"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(testPatient.getName().get(0).getGiven().get(0).getValueAsString()",
      "newContent": "            .getName()",
      "oldLineNo": "177",
      "newLineNo": "176"
    },
    {
      "type": "modified",
      "oldContent": "        .equals(testPatientDecoded.getName().get(0).getGiven().get(0).getValueAsString()));",
      "newContent": "            .get(0)",
      "oldLineNo": "178",
      "newLineNo": "177"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(testPatient.getName().get(0).getGiven().get(1).getValueAsString()",
      "newContent": "            .getFamily()",
      "oldLineNo": "179",
      "newLineNo": "178"
    },
    {
      "type": "modified",
      "oldContent": "        .equals(testPatientDecoded.getName().get(0).getGiven().get(1).getValueAsString()));",
      "newContent": "            .equalsIgnoreCase(testPatientDecoded.getName().get(0).getFamily()));",
      "oldLineNo": "180",
      "newLineNo": "179"
    },
    {
      "type": "added",
      "content": " Assert.assertTrue(",
      "lineNo": "180"
    },
    {
      "type": "added",
      "content": " testPatient",
      "lineNo": "181"
    },
    {
      "type": "added",
      "content": "            .getName()",
      "lineNo": "182"
    },
    {
      "type": "added",
      "content": "            .get(0)",
      "lineNo": "183"
    },
    {
      "type": "added",
      "content": "            .getGiven()",
      "lineNo": "184"
    },
    {
      "type": "added",
      "content": "            .get(0)",
      "lineNo": "185"
    },
    {
      "type": "added",
      "content": "            .getValueAsString()",
      "lineNo": "186"
    },
    {
      "type": "added",
      "content": "            .equals(testPatientDecoded.getName().get(0).getGiven().get(0).getValueAsString()));",
      "lineNo": "187"
    },
    {
      "type": "added",
      "content": " Assert.assertTrue(",
      "lineNo": "188"
    },
    {
      "type": "added",
      "content": " testPatient",
      "lineNo": "189"
    },
    {
      "type": "added",
      "content": "            .getName()",
      "lineNo": "190"
    },
    {
      "type": "added",
      "content": "            .get(0)",
      "lineNo": "191"
    },
    {
      "type": "added",
      "content": "            .getGiven()",
      "lineNo": "192"
    },
    {
      "type": "added",
      "content": "            .get(1)",
      "lineNo": "193"
    },
    {
      "type": "added",
      "content": "            .getValueAsString()",
      "lineNo": "194"
    },
    {
      "type": "added",
      "content": "            .equals(testPatientDecoded.getName().get(0).getGiven().get(1).getValueAsString()));",
      "lineNo": "195"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "181",
      "newLineNo": "196"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "182",
      "newLineNo": "197"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "183",
      "newLineNo": "198"
    },
    {
      "type": "not-modified",
      "content": " public void testChoice() throws FHIRException {",
      "oldLineNo": "184",
      "newLineNo": "199"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "185",
      "newLineNo": "200"
    },
    {
      "type": "not-modified",
      "content": " // Ensure that a decoded choice type matches the original",
      "oldLineNo": "186",
      "newLineNo": "201"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(testPatient.getMultipleBirth()",
      "newContent": " Assert.assertTrue(",
      "oldLineNo": "187",
      "newLineNo": "202"
    },
    {
      "type": "modified",
      "oldContent": "        .equalsDeep(testPatientDecoded.getMultipleBirth()));",
      "newContent": " testPatient.getMultipleBirth().equalsDeep(testPatientDecoded.getMultipleBirth()));",
      "oldLineNo": "188",
      "newLineNo": "203"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "189",
      "newLineNo": "204"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "190",
      "newLineNo": "205"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "191",
      "newLineNo": "206"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "205",
      "newLineNo": "220"
    },
    {
      "type": "not-modified",
      "content": " public void testIdenticalChoicesTypes() {",
      "oldLineNo": "206",
      "newLineNo": "221"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "207",
      "newLineNo": "222"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(testMedicationOne.getIngredientFirstRep()",
      "newContent": " Assert.assertTrue(",
      "oldLineNo": "208",
      "newLineNo": "223"
    },
    {
      "type": "modified",
      "oldContent": "        .equalsDeep(testMedicationDecoded.getIngredientFirstRep()));",
      "newContent": " testMedicationOne",
      "oldLineNo": "209",
      "newLineNo": "224"
    },
    {
      "type": "added",
      "content": "            .getIngredientFirstRep()",
      "lineNo": "225"
    },
    {
      "type": "added",
      "content": "            .equalsDeep(testMedicationDecoded.getIngredientFirstRep()));",
      "lineNo": "226"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "210",
      "newLineNo": "227"
    },
    {
      "type": "not-modified",
      "content": " // TODO",
      "oldLineNo": "211",
      "newLineNo": "228"
    },
    {
      "type": "not-modified",
      "content": " // Assert.assertTrue(testMedicationOne.getPackage().getContentFirstRep()",
      "oldLineNo": "212",
      "newLineNo": "229"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "219",
      "newLineNo": "236"
    },
    {
      "type": "not-modified",
      "content": " Integer expectedMultipleBirth = ((IntegerType) testPatient.getMultipleBirth()).getValue();",
      "oldLineNo": "220",
      "newLineNo": "237"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "221",
      "newLineNo": "238"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(expectedMultipleBirth,",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "222",
      "newLineNo": "239"
    },
    {
      "type": "modified",
      "oldContent": "        ((IntegerType) testPatientDecoded.getMultipleBirth()).getValue());",
      "newContent": " expectedMultipleBirth, ((IntegerType) testPatientDecoded.getMultipleBirth()).getValue());",
      "oldLineNo": "223",
      "newLineNo": "240"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "224",
      "newLineNo": "241"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(expectedMultipleBirth,",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "225",
      "newLineNo": "242"
    },
    {
      "type": "modified",
      "oldContent": "        ((Record) avroPatient.get(\"multipleBirth\")).get(\"integer\"));",
      "newContent": " expectedMultipleBirth, ((Record) avroPatient.get(\"multipleBirth\")).get(\"integer\"));",
      "oldLineNo": "226",
      "newLineNo": "243"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "227",
      "newLineNo": "244"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "228",
      "newLineNo": "245"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "229",
      "newLineNo": "246"
    },
    {
      "type": "not-modified",
      "content": " public void testBoundCode() {",
      "oldLineNo": "230",
      "newLineNo": "247"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "231",
      "newLineNo": "248"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testObservation.getStatus().toCode(),",
      "newContent": " Assert.assertEquals(testObservation.getStatus().toCode(), avroObservation.get(\"status\"));",
      "oldLineNo": "232",
      "newLineNo": "249"
    },
    {
      "type": "deleted",
      "content": " avroObservation.get(\"status\"));",
      "lineNo": "233"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "234",
      "newLineNo": "250"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testObservation.getStatus(),",
      "newContent": " Assert.assertEquals(testObservation.getStatus(), testObservationDecoded.getStatus());",
      "oldLineNo": "235",
      "newLineNo": "251"
    },
    {
      "type": "deleted",
      "content": " testObservationDecoded.getStatus());",
      "lineNo": "236"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "237",
      "newLineNo": "252"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "238",
      "newLineNo": "253"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "239",
      "newLineNo": "254"
    },
    {
      "type": "not-modified",
      "content": " Coding testCoding = testCondition.getSeverity().getCodingFirstRep();",
      "oldLineNo": "250",
      "newLineNo": "265"
    },
    {
      "type": "not-modified",
      "content": " Coding decodedCoding = testConditionDecoded.getSeverity().getCodingFirstRep();",
      "oldLineNo": "251",
      "newLineNo": "266"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "252",
      "newLineNo": "267"
    },
    {
      "type": "modified",
      "oldContent": " List<Record> severityCodings = (List) ((Record)  avroCondition.get(\"severity\")).get(\"coding\");",
      "newContent": " List<Record> severityCodings = (List) ((Record) avroCondition.get(\"severity\")).get(\"coding\");",
      "oldLineNo": "253",
      "newLineNo": "268"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "254",
      "newLineNo": "269"
    },
    {
      "type": "not-modified",
      "content": " Record severityCoding = severityCodings.get(0);",
      "oldLineNo": "255",
      "newLineNo": "270"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "256",
      "newLineNo": "271"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCoding.getCode(),",
      "newContent": " Assert.assertEquals(testCoding.getCode(), severityCoding.get(\"code\"));",
      "oldLineNo": "257",
      "newLineNo": "272"
    },
    {
      "type": "modified",
      "oldContent": " severityCoding.get(\"code\"));",
      "newContent": " Assert.assertEquals(testCoding.getCode(), decodedCoding.getCode());",
      "oldLineNo": "258",
      "newLineNo": "273"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCoding.getCode(),",
      "newContent": "",
      "oldLineNo": "259",
      "newLineNo": "274"
    },
    {
      "type": "modified",
      "oldContent": " decodedCoding.getCode());",
      "newContent": " Assert.assertEquals(testCoding.getSystem(), severityCoding.get(\"system\"));",
      "oldLineNo": "260",
      "newLineNo": "275"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " Assert.assertEquals(testCoding.getSystem(), decodedCoding.getSystem());",
      "oldLineNo": "261",
      "newLineNo": "276"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCoding.getSystem(),",
      "newContent": "",
      "oldLineNo": "262",
      "newLineNo": "277"
    },
    {
      "type": "modified",
      "oldContent": " severityCoding.get(\"system\"));",
      "newContent": " Assert.assertEquals(testCoding.getUserSelected(), severityCoding.get(\"userSelected\"));",
      "oldLineNo": "263",
      "newLineNo": "278"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCoding.getSystem(),",
      "newContent": " Assert.assertEquals(testCoding.getUserSelected(), decodedCoding.getUserSelected());",
      "oldLineNo": "264",
      "newLineNo": "279"
    },
    {
      "type": "modified",
      "oldContent": " decodedCoding.getSystem());",
      "newContent": "",
      "oldLineNo": "265",
      "newLineNo": "280"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " Assert.assertEquals(testCoding.getDisplay(), severityCoding.get(\"display\"));",
      "oldLineNo": "266",
      "newLineNo": "281"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCoding.getUserSelected(),",
      "newContent": " Assert.assertEquals(testCoding.getDisplay(), decodedCoding.getDisplay());",
      "oldLineNo": "267",
      "newLineNo": "282"
    },
    {
      "type": "deleted",
      "content": " severityCoding.get(\"userSelected\"));",
      "lineNo": "268"
    },
    {
      "type": "deleted",
      "content": " Assert.assertEquals(testCoding.getUserSelected(),",
      "lineNo": "269"
    },
    {
      "type": "deleted",
      "content": " decodedCoding.getUserSelected());",
      "lineNo": "270"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "271"
    },
    {
      "type": "deleted",
      "content": " Assert.assertEquals(testCoding.getDisplay(),",
      "lineNo": "272"
    },
    {
      "type": "deleted",
      "content": " severityCoding.get(\"display\"));",
      "lineNo": "273"
    },
    {
      "type": "deleted",
      "content": " Assert.assertEquals(testCoding.getDisplay(),",
      "lineNo": "274"
    },
    {
      "type": "deleted",
      "content": " decodedCoding.getDisplay());",
      "lineNo": "275"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "276",
      "newLineNo": "283"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "277",
      "newLineNo": "284"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "278",
      "newLineNo": "285"
    },
    {
      "type": "not-modified",
      "content": " public void testSingleReference() {",
      "oldLineNo": "279",
      "newLineNo": "286"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "280",
      "newLineNo": "287"
    },
    {
      "type": "not-modified",
      "content": " Record subject = (Record) avroCondition.get(\"subject\");",
      "oldLineNo": "281",
      "newLineNo": "288"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "282",
      "newLineNo": "289"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCondition.getSubject().getReference(),",
      "newContent": " Assert.assertEquals(testCondition.getSubject().getReference(), subject.get(\"reference\"));",
      "oldLineNo": "283",
      "newLineNo": "290"
    },
    {
      "type": "deleted",
      "content": " subject.get(\"reference\"));",
      "lineNo": "284"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "285",
      "newLineNo": "291"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(\"12345\",  subject.get(\"patientId\"));",
      "newContent": " Assert.assertEquals(\"12345\", subject.get(\"patientId\"));",
      "oldLineNo": "286",
      "newLineNo": "292"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "287",
      "newLineNo": "293"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCondition.getSubject().getReference(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "288",
      "newLineNo": "294"
    },
    {
      "type": "added",
      "content": " testCondition.getSubject().getReference(),",
      "lineNo": "295"
    },
    {
      "type": "not-modified",
      "content": " testConditionDecoded.getSubject().getReference());",
      "oldLineNo": "289",
      "newLineNo": "296"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "290",
      "newLineNo": "297"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "291",
      "newLineNo": "298"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertNull(organizationId);",
      "oldLineNo": "310",
      "newLineNo": "317"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "311",
      "newLineNo": "318"
    },
    {
      "type": "not-modified",
      "content": " // The field with the expected prefix should match the original data.",
      "oldLineNo": "312",
      "newLineNo": "319"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testPatient.getGeneralPractitionerFirstRep().getReference(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "313",
      "newLineNo": "320"
    },
    {
      "type": "added",
      "content": " testPatient.getGeneralPractitionerFirstRep().getReference(),",
      "lineNo": "321"
    },
    {
      "type": "not-modified",
      "content": " \"Practitioner/\" + practitionerId);",
      "oldLineNo": "314",
      "newLineNo": "322"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "315",
      "newLineNo": "323"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCondition.getSubject().getReference(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "316",
      "newLineNo": "324"
    },
    {
      "type": "added",
      "content": " testCondition.getSubject().getReference(),",
      "lineNo": "325"
    },
    {
      "type": "not-modified",
      "content": " testConditionDecoded.getSubject().getReference());",
      "oldLineNo": "317",
      "newLineNo": "326"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "318",
      "newLineNo": "327"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "319",
      "newLineNo": "328"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "320",
      "newLineNo": "329"
    },
    {
      "type": "not-modified",
      "content": " public void testSimpleExtension() {",
      "oldLineNo": "321",
      "newLineNo": "330"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "322",
      "newLineNo": "331"
    },
    {
      "type": "modified",
      "oldContent": " String testBirthSex = testPatient",
      "newContent": " String testBirthSex =",
      "oldLineNo": "323",
      "newLineNo": "332"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.US_CORE_BIRTHSEX)",
      "newContent": " testPatient",
      "oldLineNo": "324",
      "newLineNo": "333"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": "            .getExtensionsByUrl(TestData.US_CORE_BIRTHSEX)",
      "oldLineNo": "325",
      "newLineNo": "334"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsPrimitive()",
      "newContent": "            .get(0)",
      "oldLineNo": "326",
      "newLineNo": "335"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsString();",
      "newContent": "            .getValueAsPrimitive()",
      "oldLineNo": "327",
      "newLineNo": "336"
    },
    {
      "type": "added",
      "content": "            .getValueAsString();",
      "lineNo": "337"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "328",
      "newLineNo": "338"
    },
    {
      "type": "modified",
      "oldContent": " String decodedBirthSex = testPatientDecoded",
      "newContent": " String decodedBirthSex =",
      "oldLineNo": "329",
      "newLineNo": "339"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.US_CORE_BIRTHSEX)",
      "newContent": " testPatientDecoded",
      "oldLineNo": "330",
      "newLineNo": "340"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": "            .getExtensionsByUrl(TestData.US_CORE_BIRTHSEX)",
      "oldLineNo": "331",
      "newLineNo": "341"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsPrimitive()",
      "newContent": "            .get(0)",
      "oldLineNo": "332",
      "newLineNo": "342"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsString();",
      "newContent": "            .getValueAsPrimitive()",
      "oldLineNo": "333",
      "newLineNo": "343"
    },
    {
      "type": "added",
      "content": "            .getValueAsString();",
      "lineNo": "344"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "334",
      "newLineNo": "345"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testBirthSex, decodedBirthSex);",
      "oldLineNo": "335",
      "newLineNo": "346"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "336",
      "newLineNo": "347"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testBirthSex,",
      "newContent": " Assert.assertEquals(testBirthSex, ((Record) avroPatient).get(\"birthsex\"));",
      "oldLineNo": "337",
      "newLineNo": "348"
    },
    {
      "type": "deleted",
      "content": "        ((Record) avroPatient).get(\"birthsex\"));",
      "lineNo": "338"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "339",
      "newLineNo": "349"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "340",
      "newLineNo": "350"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "341",
      "newLineNo": "351"
    },
    {
      "type": "not-modified",
      "content": " public void testNestedExtension() {",
      "oldLineNo": "342",
      "newLineNo": "352"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "343",
      "newLineNo": "353"
    },
    {
      "type": "modified",
      "oldContent": " Extension testEthnicity = testPatient",
      "newContent": " Extension testEthnicity = testPatient.getExtensionsByUrl(TestData.US_CORE_ETHNICITY).get(0);",
      "oldLineNo": "344",
      "newLineNo": "354"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.US_CORE_ETHNICITY)",
      "newContent": "",
      "oldLineNo": "345",
      "newLineNo": "355"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0);",
      "newContent": " Coding testOmbCategory =",
      "oldLineNo": "346",
      "newLineNo": "356"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "        (Coding) testEthnicity.getExtensionsByUrl(\"ombCategory\").get(0).getValue();",
      "oldLineNo": "347",
      "newLineNo": "357"
    },
    {
      "type": "modified",
      "oldContent": " Coding testOmbCategory = (Coding) testEthnicity",
      "newContent": "",
      "oldLineNo": "348",
      "newLineNo": "358"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(\"ombCategory\")",
      "newContent": " Coding testDetailed1 = (Coding) testEthnicity.getExtensionsByUrl(\"detailed\").get(0).getValue();",
      "oldLineNo": "349",
      "newLineNo": "359"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": "",
      "oldLineNo": "350",
      "newLineNo": "360"
    },
    {
      "type": "modified",
      "oldContent": "        .getValue();",
      "newContent": " Coding testDetailed2 = (Coding) testEthnicity.getExtensionsByUrl(\"detailed\").get(1).getValue();",
      "oldLineNo": "351",
      "newLineNo": "361"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "",
      "oldLineNo": "352",
      "newLineNo": "362"
    },
    {
      "type": "modified",
      "oldContent": " Coding testDetailed1 = (Coding) testEthnicity",
      "newContent": " String testText =",
      "oldLineNo": "353",
      "newLineNo": "363"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(\"detailed\")",
      "newContent": " testEthnicity.getExtensionsByUrl(\"text\").get(0).getValueAsPrimitive().getValueAsString();",
      "oldLineNo": "354",
      "newLineNo": "364"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": "",
      "oldLineNo": "355",
      "newLineNo": "365"
    },
    {
      "type": "modified",
      "oldContent": "        .getValue();",
      "newContent": " Extension decodedEthnicity =",
      "oldLineNo": "356",
      "newLineNo": "366"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " testPatientDecoded.getExtensionsByUrl(TestData.US_CORE_ETHNICITY).get(0);",
      "oldLineNo": "357",
      "newLineNo": "367"
    },
    {
      "type": "modified",
      "oldContent": " Coding testDetailed2 = (Coding) testEthnicity",
      "newContent": "",
      "oldLineNo": "358",
      "newLineNo": "368"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(\"detailed\")",
      "newContent": " Coding decodedOmbCategory =",
      "oldLineNo": "359",
      "newLineNo": "369"
    },
    {
      "type": "modified",
      "oldContent": "        .get(1)",
      "newContent": "        (Coding) decodedEthnicity.getExtensionsByUrl(\"ombCategory\").get(0).getValue();",
      "oldLineNo": "360",
      "newLineNo": "370"
    },
    {
      "type": "modified",
      "oldContent": "        .getValue();",
      "newContent": "",
      "oldLineNo": "361",
      "newLineNo": "371"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " Coding decodedDetailed1 =",
      "oldLineNo": "362",
      "newLineNo": "372"
    },
    {
      "type": "modified",
      "oldContent": " String testText = testEthnicity",
      "newContent": "        (Coding) decodedEthnicity.getExtensionsByUrl(\"detailed\").get(0).getValue();",
      "oldLineNo": "363",
      "newLineNo": "373"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(\"text\")",
      "newContent": "",
      "oldLineNo": "364",
      "newLineNo": "374"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": " Coding decodedDetailed2 =",
      "oldLineNo": "365",
      "newLineNo": "375"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsPrimitive()",
      "newContent": "        (Coding) decodedEthnicity.getExtensionsByUrl(\"detailed\").get(1).getValue();",
      "oldLineNo": "366",
      "newLineNo": "376"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsString();",
      "newContent": "",
      "oldLineNo": "367",
      "newLineNo": "377"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " String decodedText =",
      "oldLineNo": "368",
      "newLineNo": "378"
    },
    {
      "type": "modified",
      "oldContent": " Extension decodedEthnicity = testPatientDecoded",
      "newContent": " decodedEthnicity.getExtensionsByUrl(\"text\").get(0).getValueAsPrimitive().getValueAsString();",
      "oldLineNo": "369",
      "newLineNo": "379"
    },
    {
      "type": "deleted",
      "content": "        .getExtensionsByUrl(TestData.US_CORE_ETHNICITY)",
      "lineNo": "370"
    },
    {
      "type": "deleted",
      "content": "        .get(0);",
      "lineNo": "371"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "372"
    },
    {
      "type": "deleted",
      "content": " Coding decodedOmbCategory = (Coding) decodedEthnicity",
      "lineNo": "373"
    },
    {
      "type": "deleted",
      "content": "        .getExtensionsByUrl(\"ombCategory\")",
      "lineNo": "374"
    },
    {
      "type": "deleted",
      "content": "        .get(0)",
      "lineNo": "375"
    },
    {
      "type": "deleted",
      "content": "        .getValue();",
      "lineNo": "376"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "377"
    },
    {
      "type": "deleted",
      "content": " Coding decodedDetailed1 = (Coding) decodedEthnicity",
      "lineNo": "378"
    },
    {
      "type": "deleted",
      "content": "        .getExtensionsByUrl(\"detailed\")",
      "lineNo": "379"
    },
    {
      "type": "deleted",
      "content": "        .get(0)",
      "lineNo": "380"
    },
    {
      "type": "deleted",
      "content": "        .getValue();",
      "lineNo": "381"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "382"
    },
    {
      "type": "deleted",
      "content": " Coding decodedDetailed2 = (Coding) decodedEthnicity",
      "lineNo": "383"
    },
    {
      "type": "deleted",
      "content": "        .getExtensionsByUrl(\"detailed\")",
      "lineNo": "384"
    },
    {
      "type": "deleted",
      "content": "        .get(1)",
      "lineNo": "385"
    },
    {
      "type": "deleted",
      "content": "        .getValue();",
      "lineNo": "386"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "387"
    },
    {
      "type": "deleted",
      "content": " String decodedText = decodedEthnicity",
      "lineNo": "388"
    },
    {
      "type": "deleted",
      "content": "        .getExtensionsByUrl(\"text\")",
      "lineNo": "389"
    },
    {
      "type": "deleted",
      "content": "        .get(0)",
      "lineNo": "390"
    },
    {
      "type": "deleted",
      "content": "        .getValueAsPrimitive()",
      "lineNo": "391"
    },
    {
      "type": "deleted",
      "content": "        .getValueAsString();",
      "lineNo": "392"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "393",
      "newLineNo": "380"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(testOmbCategory.equalsDeep(decodedOmbCategory));",
      "oldLineNo": "394",
      "newLineNo": "381"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(testDetailed1.equalsDeep(decodedDetailed1));",
      "oldLineNo": "395",
      "newLineNo": "382"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "398",
      "newLineNo": "385"
    },
    {
      "type": "not-modified",
      "content": " Record ethnicityRecord = (Record) avroPatient.get(\"ethnicity\");",
      "oldLineNo": "399",
      "newLineNo": "386"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "400",
      "newLineNo": "387"
    },
    {
      "type": "modified",
      "oldContent": " Record ombCategoryRecord =  (Record) ethnicityRecord.get(\"ombCategory\");",
      "newContent": " Record ombCategoryRecord = (Record) ethnicityRecord.get(\"ombCategory\");",
      "oldLineNo": "401",
      "newLineNo": "388"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "402",
      "newLineNo": "389"
    },
    {
      "type": "modified",
      "oldContent": " List<Record> detailedRecord =  (List<Record>) ethnicityRecord.get(\"detailed\");",
      "newContent": " List<Record> detailedRecord = (List<Record>) ethnicityRecord.get(\"detailed\");",
      "oldLineNo": "403",
      "newLineNo": "390"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "404",
      "newLineNo": "391"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testOmbCategory.getSystem(), ombCategoryRecord.get(\"system\"));",
      "oldLineNo": "405",
      "newLineNo": "392"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testOmbCategory.getCode(), ombCategoryRecord.get(\"code\"));",
      "oldLineNo": "406",
      "newLineNo": "393"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "422",
      "newLineNo": "409"
    },
    {
      "type": "not-modified",
      "content": " Medication testMedicationOne = (Medication) testMedicationRequest.getContained().get(0);",
      "oldLineNo": "423",
      "newLineNo": "410"
    },
    {
      "type": "not-modified",
      "content": " String testMedicationOneId = testMedicationOne.getId();",
      "oldLineNo": "424",
      "newLineNo": "411"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept testMedicationIngredientItem = testMedicationOne.getIngredientFirstRep()",
      "newContent": " CodeableConcept testMedicationIngredientItem =",
      "oldLineNo": "425",
      "newLineNo": "412"
    },
    {
      "type": "modified",
      "oldContent": "        .getItemCodeableConcept();",
      "newContent": " testMedicationOne.getIngredientFirstRep().getItemCodeableConcept();",
      "oldLineNo": "426",
      "newLineNo": "413"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "427",
      "newLineNo": "414"
    },
    {
      "type": "modified",
      "oldContent": " Medication decodedMedicationOne = (Medication) testMedicationRequestDecoded.getContained()",
      "newContent": " Medication decodedMedicationOne =",
      "oldLineNo": "428",
      "newLineNo": "415"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0);",
      "newContent": " (Medication) testMedicationRequestDecoded.getContained().get(0);",
      "oldLineNo": "429",
      "newLineNo": "416"
    },
    {
      "type": "not-modified",
      "content": " String decodedMedicationOneId = decodedMedicationOne.getId();",
      "oldLineNo": "430",
      "newLineNo": "417"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept decodedMedicationOneIngredientItem = decodedMedicationOne",
      "newContent": " CodeableConcept decodedMedicationOneIngredientItem =",
      "oldLineNo": "431",
      "newLineNo": "418"
    },
    {
      "type": "modified",
      "oldContent": "        .getIngredientFirstRep()",
      "newContent": " decodedMedicationOne.getIngredientFirstRep().getItemCodeableConcept();",
      "oldLineNo": "432",
      "newLineNo": "419"
    },
    {
      "type": "deleted",
      "content": "        .getItemCodeableConcept();",
      "lineNo": "433"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "434",
      "newLineNo": "420"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testMedicationOneId, decodedMedicationOneId);",
      "oldLineNo": "435",
      "newLineNo": "421"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(decodedMedicationOneIngredientItem.equalsDeep(",
      "newContent": " Assert.assertTrue(decodedMedicationOneIngredientItem.equalsDeep(testMedicationIngredientItem));",
      "oldLineNo": "436",
      "newLineNo": "422"
    },
    {
      "type": "deleted",
      "content": " testMedicationIngredientItem));",
      "lineNo": "437"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "438",
      "newLineNo": "423"
    },
    {
      "type": "not-modified",
      "content": " Provenance testProvenance = (Provenance) testMedicationRequest.getContained().get(1);",
      "oldLineNo": "439",
      "newLineNo": "424"
    },
    {
      "type": "not-modified",
      "content": " String testProvenanceId = testProvenance.getId();",
      "oldLineNo": "440",
      "newLineNo": "425"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "441",
      "newLineNo": "426"
    },
    {
      "type": "modified",
      "oldContent": " Provenance decodedProvenance =",
      "newContent": " Provenance decodedProvenance = (Provenance) testMedicationRequestDecoded.getContained().get(1);",
      "oldLineNo": "442",
      "newLineNo": "427"
    },
    {
      "type": "deleted",
      "content": "        (Provenance) testMedicationRequestDecoded.getContained().get(1);",
      "lineNo": "443"
    },
    {
      "type": "not-modified",
      "content": " String decodedProvenanceId = decodedProvenance.getId();",
      "oldLineNo": "444",
      "newLineNo": "428"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "445",
      "newLineNo": "429"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testProvenanceId, decodedProvenanceId);",
      "oldLineNo": "446",
      "newLineNo": "430"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "447",
      "newLineNo": "431"
    },
    {
      "type": "not-modified",
      "content": " Medication testMedicationTwo = (Medication) testMedicationRequest.getContained().get(2);",
      "oldLineNo": "448",
      "newLineNo": "432"
    },
    {
      "type": "not-modified",
      "content": " String testMedicationTwoId = testMedicationTwo.getId();",
      "oldLineNo": "449",
      "newLineNo": "433"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "450",
      "newLineNo": "434"
    },
    {
      "type": "modified",
      "oldContent": " Medication decodedMedicationTwo = (Medication) testMedicationRequestDecoded.getContained()",
      "newContent": " Medication decodedMedicationTwo =",
      "oldLineNo": "451",
      "newLineNo": "435"
    },
    {
      "type": "modified",
      "oldContent": "        .get(2);",
      "newContent": " (Medication) testMedicationRequestDecoded.getContained().get(2);",
      "oldLineNo": "452",
      "newLineNo": "436"
    },
    {
      "type": "not-modified",
      "content": " String decodedMedicationTwoId = decodedMedicationTwo.getId();",
      "oldLineNo": "453",
      "newLineNo": "437"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "454",
      "newLineNo": "438"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testMedicationTwoId, decodedMedicationTwoId);",
      "oldLineNo": "455",
      "newLineNo": "439"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "458",
      "newLineNo": "442"
    },
    {
      "type": "not-modified",
      "content": " public void testCompile() throws IOException {",
      "oldLineNo": "459",
      "newLineNo": "443"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "460",
      "newLineNo": "444"
    },
    {
      "type": "modified",
      "oldContent": " List<Schema> schemas = AvroConverter.generateSchemas(FhirContexts.forR4(),",
      "newContent": " List<Schema> schemas =",
      "oldLineNo": "461",
      "newLineNo": "445"
    },
    {
      "type": "modified",
      "oldContent": " ImmutableMap.of(TestData.US_CORE_PATIENT, Collections.emptyList(),",
      "newContent": " AvroConverter.generateSchemas(",
      "oldLineNo": "462",
      "newLineNo": "446"
    },
    {
      "type": "modified",
      "oldContent": " TestData.VALUE_SET, Collections.emptyList(),",
      "newContent": " FhirContexts.forR4(),",
      "oldLineNo": "463",
      "newLineNo": "447"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_MEDICATION_REQUEST, ImmutableList.of(TestData.US_CORE_MEDICATION)));",
      "newContent": " ImmutableMap.of(",
      "oldLineNo": "464",
      "newLineNo": "448"
    },
    {
      "type": "added",
      "content": " TestData.US_CORE_PATIENT,",
      "lineNo": "449"
    },
    {
      "type": "added",
      "content": " Collections.emptyList(),",
      "lineNo": "450"
    },
    {
      "type": "added",
      "content": " TestData.VALUE_SET,",
      "lineNo": "451"
    },
    {
      "type": "added",
      "content": " Collections.emptyList(),",
      "lineNo": "452"
    },
    {
      "type": "added",
      "content": " TestData.US_CORE_MEDICATION_REQUEST,",
      "lineNo": "453"
    },
    {
      "type": "added",
      "content": " ImmutableList.of(TestData.US_CORE_MEDICATION)));",
      "lineNo": "454"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "465",
      "newLineNo": "455"
    },
    {
      "type": "not-modified",
      "content": " // Wrap the schemas in a protocol to simplify the invocation of the compiler.",
      "oldLineNo": "466",
      "newLineNo": "456"
    },
    {
      "type": "modified",
      "oldContent": " Protocol protocol = new Protocol(\"fhir-test\",",
      "newContent": " Protocol protocol = new Protocol(\"fhir-test\", \"FHIR Resources for Testing\", null);",
      "oldLineNo": "467",
      "newLineNo": "457"
    },
    {
      "type": "deleted",
      "content": " \"FHIR Resources for Testing\",",
      "lineNo": "468"
    },
    {
      "type": "deleted",
      "content": " null);",
      "lineNo": "469"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "470",
      "newLineNo": "458"
    },
    {
      "type": "not-modified",
      "content": " protocol.setTypes(schemas);",
      "oldLineNo": "471",
      "newLineNo": "459"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "472",
      "newLineNo": "460"
    },
    {
      "type": "not-modified",
      "content": " compiler.compileToDestination(null, generatedCodePath.toFile());",
      "oldLineNo": "479",
      "newLineNo": "467"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "480",
      "newLineNo": "468"
    },
    {
      "type": "not-modified",
      "content": " // Check that java files were created as expected.",
      "oldLineNo": "481",
      "newLineNo": "469"
    },
    {
      "type": "modified",
      "oldContent": " Set<String> javaFiles = Files.find(generatedCodePath,",
      "newContent": " Set<String> javaFiles =",
      "oldLineNo": "482",
      "newLineNo": "470"
    },
    {
      "type": "modified",
      "oldContent": " 10,",
      "newContent": " Files.find(generatedCodePath, 10, (path, basicFileAttributes) -> true)",
      "oldLineNo": "483",
      "newLineNo": "471"
    },
    {
      "type": "modified",
      "oldContent": "        (path, basicFileAttributes) -> true)",
      "newContent": "            .map(path -> generatedCodePath.relativize(path))",
      "oldLineNo": "484",
      "newLineNo": "472"
    },
    {
      "type": "modified",
      "oldContent": "        .map(path -> generatedCodePath.relativize(path))",
      "newContent": "            .map(Object::toString)",
      "oldLineNo": "485",
      "newLineNo": "473"
    },
    {
      "type": "modified",
      "oldContent": "        .map(Object::toString)",
      "newContent": "            .collect(Collectors.toSet());",
      "oldLineNo": "486",
      "newLineNo": "474"
    },
    {
      "type": "deleted",
      "content": "        .collect(Collectors.toSet());",
      "lineNo": "487"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "488",
      "newLineNo": "475"
    },
    {
      "type": "not-modified",
      "content": " // Ensure common types were generated",
      "oldLineNo": "489",
      "newLineNo": "476"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(javaFiles.contains(\"com/cerner/bunsen/r4/avro/Period.java\"));",
      "oldLineNo": "490",
      "newLineNo": "477"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(javaFiles.contains(\"com/cerner/bunsen/r4/avro/ChoiceBooleanInteger.java\"));",
      "oldLineNo": "501",
      "newLineNo": "488"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "502",
      "newLineNo": "489"
    },
    {
      "type": "not-modified",
      "content": " // Contained types created.",
      "oldLineNo": "503",
      "newLineNo": "490"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(javaFiles.contains(",
      "newContent": " Assert.assertTrue(",
      "oldLineNo": "504",
      "newLineNo": "491"
    },
    {
      "type": "modified",
      "oldContent": " \"com/cerner/bunsen/r4/avro/us/core/MedicationRequestContained.java\"));",
      "newContent": " javaFiles.contains(\"com/cerner/bunsen/r4/avro/us/core/MedicationRequestContained.java\"));",
      "oldLineNo": "505",
      "newLineNo": "492"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "506",
      "newLineNo": "493"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "507",
      "newLineNo": "494"
    },
    {
      "type": "not-modified",
      "content": " // TODO add test profile for R4: https://github.com/google/fhir-data-pipes/issues/558",
      "oldLineNo": "508",
      "newLineNo": "495"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "741",
      "newLineNo": "728"
    },
    {
      "type": "not-modified",
      "content": " public void testMetaElement() {",
      "oldLineNo": "742",
      "newLineNo": "729"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "743",
      "newLineNo": "730"
    },
    {
      "type": "modified",
      "oldContent": " String id =  testPatient.getId();",
      "newContent": " String id = testPatient.getId();",
      "oldLineNo": "744",
      "newLineNo": "731"
    },
    {
      "type": "not-modified",
      "content": " Meta meta = testPatient.getMeta();",
      "oldLineNo": "745",
      "newLineNo": "732"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "746",
      "newLineNo": "733"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(id, testPatientDecoded.getId());",
      "oldLineNo": "747",
      "newLineNo": "734"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "748",
      "newLineNo": "735"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(meta.getTag().size(), testPatientDecoded.getMeta().getTag().size());",
      "oldLineNo": "749",
      "newLineNo": "736"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(meta.getTag().get(0).getCode(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "750",
      "newLineNo": "737"
    },
    {
      "type": "modified",
      "oldContent": " testPatientDecoded.getMeta().getTag().get(0).getCode());",
      "newContent": " meta.getTag().get(0).getCode(), testPatientDecoded.getMeta().getTag().get(0).getCode());",
      "oldLineNo": "751",
      "newLineNo": "738"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(meta.getTag().get(0).getSystem(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "752",
      "newLineNo": "739"
    },
    {
      "type": "modified",
      "oldContent": " testPatientDecoded.getMeta().getTag().get(0).getSystem());",
      "newContent": " meta.getTag().get(0).getSystem(), testPatientDecoded.getMeta().getTag().get(0).getSystem());",
      "oldLineNo": "753",
      "newLineNo": "740"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "754",
      "newLineNo": "741"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "755",
      "newLineNo": "742"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "43",
      "newLineNo": "43"
    },
    {
      "type": "not-modified",
      "content": " private static Observation testObservationDecoded;",
      "oldLineNo": "44",
      "newLineNo": "44"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "45",
      "newLineNo": "45"
    },
    {
      "type": "modified",
      "oldContent": " private static final Observation testObservationNullStatus = TestData.newObservation()",
      "newContent": " private static final Observation testObservationNullStatus =",
      "oldLineNo": "46",
      "newLineNo": "46"
    },
    {
      "type": "modified",
      "oldContent": "      .setStatus(Observation.ObservationStatus.NULL);",
      "newContent": " TestData.newObservation().setStatus(Observation.ObservationStatus.NULL);",
      "oldLineNo": "47",
      "newLineNo": "47"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "48",
      "newLineNo": "48"
    },
    {
      "type": "not-modified",
      "content": " private static Record avroObservationNullStatus;",
      "oldLineNo": "49",
      "newLineNo": "49"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "50",
      "newLineNo": "50"
    },
    {
      "type": "not-modified",
      "content": " private static final Provenance testProvenance = TestData.newProvenance();",
      "oldLineNo": "71",
      "newLineNo": "71"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "72",
      "newLineNo": "72"
    },
    {
      "type": "not-modified",
      "content": " private static final MedicationRequest testMedicationRequest =",
      "oldLineNo": "73",
      "newLineNo": "73"
    },
    {
      "type": "modified",
      "oldContent": "      (MedicationRequest) TestData.newMedicationRequest()",
      "newContent": "      (MedicationRequest)",
      "oldLineNo": "74",
      "newLineNo": "74"
    },
    {
      "type": "modified",
      "oldContent": "          .addContained(testMedicationOne)",
      "newContent": " TestData.newMedicationRequest()",
      "oldLineNo": "75",
      "newLineNo": "75"
    },
    {
      "type": "modified",
      "oldContent": "          .addContained(testProvenance)",
      "newContent": "              .addContained(testMedicationOne)",
      "oldLineNo": "76",
      "newLineNo": "76"
    },
    {
      "type": "modified",
      "oldContent": "          .addContained(testMedicationTwo);",
      "newContent": "              .addContained(testProvenance)",
      "oldLineNo": "77",
      "newLineNo": "77"
    },
    {
      "type": "added",
      "content": "              .addContained(testMedicationTwo);",
      "lineNo": "78"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "78",
      "newLineNo": "79"
    },
    {
      "type": "not-modified",
      "content": " private static Record avroMedicationRequest;",
      "oldLineNo": "79",
      "newLineNo": "80"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "80",
      "newLineNo": "81"
    },
    {
      "type": "not-modified",
      "content": " private static MedicationRequest testMedicationRequestDecoded;",
      "oldLineNo": "81",
      "newLineNo": "82"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "82",
      "newLineNo": "83"
    },
    {
      "type": "modified",
      "oldContent": " private static final Patient testBunsenTestProfilePatient = TestData",
      "newContent": " private static final Patient testBunsenTestProfilePatient =",
      "oldLineNo": "83",
      "newLineNo": "84"
    },
    {
      "type": "modified",
      "oldContent": "      .newBunsenTestProfilePatient();",
      "newContent": " TestData.newBunsenTestProfilePatient();",
      "oldLineNo": "84",
      "newLineNo": "85"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "85",
      "newLineNo": "86"
    },
    {
      "type": "not-modified",
      "content": " private static Record avroBunsenTestProfilePatient;",
      "oldLineNo": "86",
      "newLineNo": "87"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "87",
      "newLineNo": "88"
    },
    {
      "type": "not-modified",
      "content": " private static Patient testBunsenTestProfilePatientDecoded;",
      "oldLineNo": "88",
      "newLineNo": "89"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "89",
      "newLineNo": "90"
    },
    {
      "type": "modified",
      "oldContent": " /**",
      "newContent": " /** Initialize test data. */",
      "oldLineNo": "90",
      "newLineNo": "91"
    },
    {
      "type": "deleted",
      "content": "   * Initialize test data.",
      "lineNo": "91"
    },
    {
      "type": "deleted",
      "content": "   */",
      "lineNo": "92"
    },
    {
      "type": "not-modified",
      "content": " @BeforeClass",
      "oldLineNo": "93",
      "newLineNo": "92"
    },
    {
      "type": "not-modified",
      "content": " public static void convertTestData() throws IOException {",
      "oldLineNo": "94",
      "newLineNo": "93"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "95",
      "newLineNo": "94"
    },
    {
      "type": "modified",
      "oldContent": " AvroConverter observationConverter = AvroConverter.forResource(FhirContexts.forStu3(),",
      "newContent": " AvroConverter observationConverter =",
      "oldLineNo": "96",
      "newLineNo": "95"
    },
    {
      "type": "modified",
      "oldContent": " \"Observation\");",
      "newContent": " AvroConverter.forResource(FhirContexts.forStu3(), \"Observation\");",
      "oldLineNo": "97",
      "newLineNo": "96"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "98",
      "newLineNo": "97"
    },
    {
      "type": "not-modified",
      "content": " avroObservation = (Record) observationConverter.resourceToAvro(testObservation);",
      "oldLineNo": "99",
      "newLineNo": "98"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "100",
      "newLineNo": "99"
    },
    {
      "type": "not-modified",
      "content": " testObservationDecoded = (Observation) observationConverter.avroToResource(avroObservation);",
      "oldLineNo": "101",
      "newLineNo": "100"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "102",
      "newLineNo": "101"
    },
    {
      "type": "modified",
      "oldContent": " avroObservationNullStatus = (Record) observationConverter",
      "newContent": " avroObservationNullStatus =",
      "oldLineNo": "103",
      "newLineNo": "102"
    },
    {
      "type": "modified",
      "oldContent": "        .resourceToAvro(testObservationNullStatus);",
      "newContent": " (Record) observationConverter.resourceToAvro(testObservationNullStatus);",
      "oldLineNo": "104",
      "newLineNo": "103"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "105",
      "newLineNo": "104"
    },
    {
      "type": "modified",
      "oldContent": " testObservationDecodedNullStatus = (Observation) observationConverter",
      "newContent": " testObservationDecodedNullStatus =",
      "oldLineNo": "106",
      "newLineNo": "105"
    },
    {
      "type": "modified",
      "oldContent": "        .avroToResource(avroObservationNullStatus);",
      "newContent": " (Observation) observationConverter.avroToResource(avroObservationNullStatus);",
      "oldLineNo": "107",
      "newLineNo": "106"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "108",
      "newLineNo": "107"
    },
    {
      "type": "modified",
      "oldContent": " AvroConverter patientConverter = AvroConverter.forResource(FhirContexts.forStu3(),",
      "newContent": " AvroConverter patientConverter =",
      "oldLineNo": "109",
      "newLineNo": "108"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_PATIENT);",
      "newContent": " AvroConverter.forResource(FhirContexts.forStu3(), TestData.US_CORE_PATIENT);",
      "oldLineNo": "110",
      "newLineNo": "109"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "111",
      "newLineNo": "110"
    },
    {
      "type": "not-modified",
      "content": " avroPatient = (Record) patientConverter.resourceToAvro(testPatient);",
      "oldLineNo": "112",
      "newLineNo": "111"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "113",
      "newLineNo": "112"
    },
    {
      "type": "not-modified",
      "content": " testPatientDecoded = (Patient) patientConverter.avroToResource(avroPatient);",
      "oldLineNo": "114",
      "newLineNo": "113"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "115",
      "newLineNo": "114"
    },
    {
      "type": "modified",
      "oldContent": " AvroConverter conditionConverter = AvroConverter.forResource(FhirContexts.forStu3(),",
      "newContent": " AvroConverter conditionConverter =",
      "oldLineNo": "116",
      "newLineNo": "115"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_CONDITION);",
      "newContent": " AvroConverter.forResource(FhirContexts.forStu3(), TestData.US_CORE_CONDITION);",
      "oldLineNo": "117",
      "newLineNo": "116"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "118",
      "newLineNo": "117"
    },
    {
      "type": "not-modified",
      "content": " avroCondition = (Record) conditionConverter.resourceToAvro(testCondition);",
      "oldLineNo": "119",
      "newLineNo": "118"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "120",
      "newLineNo": "119"
    },
    {
      "type": "not-modified",
      "content": " testConditionDecoded = (Condition) conditionConverter.avroToResource(avroCondition);",
      "oldLineNo": "121",
      "newLineNo": "120"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "122",
      "newLineNo": "121"
    },
    {
      "type": "modified",
      "oldContent": " AvroConverter medicationConverter = AvroConverter.forResource(FhirContexts.forStu3(),",
      "newContent": " AvroConverter medicationConverter =",
      "oldLineNo": "123",
      "newLineNo": "122"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_MEDICATION);",
      "newContent": " AvroConverter.forResource(FhirContexts.forStu3(), TestData.US_CORE_MEDICATION);",
      "oldLineNo": "124",
      "newLineNo": "123"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "125",
      "newLineNo": "124"
    },
    {
      "type": "not-modified",
      "content": " Record avroMedication = (Record) medicationConverter.resourceToAvro(testMedicationOne);",
      "oldLineNo": "126",
      "newLineNo": "125"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "127",
      "newLineNo": "126"
    },
    {
      "type": "not-modified",
      "content": " testMedicationDecoded = (Medication) medicationConverter.avroToResource(avroMedication);",
      "oldLineNo": "128",
      "newLineNo": "127"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "129",
      "newLineNo": "128"
    },
    {
      "type": "modified",
      "oldContent": " AvroConverter medicationRequestConverter = AvroConverter.forResource(FhirContexts.forStu3(),",
      "newContent": " AvroConverter medicationRequestConverter =",
      "oldLineNo": "130",
      "newLineNo": "129"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_MEDICATION_REQUEST,",
      "newContent": " AvroConverter.forResource(",
      "oldLineNo": "131",
      "newLineNo": "130"
    },
    {
      "type": "modified",
      "oldContent": " Arrays.asList(TestData.US_CORE_MEDICATION, TestData.PROVENANCE));",
      "newContent": " FhirContexts.forStu3(),",
      "oldLineNo": "132",
      "newLineNo": "131"
    },
    {
      "type": "added",
      "content": " TestData.US_CORE_MEDICATION_REQUEST,",
      "lineNo": "132"
    },
    {
      "type": "added",
      "content": " Arrays.asList(TestData.US_CORE_MEDICATION, TestData.PROVENANCE));",
      "lineNo": "133"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "133",
      "newLineNo": "134"
    },
    {
      "type": "modified",
      "oldContent": " avroMedicationRequest = (Record) medicationRequestConverter",
      "newContent": " avroMedicationRequest =",
      "oldLineNo": "134",
      "newLineNo": "135"
    },
    {
      "type": "modified",
      "oldContent": "        .resourceToAvro(testMedicationRequest);",
      "newContent": " (Record) medicationRequestConverter.resourceToAvro(testMedicationRequest);",
      "oldLineNo": "135",
      "newLineNo": "136"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "136",
      "newLineNo": "137"
    },
    {
      "type": "modified",
      "oldContent": " testMedicationRequestDecoded = (MedicationRequest) medicationRequestConverter",
      "newContent": " testMedicationRequestDecoded =",
      "oldLineNo": "137",
      "newLineNo": "138"
    },
    {
      "type": "modified",
      "oldContent": "        .avroToResource(avroMedicationRequest);",
      "newContent": " (MedicationRequest) medicationRequestConverter.avroToResource(avroMedicationRequest);",
      "oldLineNo": "138",
      "newLineNo": "139"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "139",
      "newLineNo": "140"
    },
    {
      "type": "modified",
      "oldContent": " AvroConverter converterBunsenTestProfilePatient = AvroConverter",
      "newContent": " AvroConverter converterBunsenTestProfilePatient =",
      "oldLineNo": "140",
      "newLineNo": "141"
    },
    {
      "type": "modified",
      "oldContent": "        .forResource(FhirContexts.forStu3(), TestData.BUNSEN_TEST_PATIENT);",
      "newContent": " AvroConverter.forResource(FhirContexts.forStu3(), TestData.BUNSEN_TEST_PATIENT);",
      "oldLineNo": "141",
      "newLineNo": "142"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "142",
      "newLineNo": "143"
    },
    {
      "type": "modified",
      "oldContent": " avroBunsenTestProfilePatient = (Record) converterBunsenTestProfilePatient",
      "newContent": " avroBunsenTestProfilePatient =",
      "oldLineNo": "143",
      "newLineNo": "144"
    },
    {
      "type": "modified",
      "oldContent": "        .resourceToAvro(testBunsenTestProfilePatient);",
      "newContent": " (Record) converterBunsenTestProfilePatient.resourceToAvro(testBunsenTestProfilePatient);",
      "oldLineNo": "144",
      "newLineNo": "145"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "145",
      "newLineNo": "146"
    },
    {
      "type": "modified",
      "oldContent": " testBunsenTestProfilePatientDecoded = (Patient) converterBunsenTestProfilePatient",
      "newContent": " testBunsenTestProfilePatientDecoded =",
      "oldLineNo": "146",
      "newLineNo": "147"
    },
    {
      "type": "modified",
      "oldContent": "        .avroToResource(avroBunsenTestProfilePatient);",
      "newContent": " (Patient) converterBunsenTestProfilePatient.avroToResource(avroBunsenTestProfilePatient);",
      "oldLineNo": "147",
      "newLineNo": "148"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "148",
      "newLineNo": "149"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "149",
      "newLineNo": "150"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "150",
      "newLineNo": "151"
    },
    {
      "type": "not-modified",
      "content": " BigDecimal originalDecimal = ((Quantity) testObservation.getValue()).getValue();",
      "oldLineNo": "153",
      "newLineNo": "154"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "154",
      "newLineNo": "155"
    },
    {
      "type": "not-modified",
      "content": " // Decode the Avro decimal to ensure the expected value is there.",
      "oldLineNo": "155",
      "newLineNo": "156"
    },
    {
      "type": "modified",
      "oldContent": " BigDecimal avroDecimal  = (BigDecimal) ((Record)",
      "newContent": " BigDecimal avroDecimal =",
      "oldLineNo": "156",
      "newLineNo": "157"
    },
    {
      "type": "modified",
      "oldContent": "        ((Record) avroObservation.get(\"value\"))",
      "newContent": "        (BigDecimal)",
      "oldLineNo": "157",
      "newLineNo": "158"
    },
    {
      "type": "modified",
      "oldContent": "        .get(\"quantity\"))",
      "newContent": "            ((Record) ((Record) avroObservation.get(\"value\")).get(\"quantity\")).get(\"value\");",
      "oldLineNo": "158",
      "newLineNo": "159"
    },
    {
      "type": "deleted",
      "content": "        .get(\"value\");",
      "lineNo": "159"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "160",
      "newLineNo": "160"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(originalDecimal.compareTo(avroDecimal), 0);",
      "oldLineNo": "161",
      "newLineNo": "161"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "162",
      "newLineNo": "162"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(originalDecimal.compareTo(",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "163",
      "newLineNo": "163"
    },
    {
      "type": "modified",
      "oldContent": "        ((Quantity) testObservationDecoded",
      "newContent": " originalDecimal.compareTo(((Quantity) testObservationDecoded.getValue()).getValue()), 0);",
      "oldLineNo": "164",
      "newLineNo": "164"
    },
    {
      "type": "deleted",
      "content": "            .getValue())",
      "lineNo": "165"
    },
    {
      "type": "deleted",
      "content": "            .getValue()), 0);",
      "lineNo": "166"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "167",
      "newLineNo": "165"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "168",
      "newLineNo": "166"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "169",
      "newLineNo": "167"
    },
    {
      "type": "not-modified",
      "content": " public void testPrimitiveMultiplicity() {",
      "oldLineNo": "170",
      "newLineNo": "168"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "171",
      "newLineNo": "169"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(testPatient.getName().get(0).getFamily()",
      "newContent": " Assert.assertTrue(",
      "oldLineNo": "172",
      "newLineNo": "170"
    },
    {
      "type": "modified",
      "oldContent": "        .equalsIgnoreCase(testPatientDecoded.getName().get(0).getFamily()));",
      "newContent": " testPatient",
      "oldLineNo": "173",
      "newLineNo": "171"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(testPatient.getName().get(0).getGiven().get(0).getValueAsString()",
      "newContent": "            .getName()",
      "oldLineNo": "174",
      "newLineNo": "172"
    },
    {
      "type": "modified",
      "oldContent": "        .equals(testPatientDecoded.getName().get(0).getGiven().get(0).getValueAsString()));",
      "newContent": "            .get(0)",
      "oldLineNo": "175",
      "newLineNo": "173"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(testPatient.getName().get(0).getGiven().get(1).getValueAsString()",
      "newContent": "            .getFamily()",
      "oldLineNo": "176",
      "newLineNo": "174"
    },
    {
      "type": "modified",
      "oldContent": "        .equals(testPatientDecoded.getName().get(0).getGiven().get(1).getValueAsString()));",
      "newContent": "            .equalsIgnoreCase(testPatientDecoded.getName().get(0).getFamily()));",
      "oldLineNo": "177",
      "newLineNo": "175"
    },
    {
      "type": "added",
      "content": " Assert.assertTrue(",
      "lineNo": "176"
    },
    {
      "type": "added",
      "content": " testPatient",
      "lineNo": "177"
    },
    {
      "type": "added",
      "content": "            .getName()",
      "lineNo": "178"
    },
    {
      "type": "added",
      "content": "            .get(0)",
      "lineNo": "179"
    },
    {
      "type": "added",
      "content": "            .getGiven()",
      "lineNo": "180"
    },
    {
      "type": "added",
      "content": "            .get(0)",
      "lineNo": "181"
    },
    {
      "type": "added",
      "content": "            .getValueAsString()",
      "lineNo": "182"
    },
    {
      "type": "added",
      "content": "            .equals(testPatientDecoded.getName().get(0).getGiven().get(0).getValueAsString()));",
      "lineNo": "183"
    },
    {
      "type": "added",
      "content": " Assert.assertTrue(",
      "lineNo": "184"
    },
    {
      "type": "added",
      "content": " testPatient",
      "lineNo": "185"
    },
    {
      "type": "added",
      "content": "            .getName()",
      "lineNo": "186"
    },
    {
      "type": "added",
      "content": "            .get(0)",
      "lineNo": "187"
    },
    {
      "type": "added",
      "content": "            .getGiven()",
      "lineNo": "188"
    },
    {
      "type": "added",
      "content": "            .get(1)",
      "lineNo": "189"
    },
    {
      "type": "added",
      "content": "            .getValueAsString()",
      "lineNo": "190"
    },
    {
      "type": "added",
      "content": "            .equals(testPatientDecoded.getName().get(0).getGiven().get(1).getValueAsString()));",
      "lineNo": "191"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "178",
      "newLineNo": "192"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "179",
      "newLineNo": "193"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "180",
      "newLineNo": "194"
    },
    {
      "type": "not-modified",
      "content": " public void testChoice() throws FHIRException {",
      "oldLineNo": "181",
      "newLineNo": "195"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "182",
      "newLineNo": "196"
    },
    {
      "type": "not-modified",
      "content": " // Ensure that a decoded choice type matches the original",
      "oldLineNo": "183",
      "newLineNo": "197"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(testPatient.getMultipleBirth()",
      "newContent": " Assert.assertTrue(",
      "oldLineNo": "184",
      "newLineNo": "198"
    },
    {
      "type": "modified",
      "oldContent": "        .equalsDeep(testPatientDecoded.getMultipleBirth()));",
      "newContent": " testPatient.getMultipleBirth().equalsDeep(testPatientDecoded.getMultipleBirth()));",
      "oldLineNo": "185",
      "newLineNo": "199"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "186",
      "newLineNo": "200"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "187",
      "newLineNo": "201"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "188",
      "newLineNo": "202"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "202",
      "newLineNo": "216"
    },
    {
      "type": "not-modified",
      "content": " public void testIdenticalChoicesTypes() {",
      "oldLineNo": "203",
      "newLineNo": "217"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "204",
      "newLineNo": "218"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(testMedicationOne.getIngredientFirstRep()",
      "newContent": " Assert.assertTrue(",
      "oldLineNo": "205",
      "newLineNo": "219"
    },
    {
      "type": "modified",
      "oldContent": "        .equalsDeep(testMedicationDecoded.getIngredientFirstRep()));",
      "newContent": " testMedicationOne",
      "oldLineNo": "206",
      "newLineNo": "220"
    },
    {
      "type": "added",
      "content": "            .getIngredientFirstRep()",
      "lineNo": "221"
    },
    {
      "type": "added",
      "content": "            .equalsDeep(testMedicationDecoded.getIngredientFirstRep()));",
      "lineNo": "222"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "207",
      "newLineNo": "223"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(testMedicationOne.getPackage().getContentFirstRep()",
      "newContent": " Assert.assertTrue(",
      "oldLineNo": "208",
      "newLineNo": "224"
    },
    {
      "type": "modified",
      "oldContent": "        .equalsDeep(testMedicationDecoded.getPackage().getContentFirstRep()));",
      "newContent": " testMedicationOne",
      "oldLineNo": "209",
      "newLineNo": "225"
    },
    {
      "type": "added",
      "content": "            .getPackage()",
      "lineNo": "226"
    },
    {
      "type": "added",
      "content": "            .getContentFirstRep()",
      "lineNo": "227"
    },
    {
      "type": "added",
      "content": "            .equalsDeep(testMedicationDecoded.getPackage().getContentFirstRep()));",
      "lineNo": "228"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "210",
      "newLineNo": "229"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "211",
      "newLineNo": "230"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "212",
      "newLineNo": "231"
    },
    {
      "type": "not-modified",
      "content": " public void testInteger() {",
      "oldLineNo": "213",
      "newLineNo": "232"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "214",
      "newLineNo": "233"
    },
    {
      "type": "not-modified",
      "content": " Integer expectedMultipleBirth = ((IntegerType) testPatient.getMultipleBirth()).getValue();",
      "oldLineNo": "215",
      "newLineNo": "234"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "216",
      "newLineNo": "235"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(expectedMultipleBirth,",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "217",
      "newLineNo": "236"
    },
    {
      "type": "modified",
      "oldContent": "        ((IntegerType) testPatientDecoded.getMultipleBirth()).getValue());",
      "newContent": " expectedMultipleBirth, ((IntegerType) testPatientDecoded.getMultipleBirth()).getValue());",
      "oldLineNo": "218",
      "newLineNo": "237"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "219",
      "newLineNo": "238"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(expectedMultipleBirth,",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "220",
      "newLineNo": "239"
    },
    {
      "type": "modified",
      "oldContent": "        ((Record) avroPatient.get(\"multipleBirth\")).get(\"integer\"));",
      "newContent": " expectedMultipleBirth, ((Record) avroPatient.get(\"multipleBirth\")).get(\"integer\"));",
      "oldLineNo": "221",
      "newLineNo": "240"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "222",
      "newLineNo": "241"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "223",
      "newLineNo": "242"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "224",
      "newLineNo": "243"
    },
    {
      "type": "not-modified",
      "content": " public void testBoundCode() {",
      "oldLineNo": "225",
      "newLineNo": "244"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "226",
      "newLineNo": "245"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testObservation.getStatus().toCode(),",
      "newContent": " Assert.assertEquals(testObservation.getStatus().toCode(), avroObservation.get(\"status\"));",
      "oldLineNo": "227",
      "newLineNo": "246"
    },
    {
      "type": "deleted",
      "content": " avroObservation.get(\"status\"));",
      "lineNo": "228"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "229",
      "newLineNo": "247"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testObservation.getStatus(),",
      "newContent": " Assert.assertEquals(testObservation.getStatus(), testObservationDecoded.getStatus());",
      "oldLineNo": "230",
      "newLineNo": "248"
    },
    {
      "type": "deleted",
      "content": " testObservationDecoded.getStatus());",
      "lineNo": "231"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "232",
      "newLineNo": "249"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "233",
      "newLineNo": "250"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "234",
      "newLineNo": "251"
    },
    {
      "type": "not-modified",
      "content": " Coding testCoding = testCondition.getSeverity().getCodingFirstRep();",
      "oldLineNo": "245",
      "newLineNo": "262"
    },
    {
      "type": "not-modified",
      "content": " Coding decodedCoding = testConditionDecoded.getSeverity().getCodingFirstRep();",
      "oldLineNo": "246",
      "newLineNo": "263"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "247",
      "newLineNo": "264"
    },
    {
      "type": "modified",
      "oldContent": " List<Record> severityCodings = (List) ((Record)  avroCondition.get(\"severity\")).get(\"coding\");",
      "newContent": " List<Record> severityCodings = (List) ((Record) avroCondition.get(\"severity\")).get(\"coding\");",
      "oldLineNo": "248",
      "newLineNo": "265"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "249",
      "newLineNo": "266"
    },
    {
      "type": "not-modified",
      "content": " Record severityCoding = severityCodings.get(0);",
      "oldLineNo": "250",
      "newLineNo": "267"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "251",
      "newLineNo": "268"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCoding.getCode(),",
      "newContent": " Assert.assertEquals(testCoding.getCode(), severityCoding.get(\"code\"));",
      "oldLineNo": "252",
      "newLineNo": "269"
    },
    {
      "type": "modified",
      "oldContent": " severityCoding.get(\"code\"));",
      "newContent": " Assert.assertEquals(testCoding.getCode(), decodedCoding.getCode());",
      "oldLineNo": "253",
      "newLineNo": "270"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCoding.getCode(),",
      "newContent": "",
      "oldLineNo": "254",
      "newLineNo": "271"
    },
    {
      "type": "modified",
      "oldContent": " decodedCoding.getCode());",
      "newContent": " Assert.assertEquals(testCoding.getSystem(), severityCoding.get(\"system\"));",
      "oldLineNo": "255",
      "newLineNo": "272"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " Assert.assertEquals(testCoding.getSystem(), decodedCoding.getSystem());",
      "oldLineNo": "256",
      "newLineNo": "273"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCoding.getSystem(),",
      "newContent": "",
      "oldLineNo": "257",
      "newLineNo": "274"
    },
    {
      "type": "modified",
      "oldContent": " severityCoding.get(\"system\"));",
      "newContent": " Assert.assertEquals(testCoding.getUserSelected(), severityCoding.get(\"userSelected\"));",
      "oldLineNo": "258",
      "newLineNo": "275"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCoding.getSystem(),",
      "newContent": " Assert.assertEquals(testCoding.getUserSelected(), decodedCoding.getUserSelected());",
      "oldLineNo": "259",
      "newLineNo": "276"
    },
    {
      "type": "modified",
      "oldContent": " decodedCoding.getSystem());",
      "newContent": "",
      "oldLineNo": "260",
      "newLineNo": "277"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " Assert.assertEquals(testCoding.getDisplay(), severityCoding.get(\"display\"));",
      "oldLineNo": "261",
      "newLineNo": "278"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCoding.getUserSelected(),",
      "newContent": " Assert.assertEquals(testCoding.getDisplay(), decodedCoding.getDisplay());",
      "oldLineNo": "262",
      "newLineNo": "279"
    },
    {
      "type": "deleted",
      "content": " severityCoding.get(\"userSelected\"));",
      "lineNo": "263"
    },
    {
      "type": "deleted",
      "content": " Assert.assertEquals(testCoding.getUserSelected(),",
      "lineNo": "264"
    },
    {
      "type": "deleted",
      "content": " decodedCoding.getUserSelected());",
      "lineNo": "265"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "266"
    },
    {
      "type": "deleted",
      "content": " Assert.assertEquals(testCoding.getDisplay(),",
      "lineNo": "267"
    },
    {
      "type": "deleted",
      "content": " severityCoding.get(\"display\"));",
      "lineNo": "268"
    },
    {
      "type": "deleted",
      "content": " Assert.assertEquals(testCoding.getDisplay(),",
      "lineNo": "269"
    },
    {
      "type": "deleted",
      "content": " decodedCoding.getDisplay());",
      "lineNo": "270"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "271",
      "newLineNo": "280"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "272",
      "newLineNo": "281"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "273",
      "newLineNo": "282"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "277",
      "newLineNo": "286"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testCondition.getSubject().getReference(), subject.get(\"reference\"));",
      "oldLineNo": "278",
      "newLineNo": "287"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "279",
      "newLineNo": "288"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(\"12345\",  subject.get(\"patientId\"));",
      "newContent": " Assert.assertEquals(\"12345\", subject.get(\"patientId\"));",
      "oldLineNo": "280",
      "newLineNo": "289"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "281",
      "newLineNo": "290"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCondition.getSubject().getReference(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "282",
      "newLineNo": "291"
    },
    {
      "type": "added",
      "content": " testCondition.getSubject().getReference(),",
      "lineNo": "292"
    },
    {
      "type": "not-modified",
      "content": " testConditionDecoded.getSubject().getReference());",
      "oldLineNo": "283",
      "newLineNo": "293"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "284",
      "newLineNo": "294"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "285",
      "newLineNo": "295"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertNull(organizationId);",
      "oldLineNo": "304",
      "newLineNo": "314"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "305",
      "newLineNo": "315"
    },
    {
      "type": "not-modified",
      "content": " // The field with the expected prefix should match the original data.",
      "oldLineNo": "306",
      "newLineNo": "316"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testPatient.getGeneralPractitionerFirstRep().getReference(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "307",
      "newLineNo": "317"
    },
    {
      "type": "added",
      "content": " testPatient.getGeneralPractitionerFirstRep().getReference(),",
      "lineNo": "318"
    },
    {
      "type": "not-modified",
      "content": " \"Practitioner/\" + practitionerId);",
      "oldLineNo": "308",
      "newLineNo": "319"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "309",
      "newLineNo": "320"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testCondition.getSubject().getReference(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "310",
      "newLineNo": "321"
    },
    {
      "type": "added",
      "content": " testCondition.getSubject().getReference(),",
      "lineNo": "322"
    },
    {
      "type": "not-modified",
      "content": " testConditionDecoded.getSubject().getReference());",
      "oldLineNo": "311",
      "newLineNo": "323"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "312",
      "newLineNo": "324"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "313",
      "newLineNo": "325"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "314",
      "newLineNo": "326"
    },
    {
      "type": "not-modified",
      "content": " public void testSimpleExtension() {",
      "oldLineNo": "315",
      "newLineNo": "327"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "316",
      "newLineNo": "328"
    },
    {
      "type": "modified",
      "oldContent": " String testBirthSex = testPatient",
      "newContent": " String testBirthSex =",
      "oldLineNo": "317",
      "newLineNo": "329"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.US_CORE_BIRTHSEX)",
      "newContent": " testPatient",
      "oldLineNo": "318",
      "newLineNo": "330"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": "            .getExtensionsByUrl(TestData.US_CORE_BIRTHSEX)",
      "oldLineNo": "319",
      "newLineNo": "331"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsPrimitive()",
      "newContent": "            .get(0)",
      "oldLineNo": "320",
      "newLineNo": "332"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsString();",
      "newContent": "            .getValueAsPrimitive()",
      "oldLineNo": "321",
      "newLineNo": "333"
    },
    {
      "type": "added",
      "content": "            .getValueAsString();",
      "lineNo": "334"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "322",
      "newLineNo": "335"
    },
    {
      "type": "modified",
      "oldContent": " String decodedBirthSex = testPatientDecoded",
      "newContent": " String decodedBirthSex =",
      "oldLineNo": "323",
      "newLineNo": "336"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.US_CORE_BIRTHSEX)",
      "newContent": " testPatientDecoded",
      "oldLineNo": "324",
      "newLineNo": "337"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": "            .getExtensionsByUrl(TestData.US_CORE_BIRTHSEX)",
      "oldLineNo": "325",
      "newLineNo": "338"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsPrimitive()",
      "newContent": "            .get(0)",
      "oldLineNo": "326",
      "newLineNo": "339"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsString();",
      "newContent": "            .getValueAsPrimitive()",
      "oldLineNo": "327",
      "newLineNo": "340"
    },
    {
      "type": "added",
      "content": "            .getValueAsString();",
      "lineNo": "341"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "328",
      "newLineNo": "342"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testBirthSex, decodedBirthSex);",
      "oldLineNo": "329",
      "newLineNo": "343"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "330",
      "newLineNo": "344"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(testBirthSex,",
      "newContent": " Assert.assertEquals(testBirthSex, ((Record) avroPatient).get(\"birthsex\"));",
      "oldLineNo": "331",
      "newLineNo": "345"
    },
    {
      "type": "deleted",
      "content": "        ((Record) avroPatient).get(\"birthsex\"));",
      "lineNo": "332"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "333",
      "newLineNo": "346"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "334",
      "newLineNo": "347"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "335",
      "newLineNo": "348"
    },
    {
      "type": "not-modified",
      "content": " public void testNestedExtension() {",
      "oldLineNo": "336",
      "newLineNo": "349"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "337",
      "newLineNo": "350"
    },
    {
      "type": "modified",
      "oldContent": " Extension testEthnicity = testPatient",
      "newContent": " Extension testEthnicity = testPatient.getExtensionsByUrl(TestData.US_CORE_ETHNICITY).get(0);",
      "oldLineNo": "338",
      "newLineNo": "351"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.US_CORE_ETHNICITY)",
      "newContent": "",
      "oldLineNo": "339",
      "newLineNo": "352"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0);",
      "newContent": " Coding testOmbCategory =",
      "oldLineNo": "340",
      "newLineNo": "353"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "        (Coding) testEthnicity.getExtensionsByUrl(\"ombCategory\").get(0).getValue();",
      "oldLineNo": "341",
      "newLineNo": "354"
    },
    {
      "type": "modified",
      "oldContent": " Coding testOmbCategory = (Coding) testEthnicity",
      "newContent": "",
      "oldLineNo": "342",
      "newLineNo": "355"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(\"ombCategory\")",
      "newContent": " Coding testDetailed1 = (Coding) testEthnicity.getExtensionsByUrl(\"detailed\").get(0).getValue();",
      "oldLineNo": "343",
      "newLineNo": "356"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": "",
      "oldLineNo": "344",
      "newLineNo": "357"
    },
    {
      "type": "modified",
      "oldContent": "        .getValue();",
      "newContent": " Coding testDetailed2 = (Coding) testEthnicity.getExtensionsByUrl(\"detailed\").get(1).getValue();",
      "oldLineNo": "345",
      "newLineNo": "358"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "",
      "oldLineNo": "346",
      "newLineNo": "359"
    },
    {
      "type": "modified",
      "oldContent": " Coding testDetailed1 = (Coding) testEthnicity",
      "newContent": " String testText =",
      "oldLineNo": "347",
      "newLineNo": "360"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(\"detailed\")",
      "newContent": " testEthnicity.getExtensionsByUrl(\"text\").get(0).getValueAsPrimitive().getValueAsString();",
      "oldLineNo": "348",
      "newLineNo": "361"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": "",
      "oldLineNo": "349",
      "newLineNo": "362"
    },
    {
      "type": "modified",
      "oldContent": "        .getValue();",
      "newContent": " Extension decodedEthnicity =",
      "oldLineNo": "350",
      "newLineNo": "363"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " testPatientDecoded.getExtensionsByUrl(TestData.US_CORE_ETHNICITY).get(0);",
      "oldLineNo": "351",
      "newLineNo": "364"
    },
    {
      "type": "modified",
      "oldContent": " Coding testDetailed2 = (Coding) testEthnicity",
      "newContent": "",
      "oldLineNo": "352",
      "newLineNo": "365"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(\"detailed\")",
      "newContent": " Coding decodedOmbCategory =",
      "oldLineNo": "353",
      "newLineNo": "366"
    },
    {
      "type": "modified",
      "oldContent": "        .get(1)",
      "newContent": "        (Coding) decodedEthnicity.getExtensionsByUrl(\"ombCategory\").get(0).getValue();",
      "oldLineNo": "354",
      "newLineNo": "367"
    },
    {
      "type": "modified",
      "oldContent": "        .getValue();",
      "newContent": "",
      "oldLineNo": "355",
      "newLineNo": "368"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " Coding decodedDetailed1 =",
      "oldLineNo": "356",
      "newLineNo": "369"
    },
    {
      "type": "modified",
      "oldContent": " String testText = testEthnicity",
      "newContent": "        (Coding) decodedEthnicity.getExtensionsByUrl(\"detailed\").get(0).getValue();",
      "oldLineNo": "357",
      "newLineNo": "370"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(\"text\")",
      "newContent": "",
      "oldLineNo": "358",
      "newLineNo": "371"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": " Coding decodedDetailed2 =",
      "oldLineNo": "359",
      "newLineNo": "372"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsPrimitive()",
      "newContent": "        (Coding) decodedEthnicity.getExtensionsByUrl(\"detailed\").get(1).getValue();",
      "oldLineNo": "360",
      "newLineNo": "373"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsString();",
      "newContent": "",
      "oldLineNo": "361",
      "newLineNo": "374"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " String decodedText =",
      "oldLineNo": "362",
      "newLineNo": "375"
    },
    {
      "type": "modified",
      "oldContent": " Extension decodedEthnicity = testPatientDecoded",
      "newContent": " decodedEthnicity.getExtensionsByUrl(\"text\").get(0).getValueAsPrimitive().getValueAsString();",
      "oldLineNo": "363",
      "newLineNo": "376"
    },
    {
      "type": "deleted",
      "content": "        .getExtensionsByUrl(TestData.US_CORE_ETHNICITY)",
      "lineNo": "364"
    },
    {
      "type": "deleted",
      "content": "        .get(0);",
      "lineNo": "365"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "366"
    },
    {
      "type": "deleted",
      "content": " Coding decodedOmbCategory = (Coding) decodedEthnicity",
      "lineNo": "367"
    },
    {
      "type": "deleted",
      "content": "        .getExtensionsByUrl(\"ombCategory\")",
      "lineNo": "368"
    },
    {
      "type": "deleted",
      "content": "        .get(0)",
      "lineNo": "369"
    },
    {
      "type": "deleted",
      "content": "        .getValue();",
      "lineNo": "370"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "371"
    },
    {
      "type": "deleted",
      "content": " Coding decodedDetailed1 = (Coding) decodedEthnicity",
      "lineNo": "372"
    },
    {
      "type": "deleted",
      "content": "        .getExtensionsByUrl(\"detailed\")",
      "lineNo": "373"
    },
    {
      "type": "deleted",
      "content": "        .get(0)",
      "lineNo": "374"
    },
    {
      "type": "deleted",
      "content": "        .getValue();",
      "lineNo": "375"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "376"
    },
    {
      "type": "deleted",
      "content": " Coding decodedDetailed2 = (Coding) decodedEthnicity",
      "lineNo": "377"
    },
    {
      "type": "deleted",
      "content": "        .getExtensionsByUrl(\"detailed\")",
      "lineNo": "378"
    },
    {
      "type": "deleted",
      "content": "        .get(1)",
      "lineNo": "379"
    },
    {
      "type": "deleted",
      "content": "        .getValue();",
      "lineNo": "380"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "381"
    },
    {
      "type": "deleted",
      "content": " String decodedText = decodedEthnicity",
      "lineNo": "382"
    },
    {
      "type": "deleted",
      "content": "        .getExtensionsByUrl(\"text\")",
      "lineNo": "383"
    },
    {
      "type": "deleted",
      "content": "        .get(0)",
      "lineNo": "384"
    },
    {
      "type": "deleted",
      "content": "        .getValueAsPrimitive()",
      "lineNo": "385"
    },
    {
      "type": "deleted",
      "content": "        .getValueAsString();",
      "lineNo": "386"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "387",
      "newLineNo": "377"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(testOmbCategory.equalsDeep(decodedOmbCategory));",
      "oldLineNo": "388",
      "newLineNo": "378"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(testDetailed1.equalsDeep(decodedDetailed1));",
      "oldLineNo": "389",
      "newLineNo": "379"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "392",
      "newLineNo": "382"
    },
    {
      "type": "not-modified",
      "content": " Record ethnicityRecord = (Record) avroPatient.get(\"ethnicity\");",
      "oldLineNo": "393",
      "newLineNo": "383"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "394",
      "newLineNo": "384"
    },
    {
      "type": "modified",
      "oldContent": " Record ombCategoryRecord =  (Record) ethnicityRecord.get(\"ombCategory\");",
      "newContent": " Record ombCategoryRecord = (Record) ethnicityRecord.get(\"ombCategory\");",
      "oldLineNo": "395",
      "newLineNo": "385"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "396",
      "newLineNo": "386"
    },
    {
      "type": "modified",
      "oldContent": " List<Record> detailedRecord =  (List<Record>) ethnicityRecord.get(\"detailed\");",
      "newContent": " List<Record> detailedRecord = (List<Record>) ethnicityRecord.get(\"detailed\");",
      "oldLineNo": "397",
      "newLineNo": "387"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "398",
      "newLineNo": "388"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testOmbCategory.getSystem(), ombCategoryRecord.get(\"system\"));",
      "oldLineNo": "399",
      "newLineNo": "389"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testOmbCategory.getCode(), ombCategoryRecord.get(\"code\"));",
      "oldLineNo": "400",
      "newLineNo": "390"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "416",
      "newLineNo": "406"
    },
    {
      "type": "not-modified",
      "content": " Medication testMedicationOne = (Medication) testMedicationRequest.getContained().get(0);",
      "oldLineNo": "417",
      "newLineNo": "407"
    },
    {
      "type": "not-modified",
      "content": " String testMedicationOneId = testMedicationOne.getId();",
      "oldLineNo": "418",
      "newLineNo": "408"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept testMedicationIngredientItem = testMedicationOne.getIngredientFirstRep()",
      "newContent": " CodeableConcept testMedicationIngredientItem =",
      "oldLineNo": "419",
      "newLineNo": "409"
    },
    {
      "type": "modified",
      "oldContent": "        .getItemCodeableConcept();",
      "newContent": " testMedicationOne.getIngredientFirstRep().getItemCodeableConcept();",
      "oldLineNo": "420",
      "newLineNo": "410"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "421",
      "newLineNo": "411"
    },
    {
      "type": "modified",
      "oldContent": " Medication decodedMedicationOne = (Medication) testMedicationRequestDecoded.getContained()",
      "newContent": " Medication decodedMedicationOne =",
      "oldLineNo": "422",
      "newLineNo": "412"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0);",
      "newContent": " (Medication) testMedicationRequestDecoded.getContained().get(0);",
      "oldLineNo": "423",
      "newLineNo": "413"
    },
    {
      "type": "not-modified",
      "content": " String decodedMedicationOneId = decodedMedicationOne.getId();",
      "oldLineNo": "424",
      "newLineNo": "414"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept decodedMedicationOneIngredientItem = decodedMedicationOne",
      "newContent": " CodeableConcept decodedMedicationOneIngredientItem =",
      "oldLineNo": "425",
      "newLineNo": "415"
    },
    {
      "type": "modified",
      "oldContent": "        .getIngredientFirstRep()",
      "newContent": " decodedMedicationOne.getIngredientFirstRep().getItemCodeableConcept();",
      "oldLineNo": "426",
      "newLineNo": "416"
    },
    {
      "type": "deleted",
      "content": "        .getItemCodeableConcept();",
      "lineNo": "427"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "428",
      "newLineNo": "417"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testMedicationOneId, decodedMedicationOneId);",
      "oldLineNo": "429",
      "newLineNo": "418"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(decodedMedicationOneIngredientItem.equalsDeep(testMedicationIngredientItem));",
      "oldLineNo": "430",
      "newLineNo": "419"
    },
    {
      "type": "not-modified",
      "content": " Medication testMedicationTwo = (Medication) testMedicationRequest.getContained().get(2);",
      "oldLineNo": "440",
      "newLineNo": "429"
    },
    {
      "type": "not-modified",
      "content": " String testMedicationTwoId = testMedicationTwo.getId();",
      "oldLineNo": "441",
      "newLineNo": "430"
    },
    {
      "type": "not-modified",
      "content": " String testMedicationTwoReference =",
      "oldLineNo": "442",
      "newLineNo": "431"
    },
    {
      "type": "modified",
      "oldContent": "  testMedicationTwo.getPackage().getContent().get(0).getItemReference().getReference();",
      "newContent": " testMedicationTwo.getPackage().getContent().get(0).getItemReference().getReference();",
      "oldLineNo": "443",
      "newLineNo": "432"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "444",
      "newLineNo": "433"
    },
    {
      "type": "modified",
      "oldContent": " Medication decodedMedicationTwo = (Medication) testMedicationRequestDecoded.getContained()",
      "newContent": " Medication decodedMedicationTwo =",
      "oldLineNo": "445",
      "newLineNo": "434"
    },
    {
      "type": "modified",
      "oldContent": "        .get(2);",
      "newContent": " (Medication) testMedicationRequestDecoded.getContained().get(2);",
      "oldLineNo": "446",
      "newLineNo": "435"
    },
    {
      "type": "not-modified",
      "content": " String decodedMedicationTwoId = decodedMedicationTwo.getId();",
      "oldLineNo": "447",
      "newLineNo": "436"
    },
    {
      "type": "not-modified",
      "content": " String decodedMedicationTwoReference =",
      "oldLineNo": "448",
      "newLineNo": "437"
    },
    {
      "type": "modified",
      "oldContent": "  decodedMedicationTwo.getPackage().getContent().get(0).getItemReference().getReference();",
      "newContent": " decodedMedicationTwo.getPackage().getContent().get(0).getItemReference().getReference();",
      "oldLineNo": "449",
      "newLineNo": "438"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "450",
      "newLineNo": "439"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testMedicationTwoId, decodedMedicationTwoId);",
      "oldLineNo": "451",
      "newLineNo": "440"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(testMedicationTwoReference, decodedMedicationTwoReference);",
      "oldLineNo": "452",
      "newLineNo": "441"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "455",
      "newLineNo": "444"
    },
    {
      "type": "not-modified",
      "content": " public void testCompile() throws IOException {",
      "oldLineNo": "456",
      "newLineNo": "445"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "457",
      "newLineNo": "446"
    },
    {
      "type": "modified",
      "oldContent": " List<Schema> schemas = AvroConverter.generateSchemas(FhirContexts.forStu3(),",
      "newContent": " List<Schema> schemas =",
      "oldLineNo": "458",
      "newLineNo": "447"
    },
    {
      "type": "modified",
      "oldContent": " ImmutableMap.of(TestData.US_CORE_PATIENT, Collections.emptyList(),",
      "newContent": " AvroConverter.generateSchemas(",
      "oldLineNo": "459",
      "newLineNo": "448"
    },
    {
      "type": "modified",
      "oldContent": " TestData.VALUE_SET, Collections.emptyList(),",
      "newContent": " FhirContexts.forStu3(),",
      "oldLineNo": "460",
      "newLineNo": "449"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_MEDICATION_REQUEST, ImmutableList.of(TestData.US_CORE_MEDICATION)));",
      "newContent": " ImmutableMap.of(",
      "oldLineNo": "461",
      "newLineNo": "450"
    },
    {
      "type": "added",
      "content": " TestData.US_CORE_PATIENT,",
      "lineNo": "451"
    },
    {
      "type": "added",
      "content": " Collections.emptyList(),",
      "lineNo": "452"
    },
    {
      "type": "added",
      "content": " TestData.VALUE_SET,",
      "lineNo": "453"
    },
    {
      "type": "added",
      "content": " Collections.emptyList(),",
      "lineNo": "454"
    },
    {
      "type": "added",
      "content": " TestData.US_CORE_MEDICATION_REQUEST,",
      "lineNo": "455"
    },
    {
      "type": "added",
      "content": " ImmutableList.of(TestData.US_CORE_MEDICATION)));",
      "lineNo": "456"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "462",
      "newLineNo": "457"
    },
    {
      "type": "not-modified",
      "content": " // Wrap the schemas in a protocol to simplify the invocation of the compiler.",
      "oldLineNo": "463",
      "newLineNo": "458"
    },
    {
      "type": "modified",
      "oldContent": " Protocol protocol = new Protocol(\"fhir-test\",",
      "newContent": " Protocol protocol = new Protocol(\"fhir-test\", \"FHIR Resources for Testing\", null);",
      "oldLineNo": "464",
      "newLineNo": "459"
    },
    {
      "type": "deleted",
      "content": " \"FHIR Resources for Testing\",",
      "lineNo": "465"
    },
    {
      "type": "deleted",
      "content": " null);",
      "lineNo": "466"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "467",
      "newLineNo": "460"
    },
    {
      "type": "not-modified",
      "content": " protocol.setTypes(schemas);",
      "oldLineNo": "468",
      "newLineNo": "461"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "469",
      "newLineNo": "462"
    },
    {
      "type": "not-modified",
      "content": " compiler.compileToDestination(null, generatedCodePath.toFile());",
      "oldLineNo": "476",
      "newLineNo": "469"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "477",
      "newLineNo": "470"
    },
    {
      "type": "not-modified",
      "content": " // Check that java files were created as expected.",
      "oldLineNo": "478",
      "newLineNo": "471"
    },
    {
      "type": "modified",
      "oldContent": " Set<String> javaFiles = Files.find(generatedCodePath,",
      "newContent": " Set<String> javaFiles =",
      "oldLineNo": "479",
      "newLineNo": "472"
    },
    {
      "type": "modified",
      "oldContent": " 10,",
      "newContent": " Files.find(generatedCodePath, 10, (path, basicFileAttributes) -> true)",
      "oldLineNo": "480",
      "newLineNo": "473"
    },
    {
      "type": "modified",
      "oldContent": "        (path, basicFileAttributes) -> true)",
      "newContent": "            .map(path -> generatedCodePath.relativize(path))",
      "oldLineNo": "481",
      "newLineNo": "474"
    },
    {
      "type": "modified",
      "oldContent": "        .map(path -> generatedCodePath.relativize(path))",
      "newContent": "            .map(Object::toString)",
      "oldLineNo": "482",
      "newLineNo": "475"
    },
    {
      "type": "modified",
      "oldContent": "        .map(Object::toString)",
      "newContent": "            .collect(Collectors.toSet());",
      "oldLineNo": "483",
      "newLineNo": "476"
    },
    {
      "type": "deleted",
      "content": "        .collect(Collectors.toSet());",
      "lineNo": "484"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "485",
      "newLineNo": "477"
    },
    {
      "type": "not-modified",
      "content": " // Ensure common types were generated",
      "oldLineNo": "486",
      "newLineNo": "478"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(javaFiles.contains(\"com/cerner/bunsen/stu3/avro/Period.java\"));",
      "oldLineNo": "487",
      "newLineNo": "479"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(javaFiles.contains(\"com/cerner/bunsen/stu3/avro/ChoiceBooleanInteger.java\"));",
      "oldLineNo": "498",
      "newLineNo": "490"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "499",
      "newLineNo": "491"
    },
    {
      "type": "not-modified",
      "content": " // Contained types created.",
      "oldLineNo": "500",
      "newLineNo": "492"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertTrue(javaFiles.contains(",
      "newContent": " Assert.assertTrue(",
      "oldLineNo": "501",
      "newLineNo": "493"
    },
    {
      "type": "modified",
      "oldContent": " \"com/cerner/bunsen/stu3/avro/us/core/MedicationRequestContained.java\"));",
      "newContent": " javaFiles.contains(\"com/cerner/bunsen/stu3/avro/us/core/MedicationRequestContained.java\"));",
      "oldLineNo": "502",
      "newLineNo": "494"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "503",
      "newLineNo": "495"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "504",
      "newLineNo": "496"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "505",
      "newLineNo": "497"
    },
    {
      "type": "not-modified",
      "content": " public void testSimpleExtensionWithBooleanField() {",
      "oldLineNo": "506",
      "newLineNo": "498"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "507",
      "newLineNo": "499"
    },
    {
      "type": "modified",
      "oldContent": " Boolean expected = (Boolean) testBunsenTestProfilePatient",
      "newContent": " Boolean expected =",
      "oldLineNo": "508",
      "newLineNo": "500"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_BOOLEAN_FIELD)",
      "newContent": "        (Boolean)",
      "oldLineNo": "509",
      "newLineNo": "501"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": " testBunsenTestProfilePatient",
      "oldLineNo": "510",
      "newLineNo": "502"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsPrimitive().getValue();",
      "newContent": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_BOOLEAN_FIELD)",
      "oldLineNo": "511",
      "newLineNo": "503"
    },
    {
      "type": "added",
      "content": "                .get(0)",
      "lineNo": "504"
    },
    {
      "type": "added",
      "content": "                .getValueAsPrimitive()",
      "lineNo": "505"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "506"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "512",
      "newLineNo": "507"
    },
    {
      "type": "not-modified",
      "content": " Boolean actual = (Boolean) avroBunsenTestProfilePatient.get(\"booleanfield\");",
      "oldLineNo": "513",
      "newLineNo": "508"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(expected, actual);",
      "oldLineNo": "514",
      "newLineNo": "509"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "515",
      "newLineNo": "510"
    },
    {
      "type": "modified",
      "oldContent": " Boolean decodedBooleanField = (Boolean) testBunsenTestProfilePatientDecoded",
      "newContent": " Boolean decodedBooleanField =",
      "oldLineNo": "516",
      "newLineNo": "511"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_BOOLEAN_FIELD)",
      "newContent": "        (Boolean)",
      "oldLineNo": "517",
      "newLineNo": "512"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": " testBunsenTestProfilePatientDecoded",
      "oldLineNo": "518",
      "newLineNo": "513"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsPrimitive().getValue();",
      "newContent": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_BOOLEAN_FIELD)",
      "oldLineNo": "519",
      "newLineNo": "514"
    },
    {
      "type": "added",
      "content": "                .get(0)",
      "lineNo": "515"
    },
    {
      "type": "added",
      "content": "                .getValueAsPrimitive()",
      "lineNo": "516"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "517"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "520",
      "newLineNo": "518"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(expected, decodedBooleanField);",
      "oldLineNo": "521",
      "newLineNo": "519"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "522",
      "newLineNo": "520"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "523",
      "newLineNo": "521"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "524",
      "newLineNo": "522"
    },
    {
      "type": "not-modified",
      "content": " public void testSimpleExtensionWithIntegerField() {",
      "oldLineNo": "525",
      "newLineNo": "523"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "526",
      "newLineNo": "524"
    },
    {
      "type": "modified",
      "oldContent": " Integer expected = (Integer) testBunsenTestProfilePatient",
      "newContent": " Integer expected =",
      "oldLineNo": "527",
      "newLineNo": "525"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_INTEGER_FIELD)",
      "newContent": "        (Integer)",
      "oldLineNo": "528",
      "newLineNo": "526"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": " testBunsenTestProfilePatient",
      "oldLineNo": "529",
      "newLineNo": "527"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsPrimitive().getValue();",
      "newContent": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_INTEGER_FIELD)",
      "oldLineNo": "530",
      "newLineNo": "528"
    },
    {
      "type": "added",
      "content": "                .get(0)",
      "lineNo": "529"
    },
    {
      "type": "added",
      "content": "                .getValueAsPrimitive()",
      "lineNo": "530"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "531"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "531",
      "newLineNo": "532"
    },
    {
      "type": "not-modified",
      "content": " Integer actual = (Integer) avroBunsenTestProfilePatient.get(\"integerfield\");",
      "oldLineNo": "532",
      "newLineNo": "533"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(expected, actual);",
      "oldLineNo": "533",
      "newLineNo": "534"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "534",
      "newLineNo": "535"
    },
    {
      "type": "modified",
      "oldContent": " Integer decodedIntegerField = (Integer) testBunsenTestProfilePatientDecoded",
      "newContent": " Integer decodedIntegerField =",
      "oldLineNo": "535",
      "newLineNo": "536"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_INTEGER_FIELD)",
      "newContent": "        (Integer)",
      "oldLineNo": "536",
      "newLineNo": "537"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0)",
      "newContent": " testBunsenTestProfilePatientDecoded",
      "oldLineNo": "537",
      "newLineNo": "538"
    },
    {
      "type": "modified",
      "oldContent": "        .getValueAsPrimitive().getValue();",
      "newContent": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_INTEGER_FIELD)",
      "oldLineNo": "538",
      "newLineNo": "539"
    },
    {
      "type": "added",
      "content": "                .get(0)",
      "lineNo": "540"
    },
    {
      "type": "added",
      "content": "                .getValueAsPrimitive()",
      "lineNo": "541"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "542"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "539",
      "newLineNo": "543"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(expected, decodedIntegerField);",
      "oldLineNo": "540",
      "newLineNo": "544"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "541",
      "newLineNo": "545"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "542",
      "newLineNo": "546"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "543",
      "newLineNo": "547"
    },
    {
      "type": "not-modified",
      "content": " public void testMultiExtensionWithIntegerArrayField() {",
      "oldLineNo": "544",
      "newLineNo": "548"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "545",
      "newLineNo": "549"
    },
    {
      "type": "modified",
      "oldContent": " Integer expected1 = (Integer) testBunsenTestProfilePatient",
      "newContent": " Integer expected1 =",
      "oldLineNo": "546",
      "newLineNo": "550"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_INTEGER_ARRAY_FIELD)",
      "newContent": "        (Integer)",
      "oldLineNo": "547",
      "newLineNo": "551"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValueAsPrimitive().getValue();",
      "newContent": " testBunsenTestProfilePatient",
      "oldLineNo": "548",
      "newLineNo": "552"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_INTEGER_ARRAY_FIELD)",
      "oldLineNo": "549",
      "newLineNo": "553"
    },
    {
      "type": "modified",
      "oldContent": " Integer expected2 = (Integer) testBunsenTestProfilePatient",
      "newContent": "                .get(0)",
      "oldLineNo": "550",
      "newLineNo": "554"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_INTEGER_ARRAY_FIELD)",
      "newContent": "                .getValueAsPrimitive()",
      "oldLineNo": "551",
      "newLineNo": "555"
    },
    {
      "type": "modified",
      "oldContent": "        .get(1).getValueAsPrimitive().getValue();",
      "newContent": "                .getValue();",
      "oldLineNo": "552",
      "newLineNo": "556"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "",
      "oldLineNo": "553",
      "newLineNo": "557"
    },
    {
      "type": "modified",
      "oldContent": " Integer actual1 = ((List<Integer>)avroBunsenTestProfilePatient.get(\"integerArrayField\")).get(0);",
      "newContent": " Integer expected2 =",
      "oldLineNo": "554",
      "newLineNo": "558"
    },
    {
      "type": "modified",
      "oldContent": " Integer actual2 = ((List<Integer>)avroBunsenTestProfilePatient.get(\"integerArrayField\")).get(1);",
      "newContent": "        (Integer)",
      "oldLineNo": "555",
      "newLineNo": "559"
    },
    {
      "type": "added",
      "content": " testBunsenTestProfilePatient",
      "lineNo": "560"
    },
    {
      "type": "added",
      "content": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_INTEGER_ARRAY_FIELD)",
      "lineNo": "561"
    },
    {
      "type": "added",
      "content": "                .get(1)",
      "lineNo": "562"
    },
    {
      "type": "added",
      "content": "                .getValueAsPrimitive()",
      "lineNo": "563"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "564"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "565"
    },
    {
      "type": "added",
      "content": " Integer actual1 =",
      "lineNo": "566"
    },
    {
      "type": "added",
      "content": "        ((List<Integer>) avroBunsenTestProfilePatient.get(\"integerArrayField\")).get(0);",
      "lineNo": "567"
    },
    {
      "type": "added",
      "content": " Integer actual2 =",
      "lineNo": "568"
    },
    {
      "type": "added",
      "content": "        ((List<Integer>) avroBunsenTestProfilePatient.get(\"integerArrayField\")).get(1);",
      "lineNo": "569"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "556",
      "newLineNo": "570"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(expected1, actual1);",
      "oldLineNo": "557",
      "newLineNo": "571"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(expected2, actual2);",
      "oldLineNo": "558",
      "newLineNo": "572"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "559",
      "newLineNo": "573"
    },
    {
      "type": "modified",
      "oldContent": " Integer decodedIntegerField1 = (Integer) testBunsenTestProfilePatientDecoded",
      "newContent": " Integer decodedIntegerField1 =",
      "oldLineNo": "560",
      "newLineNo": "574"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_INTEGER_ARRAY_FIELD)",
      "newContent": "        (Integer)",
      "oldLineNo": "561",
      "newLineNo": "575"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValueAsPrimitive().getValue();",
      "newContent": " testBunsenTestProfilePatientDecoded",
      "oldLineNo": "562",
      "newLineNo": "576"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_INTEGER_ARRAY_FIELD)",
      "oldLineNo": "563",
      "newLineNo": "577"
    },
    {
      "type": "modified",
      "oldContent": " Integer decodedIntegerField2 = (Integer) testBunsenTestProfilePatientDecoded",
      "newContent": "                .get(0)",
      "oldLineNo": "564",
      "newLineNo": "578"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_INTEGER_ARRAY_FIELD)",
      "newContent": "                .getValueAsPrimitive()",
      "oldLineNo": "565",
      "newLineNo": "579"
    },
    {
      "type": "modified",
      "oldContent": "        .get(1).getValueAsPrimitive().getValue();",
      "newContent": "                .getValue();",
      "oldLineNo": "566",
      "newLineNo": "580"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "581"
    },
    {
      "type": "added",
      "content": " Integer decodedIntegerField2 =",
      "lineNo": "582"
    },
    {
      "type": "added",
      "content": "        (Integer)",
      "lineNo": "583"
    },
    {
      "type": "added",
      "content": " testBunsenTestProfilePatientDecoded",
      "lineNo": "584"
    },
    {
      "type": "added",
      "content": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_INTEGER_ARRAY_FIELD)",
      "lineNo": "585"
    },
    {
      "type": "added",
      "content": "                .get(1)",
      "lineNo": "586"
    },
    {
      "type": "added",
      "content": "                .getValueAsPrimitive()",
      "lineNo": "587"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "588"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "567",
      "newLineNo": "589"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(expected1, decodedIntegerField1);",
      "oldLineNo": "568",
      "newLineNo": "590"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(expected2, decodedIntegerField2);",
      "oldLineNo": "569",
      "newLineNo": "591"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "570",
      "newLineNo": "592"
    },
    {
      "type": "modified",
      "oldContent": " final List<Record> nestedExtList = (List<Record>) avroBunsenTestProfilePatient",
      "newContent": " final List<Record> nestedExtList = (List<Record>) avroBunsenTestProfilePatient.get(\"nestedExt\");",
      "oldLineNo": "571",
      "newLineNo": "593"
    },
    {
      "type": "deleted",
      "content": "        .get(\"nestedExt\");",
      "lineNo": "572"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "573",
      "newLineNo": "594"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "574",
      "newLineNo": "595"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "575",
      "newLineNo": "596"
    },
    {
      "type": "not-modified",
      "content": " public void testMultiNestedExtension() {",
      "oldLineNo": "576",
      "newLineNo": "597"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "577",
      "newLineNo": "598"
    },
    {
      "type": "modified",
      "oldContent": " final Extension nestedExtension1 = testBunsenTestProfilePatient",
      "newContent": " final Extension nestedExtension1 =",
      "oldLineNo": "578",
      "newLineNo": "599"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_NESTED_EXT_FIELD)",
      "newContent": " testBunsenTestProfilePatient",
      "oldLineNo": "579",
      "newLineNo": "600"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0);",
      "newContent": "            .getExtensionsByUrl(TestData.BUNSEN_TEST_NESTED_EXT_FIELD)",
      "oldLineNo": "580",
      "newLineNo": "601"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "            .get(0);",
      "oldLineNo": "581",
      "newLineNo": "602"
    },
    {
      "type": "modified",
      "oldContent": " final Extension nestedExtension2 = testBunsenTestProfilePatient",
      "newContent": "",
      "oldLineNo": "582",
      "newLineNo": "603"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_NESTED_EXT_FIELD)",
      "newContent": " final Extension nestedExtension2 =",
      "oldLineNo": "583",
      "newLineNo": "604"
    },
    {
      "type": "modified",
      "oldContent": "        .get(1);",
      "newContent": " testBunsenTestProfilePatient",
      "oldLineNo": "584",
      "newLineNo": "605"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "            .getExtensionsByUrl(TestData.BUNSEN_TEST_NESTED_EXT_FIELD)",
      "oldLineNo": "585",
      "newLineNo": "606"
    },
    {
      "type": "modified",
      "oldContent": " String text1 = nestedExtension1.getExtensionsByUrl(\"text\")",
      "newContent": "            .get(1);",
      "oldLineNo": "586",
      "newLineNo": "607"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValueAsPrimitive().getValueAsString();",
      "newContent": "",
      "oldLineNo": "587",
      "newLineNo": "608"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " String text1 =",
      "oldLineNo": "588",
      "newLineNo": "609"
    },
    {
      "type": "modified",
      "oldContent": " String text2 = nestedExtension1.getExtensionsByUrl(\"text\")",
      "newContent": " nestedExtension1.getExtensionsByUrl(\"text\").get(0).getValueAsPrimitive().getValueAsString();",
      "oldLineNo": "589",
      "newLineNo": "610"
    },
    {
      "type": "modified",
      "oldContent": "        .get(1).getValueAsPrimitive().getValueAsString();",
      "newContent": "",
      "oldLineNo": "590",
      "newLineNo": "611"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " String text2 =",
      "oldLineNo": "591",
      "newLineNo": "612"
    },
    {
      "type": "modified",
      "oldContent": " String text3 = nestedExtension2.getExtensionsByUrl(\"text\")",
      "newContent": " nestedExtension1.getExtensionsByUrl(\"text\").get(1).getValueAsPrimitive().getValueAsString();",
      "oldLineNo": "592",
      "newLineNo": "613"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValueAsPrimitive().getValueAsString();",
      "newContent": "",
      "oldLineNo": "593",
      "newLineNo": "614"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " String text3 =",
      "oldLineNo": "594",
      "newLineNo": "615"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept codeableConcept1 = (CodeableConcept) nestedExtension1",
      "newContent": " nestedExtension2.getExtensionsByUrl(\"text\").get(0).getValueAsPrimitive().getValueAsString();",
      "oldLineNo": "595",
      "newLineNo": "616"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD)",
      "newContent": "",
      "oldLineNo": "596",
      "newLineNo": "617"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValue();",
      "newContent": " CodeableConcept codeableConcept1 =",
      "oldLineNo": "597",
      "newLineNo": "618"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "        (CodeableConcept)",
      "oldLineNo": "598",
      "newLineNo": "619"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept codeableConcept2 = (CodeableConcept) nestedExtension1",
      "newContent": " nestedExtension1",
      "oldLineNo": "599",
      "newLineNo": "620"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD)",
      "newContent": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD)",
      "oldLineNo": "600",
      "newLineNo": "621"
    },
    {
      "type": "modified",
      "oldContent": "        .get(1).getValue();",
      "newContent": "                .get(0)",
      "oldLineNo": "601",
      "newLineNo": "622"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "                .getValue();",
      "oldLineNo": "602",
      "newLineNo": "623"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept codeableConcept3 = (CodeableConcept) nestedExtension2",
      "newContent": "",
      "oldLineNo": "603",
      "newLineNo": "624"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD)",
      "newContent": " CodeableConcept codeableConcept2 =",
      "oldLineNo": "604",
      "newLineNo": "625"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValue();",
      "newContent": "        (CodeableConcept)",
      "oldLineNo": "605",
      "newLineNo": "626"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " nestedExtension1",
      "oldLineNo": "606",
      "newLineNo": "627"
    },
    {
      "type": "modified",
      "oldContent": " final Extension decodedNestedExtension1 = testBunsenTestProfilePatientDecoded",
      "newContent": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD)",
      "oldLineNo": "607",
      "newLineNo": "628"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_NESTED_EXT_FIELD)",
      "newContent": "                .get(1)",
      "oldLineNo": "608",
      "newLineNo": "629"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0);",
      "newContent": "                .getValue();",
      "oldLineNo": "609",
      "newLineNo": "630"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "",
      "oldLineNo": "610",
      "newLineNo": "631"
    },
    {
      "type": "modified",
      "oldContent": " final Extension decodedNestedExtension2 = testBunsenTestProfilePatientDecoded",
      "newContent": " CodeableConcept codeableConcept3 =",
      "oldLineNo": "611",
      "newLineNo": "632"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_NESTED_EXT_FIELD)",
      "newContent": "        (CodeableConcept)",
      "oldLineNo": "612",
      "newLineNo": "633"
    },
    {
      "type": "modified",
      "oldContent": "        .get(1);",
      "newContent": " nestedExtension2",
      "oldLineNo": "613",
      "newLineNo": "634"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD)",
      "oldLineNo": "614",
      "newLineNo": "635"
    },
    {
      "type": "modified",
      "oldContent": " String decodedText1 = decodedNestedExtension1.getExtensionsByUrl(\"text\")",
      "newContent": "                .get(0)",
      "oldLineNo": "615",
      "newLineNo": "636"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValueAsPrimitive().getValueAsString();",
      "newContent": "                .getValue();",
      "oldLineNo": "616",
      "newLineNo": "637"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "",
      "oldLineNo": "617",
      "newLineNo": "638"
    },
    {
      "type": "modified",
      "oldContent": " String decodedText2 = decodedNestedExtension1.getExtensionsByUrl(\"text\")",
      "newContent": " final Extension decodedNestedExtension1 =",
      "oldLineNo": "618",
      "newLineNo": "639"
    },
    {
      "type": "modified",
      "oldContent": "        .get(1).getValueAsPrimitive().getValueAsString();",
      "newContent": " testBunsenTestProfilePatientDecoded",
      "oldLineNo": "619",
      "newLineNo": "640"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "            .getExtensionsByUrl(TestData.BUNSEN_TEST_NESTED_EXT_FIELD)",
      "oldLineNo": "620",
      "newLineNo": "641"
    },
    {
      "type": "modified",
      "oldContent": " String decodedText3 = decodedNestedExtension2.getExtensionsByUrl(\"text\")",
      "newContent": "            .get(0);",
      "oldLineNo": "621",
      "newLineNo": "642"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValueAsPrimitive().getValueAsString();",
      "newContent": "",
      "oldLineNo": "622",
      "newLineNo": "643"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " final Extension decodedNestedExtension2 =",
      "oldLineNo": "623",
      "newLineNo": "644"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept decodedCodeableConcept1 = (CodeableConcept) decodedNestedExtension1",
      "newContent": " testBunsenTestProfilePatientDecoded",
      "oldLineNo": "624",
      "newLineNo": "645"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD)",
      "newContent": "            .getExtensionsByUrl(TestData.BUNSEN_TEST_NESTED_EXT_FIELD)",
      "oldLineNo": "625",
      "newLineNo": "646"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValue();",
      "newContent": "            .get(1);",
      "oldLineNo": "626",
      "newLineNo": "647"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "",
      "oldLineNo": "627",
      "newLineNo": "648"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept decodedCodeableConcept2 = (CodeableConcept) decodedNestedExtension1",
      "newContent": " String decodedText1 =",
      "oldLineNo": "628",
      "newLineNo": "649"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD)",
      "newContent": " decodedNestedExtension1",
      "oldLineNo": "629",
      "newLineNo": "650"
    },
    {
      "type": "modified",
      "oldContent": "        .get(1).getValue();",
      "newContent": "            .getExtensionsByUrl(\"text\")",
      "oldLineNo": "630",
      "newLineNo": "651"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "            .get(0)",
      "oldLineNo": "631",
      "newLineNo": "652"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept decodedCodeableConcept3 = (CodeableConcept) decodedNestedExtension2",
      "newContent": "            .getValueAsPrimitive()",
      "oldLineNo": "632",
      "newLineNo": "653"
    },
    {
      "type": "modified",
      "oldContent": "        .getExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD)",
      "newContent": "            .getValueAsString();",
      "oldLineNo": "633",
      "newLineNo": "654"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValue();",
      "newContent": "",
      "oldLineNo": "634",
      "newLineNo": "655"
    },
    {
      "type": "added",
      "content": " String decodedText2 =",
      "lineNo": "656"
    },
    {
      "type": "added",
      "content": " decodedNestedExtension1",
      "lineNo": "657"
    },
    {
      "type": "added",
      "content": "            .getExtensionsByUrl(\"text\")",
      "lineNo": "658"
    },
    {
      "type": "added",
      "content": "            .get(1)",
      "lineNo": "659"
    },
    {
      "type": "added",
      "content": "            .getValueAsPrimitive()",
      "lineNo": "660"
    },
    {
      "type": "added",
      "content": "            .getValueAsString();",
      "lineNo": "661"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "662"
    },
    {
      "type": "added",
      "content": " String decodedText3 =",
      "lineNo": "663"
    },
    {
      "type": "added",
      "content": " decodedNestedExtension2",
      "lineNo": "664"
    },
    {
      "type": "added",
      "content": "            .getExtensionsByUrl(\"text\")",
      "lineNo": "665"
    },
    {
      "type": "added",
      "content": "            .get(0)",
      "lineNo": "666"
    },
    {
      "type": "added",
      "content": "            .getValueAsPrimitive()",
      "lineNo": "667"
    },
    {
      "type": "added",
      "content": "            .getValueAsString();",
      "lineNo": "668"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "669"
    },
    {
      "type": "added",
      "content": " CodeableConcept decodedCodeableConcept1 =",
      "lineNo": "670"
    },
    {
      "type": "added",
      "content": "        (CodeableConcept)",
      "lineNo": "671"
    },
    {
      "type": "added",
      "content": " decodedNestedExtension1",
      "lineNo": "672"
    },
    {
      "type": "added",
      "content": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD)",
      "lineNo": "673"
    },
    {
      "type": "added",
      "content": "                .get(0)",
      "lineNo": "674"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "675"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "676"
    },
    {
      "type": "added",
      "content": " CodeableConcept decodedCodeableConcept2 =",
      "lineNo": "677"
    },
    {
      "type": "added",
      "content": "        (CodeableConcept)",
      "lineNo": "678"
    },
    {
      "type": "added",
      "content": " decodedNestedExtension1",
      "lineNo": "679"
    },
    {
      "type": "added",
      "content": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD)",
      "lineNo": "680"
    },
    {
      "type": "added",
      "content": "                .get(1)",
      "lineNo": "681"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "682"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "683"
    },
    {
      "type": "added",
      "content": " CodeableConcept decodedCodeableConcept3 =",
      "lineNo": "684"
    },
    {
      "type": "added",
      "content": "        (CodeableConcept)",
      "lineNo": "685"
    },
    {
      "type": "added",
      "content": " decodedNestedExtension2",
      "lineNo": "686"
    },
    {
      "type": "added",
      "content": "                .getExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD)",
      "lineNo": "687"
    },
    {
      "type": "added",
      "content": "                .get(0)",
      "lineNo": "688"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "689"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "635",
      "newLineNo": "690"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(text1, decodedText1);",
      "oldLineNo": "636",
      "newLineNo": "691"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(text2, decodedText2);",
      "oldLineNo": "637",
      "newLineNo": "692"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(codeableConcept2.equalsDeep(decodedCodeableConcept2));",
      "oldLineNo": "641",
      "newLineNo": "696"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(codeableConcept3.equalsDeep(decodedCodeableConcept3));",
      "oldLineNo": "642",
      "newLineNo": "697"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "643",
      "newLineNo": "698"
    },
    {
      "type": "modified",
      "oldContent": " final List<Record> nestedExtList = (List<Record>) avroBunsenTestProfilePatient",
      "newContent": " final List<Record> nestedExtList = (List<Record>) avroBunsenTestProfilePatient.get(\"nestedExt\");",
      "oldLineNo": "644",
      "newLineNo": "699"
    },
    {
      "type": "deleted",
      "content": "        .get(\"nestedExt\");",
      "lineNo": "645"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "646",
      "newLineNo": "700"
    },
    {
      "type": "not-modified",
      "content": " final Record nestedExt1 = nestedExtList.get(0);",
      "oldLineNo": "647",
      "newLineNo": "701"
    },
    {
      "type": "not-modified",
      "content": " final Record nestedExt2 = nestedExtList.get(1);",
      "oldLineNo": "648",
      "newLineNo": "702"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(text2, textList1.get(1));",
      "oldLineNo": "657",
      "newLineNo": "711"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(text3, textList2.get(0));",
      "oldLineNo": "658",
      "newLineNo": "712"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "659",
      "newLineNo": "713"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(codeableConcept1.getCoding().get(0).getCode(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "660",
      "newLineNo": "714"
    },
    {
      "type": "modified",
      "oldContent": "        ((List<Record>)codeableConceptsList1.get(0).get(\"coding\")).get(0).get(\"code\"));",
      "newContent": " codeableConcept1.getCoding().get(0).getCode(),",
      "oldLineNo": "661",
      "newLineNo": "715"
    },
    {
      "type": "added",
      "content": "        ((List<Record>) codeableConceptsList1.get(0).get(\"coding\")).get(0).get(\"code\"));",
      "lineNo": "716"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "662",
      "newLineNo": "717"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(codeableConcept2.getCoding().get(0).getCode(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "663",
      "newLineNo": "718"
    },
    {
      "type": "modified",
      "oldContent": "        ((List<Record>)codeableConceptsList1.get(1).get(\"coding\")).get(0).get(\"code\"));",
      "newContent": " codeableConcept2.getCoding().get(0).getCode(),",
      "oldLineNo": "664",
      "newLineNo": "719"
    },
    {
      "type": "added",
      "content": "        ((List<Record>) codeableConceptsList1.get(1).get(\"coding\")).get(0).get(\"code\"));",
      "lineNo": "720"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "665",
      "newLineNo": "721"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(codeableConcept3.getCoding().get(0).getCode(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "666",
      "newLineNo": "722"
    },
    {
      "type": "modified",
      "oldContent": "        ((List<Record>)codeableConceptsList2.get(0).get(\"coding\")).get(0).get(\"code\"));",
      "newContent": " codeableConcept3.getCoding().get(0).getCode(),",
      "oldLineNo": "667",
      "newLineNo": "723"
    },
    {
      "type": "added",
      "content": "        ((List<Record>) codeableConceptsList2.get(0).get(\"coding\")).get(0).get(\"code\"));",
      "lineNo": "724"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "668",
      "newLineNo": "725"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "669",
      "newLineNo": "726"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "670",
      "newLineNo": "727"
    },
    {
      "type": "not-modified",
      "content": " public void testSimpleModifierExtensionWithStringField() {",
      "oldLineNo": "671",
      "newLineNo": "728"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "672",
      "newLineNo": "729"
    },
    {
      "type": "modified",
      "oldContent": " String expected = (String) testBunsenTestProfilePatient",
      "newContent": " String expected =",
      "oldLineNo": "673",
      "newLineNo": "730"
    },
    {
      "type": "modified",
      "oldContent": "        .getModifierExtensionsByUrl(TestData.BUNSEN_TEST_STRING_MODIFIER_EXT_FIELD)",
      "newContent": "        (String)",
      "oldLineNo": "674",
      "newLineNo": "731"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValueAsPrimitive().getValue();",
      "newContent": " testBunsenTestProfilePatient",
      "oldLineNo": "675",
      "newLineNo": "732"
    },
    {
      "type": "added",
      "content": "                .getModifierExtensionsByUrl(TestData.BUNSEN_TEST_STRING_MODIFIER_EXT_FIELD)",
      "lineNo": "733"
    },
    {
      "type": "added",
      "content": "                .get(0)",
      "lineNo": "734"
    },
    {
      "type": "added",
      "content": "                .getValueAsPrimitive()",
      "lineNo": "735"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "736"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "676",
      "newLineNo": "737"
    },
    {
      "type": "not-modified",
      "content": " String actual = (String) avroBunsenTestProfilePatient.get(\"stringModifierExt\");",
      "oldLineNo": "677",
      "newLineNo": "738"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "678",
      "newLineNo": "739"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(expected, actual);",
      "oldLineNo": "679",
      "newLineNo": "740"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "680",
      "newLineNo": "741"
    },
    {
      "type": "modified",
      "oldContent": " String decodedStringField = (String) testBunsenTestProfilePatientDecoded",
      "newContent": " String decodedStringField =",
      "oldLineNo": "681",
      "newLineNo": "742"
    },
    {
      "type": "modified",
      "oldContent": "        .getModifierExtensionsByUrl(TestData.BUNSEN_TEST_STRING_MODIFIER_EXT_FIELD)",
      "newContent": "        (String)",
      "oldLineNo": "682",
      "newLineNo": "743"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValueAsPrimitive().getValue();",
      "newContent": " testBunsenTestProfilePatientDecoded",
      "oldLineNo": "683",
      "newLineNo": "744"
    },
    {
      "type": "added",
      "content": "                .getModifierExtensionsByUrl(TestData.BUNSEN_TEST_STRING_MODIFIER_EXT_FIELD)",
      "lineNo": "745"
    },
    {
      "type": "added",
      "content": "                .get(0)",
      "lineNo": "746"
    },
    {
      "type": "added",
      "content": "                .getValueAsPrimitive()",
      "lineNo": "747"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "748"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "684",
      "newLineNo": "749"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(expected, decodedStringField);",
      "oldLineNo": "685",
      "newLineNo": "750"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "686",
      "newLineNo": "751"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "687",
      "newLineNo": "752"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "688",
      "newLineNo": "753"
    },
    {
      "type": "not-modified",
      "content": " public void testMultiModifierExtensionsWithCodeableConceptField() {",
      "oldLineNo": "689",
      "newLineNo": "754"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "690",
      "newLineNo": "755"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept expected1 = (CodeableConcept) testBunsenTestProfilePatient",
      "newContent": " CodeableConcept expected1 =",
      "oldLineNo": "691",
      "newLineNo": "756"
    },
    {
      "type": "modified",
      "oldContent": "        .getModifierExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_MODIFIER_EXT_FIELD)",
      "newContent": "        (CodeableConcept)",
      "oldLineNo": "692",
      "newLineNo": "757"
    },
    {
      "type": "modified",
      "oldContent": "        .get(0).getValue();",
      "newContent": " testBunsenTestProfilePatient",
      "oldLineNo": "693",
      "newLineNo": "758"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "                .getModifierExtensionsByUrl(",
      "oldLineNo": "694",
      "newLineNo": "759"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept expected2 = (CodeableConcept) testBunsenTestProfilePatient",
      "newContent": " TestData.BUNSEN_TEST_CODEABLE_CONCEPT_MODIFIER_EXT_FIELD)",
      "oldLineNo": "695",
      "newLineNo": "760"
    },
    {
      "type": "modified",
      "oldContent": "        .getModifierExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_MODIFIER_EXT_FIELD)",
      "newContent": "                .get(0)",
      "oldLineNo": "696",
      "newLineNo": "761"
    },
    {
      "type": "modified",
      "oldContent": "        .get(1).getValue();",
      "newContent": "                .getValue();",
      "oldLineNo": "697",
      "newLineNo": "762"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "763"
    },
    {
      "type": "added",
      "content": " CodeableConcept expected2 =",
      "lineNo": "764"
    },
    {
      "type": "added",
      "content": "        (CodeableConcept)",
      "lineNo": "765"
    },
    {
      "type": "added",
      "content": " testBunsenTestProfilePatient",
      "lineNo": "766"
    },
    {
      "type": "added",
      "content": "                .getModifierExtensionsByUrl(",
      "lineNo": "767"
    },
    {
      "type": "added",
      "content": " TestData.BUNSEN_TEST_CODEABLE_CONCEPT_MODIFIER_EXT_FIELD)",
      "lineNo": "768"
    },
    {
      "type": "added",
      "content": "                .get(1)",
      "lineNo": "769"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "770"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "698",
      "newLineNo": "771"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept decodedCodeableConceptField1 =",
      "oldLineNo": "699",
      "newLineNo": "772"
    },
    {
      "type": "modified",
      "oldContent": "        (CodeableConcept) testBunsenTestProfilePatientDecoded",
      "newContent": "        (CodeableConcept)",
      "oldLineNo": "700",
      "newLineNo": "773"
    },
    {
      "type": "modified",
      "oldContent": "            .getModifierExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_MODIFIER_EXT_FIELD)",
      "newContent": " testBunsenTestProfilePatientDecoded",
      "oldLineNo": "701",
      "newLineNo": "774"
    },
    {
      "type": "modified",
      "oldContent": "            .get(0).getValue();",
      "newContent": "                .getModifierExtensionsByUrl(",
      "oldLineNo": "702",
      "newLineNo": "775"
    },
    {
      "type": "added",
      "content": " TestData.BUNSEN_TEST_CODEABLE_CONCEPT_MODIFIER_EXT_FIELD)",
      "lineNo": "776"
    },
    {
      "type": "added",
      "content": "                .get(0)",
      "lineNo": "777"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "778"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "703",
      "newLineNo": "779"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept decodedCodeableConceptField2 =",
      "oldLineNo": "704",
      "newLineNo": "780"
    },
    {
      "type": "modified",
      "oldContent": "        (CodeableConcept) testBunsenTestProfilePatientDecoded",
      "newContent": "        (CodeableConcept)",
      "oldLineNo": "705",
      "newLineNo": "781"
    },
    {
      "type": "modified",
      "oldContent": "            .getModifierExtensionsByUrl(TestData.BUNSEN_TEST_CODEABLE_CONCEPT_MODIFIER_EXT_FIELD)",
      "newContent": " testBunsenTestProfilePatientDecoded",
      "oldLineNo": "706",
      "newLineNo": "782"
    },
    {
      "type": "modified",
      "oldContent": "            .get(1).getValue();",
      "newContent": "                .getModifierExtensionsByUrl(",
      "oldLineNo": "707",
      "newLineNo": "783"
    },
    {
      "type": "added",
      "content": " TestData.BUNSEN_TEST_CODEABLE_CONCEPT_MODIFIER_EXT_FIELD)",
      "lineNo": "784"
    },
    {
      "type": "added",
      "content": "                .get(1)",
      "lineNo": "785"
    },
    {
      "type": "added",
      "content": "                .getValue();",
      "lineNo": "786"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "708",
      "newLineNo": "787"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(expected1.equalsDeep(decodedCodeableConceptField1));",
      "oldLineNo": "709",
      "newLineNo": "788"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertTrue(expected2.equalsDeep(decodedCodeableConceptField2));",
      "oldLineNo": "710",
      "newLineNo": "789"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "711",
      "newLineNo": "790"
    },
    {
      "type": "modified",
      "oldContent": " final List<Record> codeableConceptList = (List<Record>) avroBunsenTestProfilePatient",
      "newContent": " final List<Record> codeableConceptList =",
      "oldLineNo": "712",
      "newLineNo": "791"
    },
    {
      "type": "modified",
      "oldContent": "        .get(\"codeableConceptModifierExt\");",
      "newContent": " (List<Record>) avroBunsenTestProfilePatient.get(\"codeableConceptModifierExt\");",
      "oldLineNo": "713",
      "newLineNo": "792"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "714",
      "newLineNo": "793"
    },
    {
      "type": "not-modified",
      "content": " final Record codeableConcept1 = codeableConceptList.get(0);",
      "oldLineNo": "715",
      "newLineNo": "794"
    },
    {
      "type": "not-modified",
      "content": " final Record codeableConcept2 = codeableConceptList.get(1);",
      "oldLineNo": "716",
      "newLineNo": "795"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "717",
      "newLineNo": "796"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(decodedCodeableConceptField1.getCoding().get(0).getSystem(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "718",
      "newLineNo": "797"
    },
    {
      "type": "modified",
      "oldContent": "        ((List<Record>)codeableConcept1.get(\"coding\")).get(0).get(\"system\"));",
      "newContent": " decodedCodeableConceptField1.getCoding().get(0).getSystem(),",
      "oldLineNo": "719",
      "newLineNo": "798"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(decodedCodeableConceptField1.getCoding().get(0).getCode(),",
      "newContent": "        ((List<Record>) codeableConcept1.get(\"coding\")).get(0).get(\"system\"));",
      "oldLineNo": "720",
      "newLineNo": "799"
    },
    {
      "type": "modified",
      "oldContent": "        ((List<Record>)codeableConcept1.get(\"coding\")).get(0).get(\"code\"));",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "721",
      "newLineNo": "800"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(decodedCodeableConceptField1.getCoding().get(0).getDisplay(),",
      "newContent": " decodedCodeableConceptField1.getCoding().get(0).getCode(),",
      "oldLineNo": "722",
      "newLineNo": "801"
    },
    {
      "type": "modified",
      "oldContent": "        ((List<Record>)codeableConcept1.get(\"coding\")).get(0).get(\"display\"));",
      "newContent": "        ((List<Record>) codeableConcept1.get(\"coding\")).get(0).get(\"code\"));",
      "oldLineNo": "723",
      "newLineNo": "802"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "724",
      "newLineNo": "803"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(decodedCodeableConceptField2.getCoding().get(0).getSystem(),",
      "newContent": " decodedCodeableConceptField1.getCoding().get(0).getDisplay(),",
      "oldLineNo": "725",
      "newLineNo": "804"
    },
    {
      "type": "modified",
      "oldContent": "        ((List<Record>)codeableConcept2.get(\"coding\")).get(0).get(\"system\"));",
      "newContent": "        ((List<Record>) codeableConcept1.get(\"coding\")).get(0).get(\"display\"));",
      "oldLineNo": "726",
      "newLineNo": "805"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(decodedCodeableConceptField2.getCoding().get(0).getCode(),",
      "newContent": "",
      "oldLineNo": "727",
      "newLineNo": "806"
    },
    {
      "type": "modified",
      "oldContent": "        ((List<Record>)codeableConcept2.get(\"coding\")).get(0).get(\"code\"));",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "728",
      "newLineNo": "807"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(decodedCodeableConceptField2.getCoding().get(0).getDisplay(),",
      "newContent": " decodedCodeableConceptField2.getCoding().get(0).getSystem(),",
      "oldLineNo": "729",
      "newLineNo": "808"
    },
    {
      "type": "modified",
      "oldContent": "        ((List<Record>)codeableConcept2.get(\"coding\")).get(0).get(\"display\"));",
      "newContent": "        ((List<Record>) codeableConcept2.get(\"coding\")).get(0).get(\"system\"));",
      "oldLineNo": "730",
      "newLineNo": "809"
    },
    {
      "type": "added",
      "content": " Assert.assertEquals(",
      "lineNo": "810"
    },
    {
      "type": "added",
      "content": " decodedCodeableConceptField2.getCoding().get(0).getCode(),",
      "lineNo": "811"
    },
    {
      "type": "added",
      "content": "        ((List<Record>) codeableConcept2.get(\"coding\")).get(0).get(\"code\"));",
      "lineNo": "812"
    },
    {
      "type": "added",
      "content": " Assert.assertEquals(",
      "lineNo": "813"
    },
    {
      "type": "added",
      "content": " decodedCodeableConceptField2.getCoding().get(0).getDisplay(),",
      "lineNo": "814"
    },
    {
      "type": "added",
      "content": "        ((List<Record>) codeableConcept2.get(\"coding\")).get(0).get(\"display\"));",
      "lineNo": "815"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "731",
      "newLineNo": "816"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "732",
      "newLineNo": "817"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "733",
      "newLineNo": "818"
    },
    {
      "type": "not-modified",
      "content": " public void testMetaElement() {",
      "oldLineNo": "734",
      "newLineNo": "819"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "735",
      "newLineNo": "820"
    },
    {
      "type": "modified",
      "oldContent": " String id =  testPatient.getId();",
      "newContent": " String id = testPatient.getId();",
      "oldLineNo": "736",
      "newLineNo": "821"
    },
    {
      "type": "not-modified",
      "content": " Meta meta = testPatient.getMeta();",
      "oldLineNo": "737",
      "newLineNo": "822"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "738",
      "newLineNo": "823"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(id, testPatientDecoded.getId());",
      "oldLineNo": "739",
      "newLineNo": "824"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "740",
      "newLineNo": "825"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(meta.getTag().size(), testPatientDecoded.getMeta().getTag().size());",
      "oldLineNo": "741",
      "newLineNo": "826"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(meta.getTag().get(0).getCode(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "742",
      "newLineNo": "827"
    },
    {
      "type": "modified",
      "oldContent": " testPatientDecoded.getMeta().getTag().get(0).getCode());",
      "newContent": " meta.getTag().get(0).getCode(), testPatientDecoded.getMeta().getTag().get(0).getCode());",
      "oldLineNo": "743",
      "newLineNo": "828"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(meta.getTag().get(0).getSystem(),",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "744",
      "newLineNo": "829"
    },
    {
      "type": "modified",
      "oldContent": " testPatientDecoded.getMeta().getTag().get(0).getSystem());",
      "newContent": " meta.getTag().get(0).getSystem(), testPatientDecoded.getMeta().getTag().get(0).getSystem());",
      "oldLineNo": "745",
      "newLineNo": "830"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "746",
      "newLineNo": "831"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "747",
      "newLineNo": "832"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "25",
      "newLineNo": "25"
    },
    {
      "type": "not-modified",
      "content": " Path outputFile = generatedCodePath.resolve(\"out.asvc\");",
      "oldLineNo": "26",
      "newLineNo": "26"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "27",
      "newLineNo": "27"
    },
    {
      "type": "modified",
      "oldContent": " int result = GenerateSchemas.main(new String[]",
      "newContent": " int result =",
      "oldLineNo": "28",
      "newLineNo": "28"
    },
    {
      "type": "modified",
      "oldContent": "        {outputFile.toString(),",
      "newContent": " GenerateSchemas.main(",
      "oldLineNo": "29",
      "newLineNo": "29"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_PATIENT,",
      "newContent": " new String[] {",
      "oldLineNo": "30",
      "newLineNo": "30"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_CONDITION,",
      "newContent": " outputFile.toString(),",
      "oldLineNo": "31",
      "newLineNo": "31"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_MEDICATION,",
      "newContent": " TestData.US_CORE_PATIENT,",
      "oldLineNo": "32",
      "newLineNo": "32"
    },
    {
      "type": "modified",
      "oldContent": " TestData.US_CORE_MEDICATION_REQUEST});",
      "newContent": " TestData.US_CORE_CONDITION,",
      "oldLineNo": "33",
      "newLineNo": "33"
    },
    {
      "type": "added",
      "content": " TestData.US_CORE_MEDICATION,",
      "lineNo": "34"
    },
    {
      "type": "added",
      "content": " TestData.US_CORE_MEDICATION_REQUEST",
      "lineNo": "35"
    },
    {
      "type": "added",
      "content": "            });",
      "lineNo": "36"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "34",
      "newLineNo": "37"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(0, result);",
      "oldLineNo": "35",
      "newLineNo": "38"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "36",
      "newLineNo": "39"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "45",
      "newLineNo": "48"
    },
    {
      "type": "not-modified",
      "content": " public void testGenerateContainedUrlsWithStringWithoutSemicolonReturnsEmptyList() {",
      "oldLineNo": "46",
      "newLineNo": "49"
    },
    {
      "type": "not-modified",
      "content": " String testResource = BASE_TEST_URL;",
      "oldLineNo": "47",
      "newLineNo": "50"
    },
    {
      "type": "modified",
      "oldContent": " Assert.assertEquals(Collections.emptyList(), ",
      "newContent": " Assert.assertEquals(",
      "oldLineNo": "48",
      "newLineNo": "51"
    },
    {
      "type": "modified",
      "oldContent": " GenerateSchemas.generateContainedUrls(testResource));",
      "newContent": " Collections.emptyList(), GenerateSchemas.generateContainedUrls(testResource));",
      "oldLineNo": "49",
      "newLineNo": "52"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "50",
      "newLineNo": "53"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "51",
      "newLineNo": "54"
    },
    {
      "type": "not-modified",
      "content": " @Test",
      "oldLineNo": "52",
      "newLineNo": "55"
    },
    {
      "type": "not-modified",
      "content": " public void testGenerateContainedUrlsWithStringWithOneContainedResource() {",
      "oldLineNo": "53",
      "newLineNo": "56"
    },
    {
      "type": "modified",
      "oldContent": " String testResourceWithContained = ",
      "newContent": " String testResourceWithContained =",
      "oldLineNo": "54",
      "newLineNo": "57"
    },
    {
      "type": "not-modified",
      "content": " BASE_TEST_URL + GenerateSchemas.DELIMITER + \"http://test.org/test_contained\";",
      "oldLineNo": "55",
      "newLineNo": "58"
    },
    {
      "type": "modified",
      "oldContent": " List<String> testContainedList = ",
      "newContent": " List<String> testContainedList =",
      "oldLineNo": "56",
      "newLineNo": "59"
    },
    {
      "type": "not-modified",
      "content": " GenerateSchemas.generateContainedUrls(testResourceWithContained);",
      "oldLineNo": "57",
      "newLineNo": "60"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "58",
      "newLineNo": "61"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(1, testContainedList.size());",
      "oldLineNo": "59",
      "newLineNo": "62"
    },
    {
      "type": "not-modified",
      "content": " joiner.add(curr);",
      "oldLineNo": "72",
      "newLineNo": "75"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "73",
      "newLineNo": "76"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "74",
      "newLineNo": "77"
    },
    {
      "type": "modified",
      "oldContent": " List<String> testContainedList =",
      "newContent": " List<String> testContainedList = GenerateSchemas.generateContainedUrls(joiner.toString());",
      "oldLineNo": "75",
      "newLineNo": "78"
    },
    {
      "type": "deleted",
      "content": " GenerateSchemas.generateContainedUrls(joiner.toString());",
      "lineNo": "76"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "77",
      "newLineNo": "79"
    },
    {
      "type": "not-modified",
      "content": " Assert.assertEquals(Arrays.asList(originalList), testContainedList);",
      "oldLineNo": "78",
      "newLineNo": "80"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "79",
      "newLineNo": "81"
    },
    {
      "type": "not-modified",
      "content": "// This is non-trivial because FHIR ElementDefinition objects do not share the same interface for",
      "oldLineNo": "18",
      "newLineNo": "18"
    },
    {
      "type": "not-modified",
      "content": "// different FHIR versions.",
      "oldLineNo": "19",
      "newLineNo": "19"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "20",
      "newLineNo": "20"
    },
    {
      "type": "modified",
      "oldContent": "/**",
      "newContent": "/** {@link StructureDefinitions} implementation for FHIR R4. */",
      "oldLineNo": "21",
      "newLineNo": "21"
    },
    {
      "type": "deleted",
      "content": " * {@link StructureDefinitions} implementation for FHIR R4.",
      "lineNo": "22"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "23"
    },
    {
      "type": "not-modified",
      "content": "public class R4StructureDefinitions extends StructureDefinitions {",
      "oldLineNo": "24",
      "newLineNo": "22"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "25",
      "newLineNo": "23"
    },
    {
      "type": "not-modified",
      "content": " private static final Logger log = LoggerFactory.getLogger(R4StructureDefinitions.class);",
      "oldLineNo": "26",
      "newLineNo": "24"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "70",
      "newLineNo": "68"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "71",
      "newLineNo": "69"
    },
    {
      "type": "not-modified",
      "content": " public List<IElementDefinition> getSnapshotDefinitions() {",
      "oldLineNo": "72",
      "newLineNo": "70"
    },
    {
      "type": "modified",
      "oldContent": " return structureDefinition.getSnapshot().getElement().stream().map(",
      "newContent": " return structureDefinition.getSnapshot().getElement().stream()",
      "oldLineNo": "73",
      "newLineNo": "71"
    },
    {
      "type": "modified",
      "oldContent": " d -> new ElementDefinitionWrapper(d)).collect(Collectors.toList());",
      "newContent": "          .map(d -> new ElementDefinitionWrapper(d))",
      "oldLineNo": "74",
      "newLineNo": "72"
    },
    {
      "type": "added",
      "content": "          .collect(Collectors.toList());",
      "lineNo": "73"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "75",
      "newLineNo": "74"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "76",
      "newLineNo": "75"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "77",
      "newLineNo": "76"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "114",
      "newLineNo": "113"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "115",
      "newLineNo": "114"
    },
    {
      "type": "not-modified",
      "content": " public List<String> getAllTypeCodes() {",
      "oldLineNo": "116",
      "newLineNo": "115"
    },
    {
      "type": "modified",
      "oldContent": " return elementDefinition.getType().stream().map(",
      "newContent": " return elementDefinition.getType().stream()",
      "oldLineNo": "117",
      "newLineNo": "116"
    },
    {
      "type": "modified",
      "oldContent": " t -> t.getCode()).collect(Collectors.toList());",
      "newContent": "          .map(t -> t.getCode())",
      "oldLineNo": "118",
      "newLineNo": "117"
    },
    {
      "type": "added",
      "content": "          .collect(Collectors.toList());",
      "lineNo": "118"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "119",
      "newLineNo": "119"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "120",
      "newLineNo": "120"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "121",
      "newLineNo": "121"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "138",
      "newLineNo": "138"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "139",
      "newLineNo": "139"
    },
    {
      "type": "not-modified",
      "content": " public List<String> getReferenceTargetProfiles() {",
      "oldLineNo": "140",
      "newLineNo": "140"
    },
    {
      "type": "modified",
      "oldContent": " return elementDefinition.getType()",
      "newContent": " return elementDefinition.getType().stream()",
      "oldLineNo": "141",
      "newLineNo": "141"
    },
    {
      "type": "deleted",
      "content": "          .stream()",
      "lineNo": "142"
    },
    {
      "type": "not-modified",
      "content": "          .filter(type -> \"Reference\".equals(type.getCode()))",
      "oldLineNo": "143",
      "newLineNo": "142"
    },
    {
      "type": "not-modified",
      "content": "          .filter(type -> type.getTargetProfile() != null)",
      "oldLineNo": "144",
      "newLineNo": "143"
    },
    {
      "type": "not-modified",
      "content": "          .map(type -> type.getTargetProfile())",
      "oldLineNo": "145",
      "newLineNo": "144"
    },
    {
      "type": "not-modified",
      "content": " public String getFirstTypeProfile() {",
      "oldLineNo": "155",
      "newLineNo": "154"
    },
    {
      "type": "not-modified",
      "content": " List<CanonicalType> profiles = elementDefinition.getTypeFirstRep().getProfile();",
      "oldLineNo": "156",
      "newLineNo": "155"
    },
    {
      "type": "not-modified",
      "content": " if (profiles == null || profiles.isEmpty()) {",
      "oldLineNo": "157",
      "newLineNo": "156"
    },
    {
      "type": "modified",
      "oldContent": " return  null;",
      "newContent": " return null;",
      "oldLineNo": "158",
      "newLineNo": "157"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "159",
      "newLineNo": "158"
    },
    {
      "type": "not-modified",
      "content": " return profiles.get(0).getValue();",
      "oldLineNo": "160",
      "newLineNo": "159"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "161",
      "newLineNo": "160"
    },
    {
      "type": "not-modified",
      "content": " public String toString() {",
      "oldLineNo": "164",
      "newLineNo": "163"
    },
    {
      "type": "not-modified",
      "content": " return elementDefinition.toString();",
      "oldLineNo": "165",
      "newLineNo": "164"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "166",
      "newLineNo": "165"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "167"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "168",
      "newLineNo": "166"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "169"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "170",
      "newLineNo": "167"
    },
    {
      "type": "not-modified",
      "content": "/**",
      "oldLineNo": "1",
      "newLineNo": "1"
    },
    {
      "type": "modified",
      "oldContent": " * Support for translating FHIR STU3 resources. Most users won't use this directly, but",
      "newContent": " * Support for translating FHIR STU3 resources. Most users won't use this directly, but rather use",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "modified",
      "oldContent": " * rather use the bunsen-spark API or similar libraries.",
      "newContent": " * the bunsen-spark API or similar libraries.",
      "oldLineNo": "3",
      "newLineNo": "3"
    },
    {
      "type": "not-modified",
      "content": " */",
      "oldLineNo": "4",
      "newLineNo": "4"
    },
    {
      "type": "not-modified",
      "content": "package com.cerner.bunsen.definitions.r4;",
      "oldLineNo": "5",
      "newLineNo": "5"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.utilities.xhtml.NodeType;",
      "oldLineNo": "34",
      "newLineNo": "34"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.utilities.xhtml.XhtmlNode;",
      "oldLineNo": "35",
      "newLineNo": "35"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "36",
      "newLineNo": "36"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": "/** Common test resources for Bunsen R4 usage. */",
      "oldLineNo": "37",
      "newLineNo": "37"
    },
    {
      "type": "deleted",
      "content": "/**",
      "lineNo": "38"
    },
    {
      "type": "deleted",
      "content": " * Common test resources for Bunsen R4 usage.",
      "lineNo": "39"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "40"
    },
    {
      "type": "not-modified",
      "content": "public class TestData {",
      "oldLineNo": "41",
      "newLineNo": "38"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "42",
      "newLineNo": "39"
    },
    {
      "type": "modified",
      "oldContent": " public static final String US_CORE_BIRTHSEX",
      "newContent": " public static final String US_CORE_BIRTHSEX =",
      "oldLineNo": "43",
      "newLineNo": "40"
    },
    {
      "type": "modified",
      "oldContent": " = \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\";",
      "newContent": " \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\";",
      "oldLineNo": "44",
      "newLineNo": "41"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "45",
      "newLineNo": "42"
    },
    {
      "type": "modified",
      "oldContent": " public static final String US_CORE_ETHNICITY",
      "newContent": " public static final String US_CORE_ETHNICITY =",
      "oldLineNo": "46",
      "newLineNo": "43"
    },
    {
      "type": "modified",
      "oldContent": " = \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\";",
      "newContent": " \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\";",
      "oldLineNo": "47",
      "newLineNo": "44"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "48",
      "newLineNo": "45"
    },
    {
      "type": "not-modified",
      "content": " public static final String US_CORE_PATIENT =",
      "oldLineNo": "49",
      "newLineNo": "46"
    },
    {
      "type": "not-modified",
      "content": " \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient\";",
      "oldLineNo": "50",
      "newLineNo": "47"
    },
    {
      "type": "not-modified",
      "content": " public static final String US_CORE_MEDICATION_REQUEST =",
      "oldLineNo": "61",
      "newLineNo": "58"
    },
    {
      "type": "not-modified",
      "content": " \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-medicationrequest\";",
      "oldLineNo": "62",
      "newLineNo": "59"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "63",
      "newLineNo": "60"
    },
    {
      "type": "modified",
      "oldContent": " public static final String PROVENANCE =",
      "newContent": " public static final String PROVENANCE = \"http://hl7.org/fhir/StructureDefinition/Provenance\";",
      "oldLineNo": "64",
      "newLineNo": "61"
    },
    {
      "type": "deleted",
      "content": " \"http://hl7.org/fhir/StructureDefinition/Provenance\";",
      "lineNo": "65"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "66",
      "newLineNo": "62"
    },
    {
      "type": "modified",
      "oldContent": " public static final String VALUE_SET =",
      "newContent": " public static final String VALUE_SET = \"http://hl7.org/fhir/StructureDefinition/ValueSet\";",
      "oldLineNo": "67",
      "newLineNo": "63"
    },
    {
      "type": "deleted",
      "content": " \"http://hl7.org/fhir/StructureDefinition/ValueSet\";",
      "lineNo": "68"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "69",
      "newLineNo": "64"
    },
    {
      "type": "not-modified",
      "content": " // TODO add test profile for R4: https://github.com/google/fhir-data-pipes/issues/558",
      "oldLineNo": "70",
      "newLineNo": "65"
    },
    {
      "type": "not-modified",
      "content": " // public static final String BUNSEN_TEST_PATIENT =",
      "oldLineNo": "71",
      "newLineNo": "66"
    },
    {
      "type": "not-modified",
      "content": " //     \"http://hl7.org/fhir/bunsen/test/StructureDefinition/bunsen-test-nested-extension\";",
      "oldLineNo": "84",
      "newLineNo": "79"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "85",
      "newLineNo": "80"
    },
    {
      "type": "not-modified",
      "content": " // public static final String BUNSEN_TEST_CODEABLE_CONCEPT_EXT_FIELD =",
      "oldLineNo": "86",
      "newLineNo": "81"
    },
    {
      "type": "modified",
      "oldContent": " //     \"http://hl7.org/fhir/bunsen/test/StructureDefinition/bunsen-test-codeableConcept-extension\";",
      "newContent": " //",
      "oldLineNo": "87",
      "newLineNo": "82"
    },
    {
      "type": "added",
      "content": " // \"http://hl7.org/fhir/bunsen/test/StructureDefinition/bunsen-test-codeableConcept-extension\";",
      "lineNo": "83"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "88",
      "newLineNo": "84"
    },
    {
      "type": "not-modified",
      "content": " // public static final String BUNSEN_TEST_CODEABLE_CONCEPT_MODIFIER_EXT_FIELD =",
      "oldLineNo": "89",
      "newLineNo": "85"
    },
    {
      "type": "not-modified",
      "content": " //     \"http://hl7.org/fhir/bunsen/test/StructureDefinition/\"",
      "oldLineNo": "90",
      "newLineNo": "86"
    },
    {
      "type": "not-modified",
      "content": " // TODO",
      "oldLineNo": "122",
      "newLineNo": "118"
    },
    {
      "type": "not-modified",
      "content": " // condition.setVerificationStatus(Condition.ConditionVerificationStatus.CONFIRMED);",
      "oldLineNo": "123",
      "newLineNo": "119"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept verStatus = new CodeableConcept();",
      "oldLineNo": "124",
      "newLineNo": "120"
    },
    {
      "type": "modified",
      "oldContent": " verStatus.addCoding().setSystem(\"http://terminology.hl7.org/CodeSystem/condition-ver-status\")",
      "newContent": " verStatus",
      "oldLineNo": "125",
      "newLineNo": "121"
    },
    {
      "type": "modified",
      "oldContent": "            .setCode(\"confirmed\");",
      "newContent": "        .addCoding()",
      "oldLineNo": "126",
      "newLineNo": "122"
    },
    {
      "type": "added",
      "content": "        .setSystem(\"http://terminology.hl7.org/CodeSystem/condition-ver-status\")",
      "lineNo": "123"
    },
    {
      "type": "added",
      "content": "        .setCode(\"confirmed\");",
      "lineNo": "124"
    },
    {
      "type": "not-modified",
      "content": " condition.setVerificationStatus(verStatus);",
      "oldLineNo": "127",
      "newLineNo": "125"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "128",
      "newLineNo": "126"
    },
    {
      "type": "not-modified",
      "content": " // Condition code",
      "oldLineNo": "129",
      "newLineNo": "127"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept code = new CodeableConcept();",
      "oldLineNo": "130",
      "newLineNo": "128"
    },
    {
      "type": "modified",
      "oldContent": " code.addCoding()",
      "newContent": " code.addCoding().setSystem(\"http://snomed.info/sct\").setCode(\"39065001\").setDisplay(\"Severe\");",
      "oldLineNo": "131",
      "newLineNo": "129"
    },
    {
      "type": "deleted",
      "content": "        .setSystem(\"http://snomed.info/sct\")",
      "lineNo": "132"
    },
    {
      "type": "deleted",
      "content": "        .setCode(\"39065001\")",
      "lineNo": "133"
    },
    {
      "type": "deleted",
      "content": "        .setDisplay(\"Severe\");",
      "lineNo": "134"
    },
    {
      "type": "not-modified",
      "content": " condition.setSeverity(code);",
      "oldLineNo": "135",
      "newLineNo": "130"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "136",
      "newLineNo": "131"
    },
    {
      "type": "not-modified",
      "content": " // Severity code",
      "oldLineNo": "137",
      "newLineNo": "132"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept severity = new CodeableConcept();",
      "oldLineNo": "138",
      "newLineNo": "133"
    },
    {
      "type": "modified",
      "oldContent": " severity.addCoding()",
      "newContent": " severity",
      "oldLineNo": "139",
      "newLineNo": "134"
    },
    {
      "type": "added",
      "content": "        .addCoding()",
      "lineNo": "135"
    },
    {
      "type": "not-modified",
      "content": "        .setSystem(\"http://snomed.info/sct\")",
      "oldLineNo": "140",
      "newLineNo": "136"
    },
    {
      "type": "not-modified",
      "content": "        .setCode(\"24484000\")",
      "oldLineNo": "141",
      "newLineNo": "137"
    },
    {
      "type": "not-modified",
      "content": "        .setDisplay(\"Burn of ear\")",
      "oldLineNo": "142",
      "newLineNo": "138"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "179",
      "newLineNo": "175"
    },
    {
      "type": "not-modified",
      "content": " ObservationComponentComponent component = observation.addComponent();",
      "oldLineNo": "180",
      "newLineNo": "176"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "181",
      "newLineNo": "177"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept code = new CodeableConcept()",
      "newContent": " CodeableConcept code =",
      "oldLineNo": "182",
      "newLineNo": "178"
    },
    {
      "type": "modified",
      "oldContent": "        .addCoding(new Coding()",
      "newContent": " new CodeableConcept().addCoding(new Coding().setCode(\"abc\").setSystem(\"PLACEHOLDER\"));",
      "oldLineNo": "183",
      "newLineNo": "179"
    },
    {
      "type": "deleted",
      "content": "            .setCode(\"abc\")",
      "lineNo": "184"
    },
    {
      "type": "deleted",
      "content": "            .setSystem(\"PLACEHOLDER\"));",
      "lineNo": "185"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "186",
      "newLineNo": "180"
    },
    {
      "type": "not-modified",
      "content": " component.setCode(code);",
      "oldLineNo": "187",
      "newLineNo": "181"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "188",
      "newLineNo": "182"
    },
    {
      "type": "not-modified",
      "content": " humanName.addGiven(\"middle_name\");",
      "oldLineNo": "281",
      "newLineNo": "275"
    },
    {
      "type": "not-modified",
      "content": " patient.addName(humanName);",
      "oldLineNo": "282",
      "newLineNo": "276"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "283",
      "newLineNo": "277"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "284"
    },
    {
      "type": "not-modified",
      "content": " Meta meta = new Meta();",
      "oldLineNo": "285",
      "newLineNo": "278"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "286",
      "newLineNo": "279"
    },
    {
      "type": "not-modified",
      "content": " List<Coding> tag = meta.getTag();",
      "oldLineNo": "287",
      "newLineNo": "280"
    },
    {
      "type": "not-modified",
      "content": " medication.setId(id);",
      "oldLineNo": "309",
      "newLineNo": "302"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "310",
      "newLineNo": "303"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept itemCodeableConcept = new CodeableConcept();",
      "oldLineNo": "311",
      "newLineNo": "304"
    },
    {
      "type": "modified",
      "oldContent": " itemCodeableConcept.addCoding()",
      "newContent": " itemCodeableConcept",
      "oldLineNo": "312",
      "newLineNo": "305"
    },
    {
      "type": "added",
      "content": "        .addCoding()",
      "lineNo": "306"
    },
    {
      "type": "not-modified",
      "content": "        .setSystem(\"http://www.nlm.nih.gov/research/umls/rxnorm\")",
      "oldLineNo": "313",
      "newLineNo": "307"
    },
    {
      "type": "not-modified",
      "content": "        .setCode(\"103109\")",
      "oldLineNo": "314",
      "newLineNo": "308"
    },
    {
      "type": "not-modified",
      "content": "        .setDisplay(\"Vitamin E 3 MG Oral Tablet [Ephynal]\")",
      "oldLineNo": "315",
      "newLineNo": "309"
    },
    {
      "type": "not-modified",
      "content": " medicationRequest.setId(\"test-medication-request\");",
      "oldLineNo": "348",
      "newLineNo": "342"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "349",
      "newLineNo": "343"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept itemCodeableConcept = new CodeableConcept();",
      "oldLineNo": "350",
      "newLineNo": "344"
    },
    {
      "type": "modified",
      "oldContent": " itemCodeableConcept.addCoding()",
      "newContent": " itemCodeableConcept",
      "oldLineNo": "351",
      "newLineNo": "345"
    },
    {
      "type": "added",
      "content": "        .addCoding()",
      "lineNo": "346"
    },
    {
      "type": "not-modified",
      "content": "        .setSystem(\"http://www.nlm.nih.gov/research/umls/rxnorm\")",
      "oldLineNo": "352",
      "newLineNo": "347"
    },
    {
      "type": "not-modified",
      "content": "        .setCode(\"103109\")",
      "oldLineNo": "353",
      "newLineNo": "348"
    },
    {
      "type": "not-modified",
      "content": "        .setDisplay(\"Vitamin E 3 MG Oral Tablet [Ephynal]\")",
      "oldLineNo": "354",
      "newLineNo": "349"
    },
    {
      "type": "not-modified",
      "content": "        .setUserSelected(true);",
      "oldLineNo": "355",
      "newLineNo": "350"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "356",
      "newLineNo": "351"
    },
    {
      "type": "not-modified",
      "content": " medicationRequest.setMedication(itemCodeableConcept);",
      "oldLineNo": "357",
      "newLineNo": "352"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "358",
      "newLineNo": "353"
    },
    {
      "type": "modified",
      "oldContent": " medicationRequest",
      "newContent": " medicationRequest.setSubject(",
      "oldLineNo": "359",
      "newLineNo": "354"
    },
    {
      "type": "modified",
      "oldContent": " .setSubject(new Reference(\"Patient/12345\").setDisplay(\"Here is a display for you.\"));",
      "newContent": " new Reference(\"Patient/12345\").setDisplay(\"Here is a display for you.\"));",
      "oldLineNo": "360",
      "newLineNo": "355"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "361",
      "newLineNo": "356"
    },
    {
      "type": "modified",
      "oldContent": " medicationRequest.setDosageInstruction(ImmutableList.of(",
      "newContent": " medicationRequest.setDosageInstruction(",
      "oldLineNo": "362",
      "newLineNo": "357"
    },
    {
      "type": "modified",
      "oldContent": " new Dosage().setTiming(new Timing().setRepeat(new TimingRepeatComponent().setCount(10)))));",
      "newContent": " ImmutableList.of(",
      "oldLineNo": "363",
      "newLineNo": "358"
    },
    {
      "type": "added",
      "content": " new Dosage()",
      "lineNo": "359"
    },
    {
      "type": "added",
      "content": "                .setTiming(new Timing().setRepeat(new TimingRepeatComponent().setCount(10)))));",
      "lineNo": "360"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "364",
      "newLineNo": "361"
    },
    {
      "type": "not-modified",
      "content": " medicationRequest.setSubstitution(",
      "oldLineNo": "365",
      "newLineNo": "362"
    },
    {
      "type": "not-modified",
      "content": " new MedicationRequestSubstitutionComponent().setAllowed(new BooleanType(true)));",
      "oldLineNo": "366",
      "newLineNo": "363"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.instance.model.api.IBaseBundle;",
      "oldLineNo": "12",
      "newLineNo": "12"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.instance.model.api.IBaseResource;",
      "oldLineNo": "13",
      "newLineNo": "13"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "14",
      "newLineNo": "14"
    },
    {
      "type": "modified",
      "oldContent": "/**",
      "newContent": "/** Conversion support for translating STU3 FHIR resources. */",
      "oldLineNo": "15",
      "newLineNo": "15"
    },
    {
      "type": "deleted",
      "content": " * Conversion support for translating STU3 FHIR resources.",
      "lineNo": "16"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "17"
    },
    {
      "type": "not-modified",
      "content": "public class Stu3FhirConversionSupport extends FhirConversionSupport {",
      "oldLineNo": "18",
      "newLineNo": "16"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "19",
      "newLineNo": "17"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "20",
      "newLineNo": "18"
    },
    {
      "type": "not-modified",
      "content": " return children.stream()",
      "oldLineNo": "38",
      "newLineNo": "36"
    },
    {
      "type": "not-modified",
      "content": "          .filter(property -> property.hasValues())",
      "oldLineNo": "39",
      "newLineNo": "37"
    },
    {
      "type": "not-modified",
      "content": "          .collect(",
      "oldLineNo": "40",
      "newLineNo": "38"
    },
    {
      "type": "modified",
      "oldContent": " Collectors.toMap(Property::getName,",
      "newContent": " Collectors.toMap(",
      "oldLineNo": "41",
      "newLineNo": "39"
    },
    {
      "type": "modified",
      "oldContent": " property -> property.getValues(),",
      "newContent": " Property::getName, property -> property.getValues(), (first, second) -> first));",
      "oldLineNo": "42",
      "newLineNo": "40"
    },
    {
      "type": "deleted",
      "content": "                  (first, second) -> first));",
      "lineNo": "43"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "44",
      "newLineNo": "41"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "45",
      "newLineNo": "42"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "46",
      "newLineNo": "43"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "49",
      "newLineNo": "46"
    },
    {
      "type": "not-modified",
      "content": " Bundle stu3Bundle = (Bundle) bundle;",
      "oldLineNo": "50",
      "newLineNo": "47"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "51",
      "newLineNo": "48"
    },
    {
      "type": "modified",
      "oldContent": " List<IBaseResource> items = stu3Bundle.getEntry().stream()",
      "newContent": " List<IBaseResource> items =",
      "oldLineNo": "52",
      "newLineNo": "49"
    },
    {
      "type": "added",
      "content": " stu3Bundle.getEntry().stream()",
      "lineNo": "50"
    },
    {
      "type": "not-modified",
      "content": "            .map(BundleEntryComponent::getResource)",
      "oldLineNo": "53",
      "newLineNo": "51"
    },
    {
      "type": "modified",
      "oldContent": "            .filter(resource ->",
      "newContent": "            .filter(",
      "oldLineNo": "54",
      "newLineNo": "52"
    },
    {
      "type": "modified",
      "oldContent": " resource != null",
      "newContent": " resource ->",
      "oldLineNo": "55",
      "newLineNo": "53"
    },
    {
      "type": "modified",
      "oldContent": "                    && resourceName.equalsIgnoreCase(resource.getResourceType().name()))",
      "newContent": " resource != null",
      "oldLineNo": "56",
      "newLineNo": "54"
    },
    {
      "type": "added",
      "content": "                        && resourceName.equalsIgnoreCase(resource.getResourceType().name()))",
      "lineNo": "55"
    },
    {
      "type": "not-modified",
      "content": "            .collect(Collectors.toList());",
      "oldLineNo": "57",
      "newLineNo": "56"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "58",
      "newLineNo": "57"
    },
    {
      "type": "not-modified",
      "content": " return items;",
      "oldLineNo": "59",
      "newLineNo": "58"
    },
    {
      "type": "not-modified",
      "content": "import com.cerner.bunsen.definitions.IElementDefinition;",
      "oldLineNo": "5",
      "newLineNo": "5"
    },
    {
      "type": "not-modified",
      "content": "import com.cerner.bunsen.definitions.IStructureDefinition;",
      "oldLineNo": "6",
      "newLineNo": "6"
    },
    {
      "type": "not-modified",
      "content": "import com.cerner.bunsen.definitions.StructureDefinitions;",
      "oldLineNo": "7",
      "newLineNo": "7"
    },
    {
      "type": "deleted",
      "content": "import java.util.Collection;",
      "lineNo": "8"
    },
    {
      "type": "not-modified",
      "content": "import java.util.List;",
      "oldLineNo": "9",
      "newLineNo": "8"
    },
    {
      "type": "not-modified",
      "content": "import java.util.stream.Collectors;",
      "oldLineNo": "10",
      "newLineNo": "9"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.dstu3.model.ElementDefinition;",
      "oldLineNo": "11",
      "newLineNo": "10"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.dstu3.model.StructureDefinition;",
      "oldLineNo": "12",
      "newLineNo": "11"
    },
    {
      "type": "not-modified",
      "content": "import org.slf4j.Logger;",
      "oldLineNo": "13",
      "newLineNo": "12"
    },
    {
      "type": "not-modified",
      "content": "import org.slf4j.LoggerFactory;",
      "oldLineNo": "14",
      "newLineNo": "13"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "15",
      "newLineNo": "14"
    },
    {
      "type": "modified",
      "oldContent": "/**",
      "newContent": "/** {@link StructureDefinitions} implementation for FHIR STU3. */",
      "oldLineNo": "16",
      "newLineNo": "15"
    },
    {
      "type": "deleted",
      "content": " * {@link StructureDefinitions} implementation for FHIR STU3.",
      "lineNo": "17"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "18"
    },
    {
      "type": "not-modified",
      "content": "public class Stu3StructureDefinitions extends StructureDefinitions {",
      "oldLineNo": "19",
      "newLineNo": "16"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "20",
      "newLineNo": "17"
    },
    {
      "type": "not-modified",
      "content": " private static final Logger log = LoggerFactory.getLogger(Stu3StructureDefinitions.class);",
      "oldLineNo": "21",
      "newLineNo": "18"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "65",
      "newLineNo": "62"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "66",
      "newLineNo": "63"
    },
    {
      "type": "not-modified",
      "content": " public List<IElementDefinition> getSnapshotDefinitions() {",
      "oldLineNo": "67",
      "newLineNo": "64"
    },
    {
      "type": "modified",
      "oldContent": " return structureDefinition.getSnapshot().getElement().stream().map(",
      "newContent": " return structureDefinition.getSnapshot().getElement().stream()",
      "oldLineNo": "68",
      "newLineNo": "65"
    },
    {
      "type": "modified",
      "oldContent": " d -> new ElementDefinitionWrapper(d)).collect(Collectors.toList());",
      "newContent": "          .map(d -> new ElementDefinitionWrapper(d))",
      "oldLineNo": "69",
      "newLineNo": "66"
    },
    {
      "type": "added",
      "content": "          .collect(Collectors.toList());",
      "lineNo": "67"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "70",
      "newLineNo": "68"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "71",
      "newLineNo": "69"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "72",
      "newLineNo": "70"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "109",
      "newLineNo": "107"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "110",
      "newLineNo": "108"
    },
    {
      "type": "not-modified",
      "content": " public List<String> getAllTypeCodes() {",
      "oldLineNo": "111",
      "newLineNo": "109"
    },
    {
      "type": "modified",
      "oldContent": " return elementDefinition.getType().stream().map(",
      "newContent": " return elementDefinition.getType().stream()",
      "oldLineNo": "112",
      "newLineNo": "110"
    },
    {
      "type": "modified",
      "oldContent": " t -> t.getCode()).collect(Collectors.toList());",
      "newContent": "          .map(t -> t.getCode())",
      "oldLineNo": "113",
      "newLineNo": "111"
    },
    {
      "type": "added",
      "content": "          .collect(Collectors.toList());",
      "lineNo": "112"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "114",
      "newLineNo": "113"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "115",
      "newLineNo": "114"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "116",
      "newLineNo": "115"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "133",
      "newLineNo": "132"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "134",
      "newLineNo": "133"
    },
    {
      "type": "not-modified",
      "content": " public List<String> getReferenceTargetProfiles() {",
      "oldLineNo": "135",
      "newLineNo": "134"
    },
    {
      "type": "modified",
      "oldContent": " return elementDefinition.getType()",
      "newContent": " return elementDefinition.getType().stream()",
      "oldLineNo": "136",
      "newLineNo": "135"
    },
    {
      "type": "deleted",
      "content": "          .stream()",
      "lineNo": "137"
    },
    {
      "type": "not-modified",
      "content": "          .filter(type -> \"Reference\".equals(type.getCode()))",
      "oldLineNo": "138",
      "newLineNo": "136"
    },
    {
      "type": "not-modified",
      "content": "          .filter(type -> type.getTargetProfile() != null)",
      "oldLineNo": "139",
      "newLineNo": "137"
    },
    {
      "type": "not-modified",
      "content": "          .map(type -> type.getTargetProfile())",
      "oldLineNo": "140",
      "newLineNo": "138"
    },
    {
      "type": "not-modified",
      "content": " public String toString() {",
      "oldLineNo": "150",
      "newLineNo": "148"
    },
    {
      "type": "not-modified",
      "content": " return elementDefinition.toString();",
      "oldLineNo": "151",
      "newLineNo": "149"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "152",
      "newLineNo": "150"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "153"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "154",
      "newLineNo": "151"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "155"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "156",
      "newLineNo": "152"
    },
    {
      "type": "not-modified",
      "content": "/**",
      "oldLineNo": "1",
      "newLineNo": "1"
    },
    {
      "type": "modified",
      "oldContent": " * Support for translating FHIR STU3 resources. Most users won't use this directly, but",
      "newContent": " * Support for translating FHIR STU3 resources. Most users won't use this directly, but rather use",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "modified",
      "oldContent": " * rather use the bunsen-spark API or similar libraries.",
      "newContent": " * the bunsen-spark API or similar libraries.",
      "oldLineNo": "3",
      "newLineNo": "3"
    },
    {
      "type": "not-modified",
      "content": " */",
      "oldLineNo": "4",
      "newLineNo": "4"
    },
    {
      "type": "modified",
      "oldContent": "package com.cerner.bunsen.definitions.stu3;",
      "newContent": "package com.cerner.bunsen.definitions.stu3;",
      "oldLineNo": "5",
      "newLineNo": "5"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.utilities.xhtml.NodeType;",
      "oldLineNo": "36",
      "newLineNo": "36"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.utilities.xhtml.XhtmlNode;",
      "oldLineNo": "37",
      "newLineNo": "37"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "38",
      "newLineNo": "38"
    },
    {
      "type": "modified",
      "oldContent": "/**",
      "newContent": "/** Common test resources for Bunsen STU3 usage. */",
      "oldLineNo": "39",
      "newLineNo": "39"
    },
    {
      "type": "deleted",
      "content": " * Common test resources for Bunsen STU3 usage.",
      "lineNo": "40"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "41"
    },
    {
      "type": "not-modified",
      "content": "public class TestData {",
      "oldLineNo": "42",
      "newLineNo": "40"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "43",
      "newLineNo": "41"
    },
    {
      "type": "modified",
      "oldContent": " public static final String US_CORE_BIRTHSEX",
      "newContent": " public static final String US_CORE_BIRTHSEX =",
      "oldLineNo": "44",
      "newLineNo": "42"
    },
    {
      "type": "modified",
      "oldContent": " = \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\";",
      "newContent": " \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex\";",
      "oldLineNo": "45",
      "newLineNo": "43"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "46",
      "newLineNo": "44"
    },
    {
      "type": "modified",
      "oldContent": " public static final String US_CORE_ETHNICITY",
      "newContent": " public static final String US_CORE_ETHNICITY =",
      "oldLineNo": "47",
      "newLineNo": "45"
    },
    {
      "type": "modified",
      "oldContent": " = \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\";",
      "newContent": " \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity\";",
      "oldLineNo": "48",
      "newLineNo": "46"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "49",
      "newLineNo": "47"
    },
    {
      "type": "not-modified",
      "content": " public static final String US_CORE_PATIENT =",
      "oldLineNo": "50",
      "newLineNo": "48"
    },
    {
      "type": "not-modified",
      "content": " \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient\";",
      "oldLineNo": "51",
      "newLineNo": "49"
    },
    {
      "type": "not-modified",
      "content": " public static final String US_CORE_MEDICATION_REQUEST =",
      "oldLineNo": "62",
      "newLineNo": "60"
    },
    {
      "type": "not-modified",
      "content": " \"http://hl7.org/fhir/us/core/StructureDefinition/us-core-medicationrequest\";",
      "oldLineNo": "63",
      "newLineNo": "61"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "64",
      "newLineNo": "62"
    },
    {
      "type": "modified",
      "oldContent": " public static final String PROVENANCE =",
      "newContent": " public static final String PROVENANCE = \"http://hl7.org/fhir/StructureDefinition/Provenance\";",
      "oldLineNo": "65",
      "newLineNo": "63"
    },
    {
      "type": "deleted",
      "content": " \"http://hl7.org/fhir/StructureDefinition/Provenance\";",
      "lineNo": "66"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "67",
      "newLineNo": "64"
    },
    {
      "type": "modified",
      "oldContent": " public static final String VALUE_SET =",
      "newContent": " public static final String VALUE_SET = \"http://hl7.org/fhir/StructureDefinition/ValueSet\";",
      "oldLineNo": "68",
      "newLineNo": "65"
    },
    {
      "type": "deleted",
      "content": " \"http://hl7.org/fhir/StructureDefinition/ValueSet\";",
      "lineNo": "69"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "70",
      "newLineNo": "66"
    },
    {
      "type": "not-modified",
      "content": " public static final String BUNSEN_TEST_PATIENT =",
      "oldLineNo": "71",
      "newLineNo": "67"
    },
    {
      "type": "not-modified",
      "content": " \"http://hl7.org/fhir/bunsen/test/StructureDefinition/bunsen-test-patient\";",
      "oldLineNo": "72",
      "newLineNo": "68"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "123",
      "newLineNo": "119"
    },
    {
      "type": "not-modified",
      "content": " // Condition code",
      "oldLineNo": "124",
      "newLineNo": "120"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept code = new CodeableConcept();",
      "oldLineNo": "125",
      "newLineNo": "121"
    },
    {
      "type": "modified",
      "oldContent": " code.addCoding()",
      "newContent": " code.addCoding().setSystem(\"http://snomed.info/sct\").setCode(\"39065001\").setDisplay(\"Severe\");",
      "oldLineNo": "126",
      "newLineNo": "122"
    },
    {
      "type": "deleted",
      "content": "        .setSystem(\"http://snomed.info/sct\")",
      "lineNo": "127"
    },
    {
      "type": "deleted",
      "content": "        .setCode(\"39065001\")",
      "lineNo": "128"
    },
    {
      "type": "deleted",
      "content": "        .setDisplay(\"Severe\");",
      "lineNo": "129"
    },
    {
      "type": "not-modified",
      "content": " condition.setSeverity(code);",
      "oldLineNo": "130",
      "newLineNo": "123"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "131",
      "newLineNo": "124"
    },
    {
      "type": "not-modified",
      "content": " // Severity code",
      "oldLineNo": "132",
      "newLineNo": "125"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept severity = new CodeableConcept();",
      "oldLineNo": "133",
      "newLineNo": "126"
    },
    {
      "type": "modified",
      "oldContent": " severity.addCoding()",
      "newContent": " severity",
      "oldLineNo": "134",
      "newLineNo": "127"
    },
    {
      "type": "added",
      "content": "        .addCoding()",
      "lineNo": "128"
    },
    {
      "type": "not-modified",
      "content": "        .setSystem(\"http://snomed.info/sct\")",
      "oldLineNo": "135",
      "newLineNo": "129"
    },
    {
      "type": "not-modified",
      "content": "        .setCode(\"24484000\")",
      "oldLineNo": "136",
      "newLineNo": "130"
    },
    {
      "type": "not-modified",
      "content": "        .setDisplay(\"Burn of ear\")",
      "oldLineNo": "137",
      "newLineNo": "131"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "174",
      "newLineNo": "168"
    },
    {
      "type": "not-modified",
      "content": " ObservationComponentComponent component = observation.addComponent();",
      "oldLineNo": "175",
      "newLineNo": "169"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "176",
      "newLineNo": "170"
    },
    {
      "type": "modified",
      "oldContent": " CodeableConcept code = new CodeableConcept()",
      "newContent": " CodeableConcept code =",
      "oldLineNo": "177",
      "newLineNo": "171"
    },
    {
      "type": "modified",
      "oldContent": "        .addCoding(new Coding()",
      "newContent": " new CodeableConcept().addCoding(new Coding().setCode(\"abc\").setSystem(\"PLACEHOLDER\"));",
      "oldLineNo": "178",
      "newLineNo": "172"
    },
    {
      "type": "deleted",
      "content": "            .setCode(\"abc\")",
      "lineNo": "179"
    },
    {
      "type": "deleted",
      "content": "            .setSystem(\"PLACEHOLDER\"));",
      "lineNo": "180"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "181",
      "newLineNo": "173"
    },
    {
      "type": "not-modified",
      "content": " component.setCode(code);",
      "oldLineNo": "182",
      "newLineNo": "174"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "183",
      "newLineNo": "175"
    },
    {
      "type": "not-modified",
      "content": " humanName.setId(\"name123\");",
      "oldLineNo": "279",
      "newLineNo": "271"
    },
    {
      "type": "not-modified",
      "content": " patient.addName(humanName);",
      "oldLineNo": "280",
      "newLineNo": "272"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "281",
      "newLineNo": "273"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "282"
    },
    {
      "type": "not-modified",
      "content": " Meta meta = new Meta();",
      "oldLineNo": "283",
      "newLineNo": "274"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "284",
      "newLineNo": "275"
    },
    {
      "type": "not-modified",
      "content": " List<Coding> tag = meta.getTag();",
      "oldLineNo": "285",
      "newLineNo": "276"
    },
    {
      "type": "not-modified",
      "content": " medication.setId(id);",
      "oldLineNo": "307",
      "newLineNo": "298"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "308",
      "newLineNo": "299"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept itemCodeableConcept = new CodeableConcept();",
      "oldLineNo": "309",
      "newLineNo": "300"
    },
    {
      "type": "modified",
      "oldContent": " itemCodeableConcept.addCoding()",
      "newContent": " itemCodeableConcept",
      "oldLineNo": "310",
      "newLineNo": "301"
    },
    {
      "type": "added",
      "content": "        .addCoding()",
      "lineNo": "302"
    },
    {
      "type": "not-modified",
      "content": "        .setSystem(\"http://www.nlm.nih.gov/research/umls/rxnorm\")",
      "oldLineNo": "311",
      "newLineNo": "303"
    },
    {
      "type": "not-modified",
      "content": "        .setCode(\"103109\")",
      "oldLineNo": "312",
      "newLineNo": "304"
    },
    {
      "type": "not-modified",
      "content": "        .setDisplay(\"Vitamin E 3 MG Oral Tablet [Ephynal]\")",
      "oldLineNo": "313",
      "newLineNo": "305"
    },
    {
      "type": "not-modified",
      "content": " medicationRequest.setId(\"test-medication-request\");",
      "oldLineNo": "344",
      "newLineNo": "336"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "345",
      "newLineNo": "337"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept itemCodeableConcept = new CodeableConcept();",
      "oldLineNo": "346",
      "newLineNo": "338"
    },
    {
      "type": "modified",
      "oldContent": " itemCodeableConcept.addCoding()",
      "newContent": " itemCodeableConcept",
      "oldLineNo": "347",
      "newLineNo": "339"
    },
    {
      "type": "added",
      "content": "        .addCoding()",
      "lineNo": "340"
    },
    {
      "type": "not-modified",
      "content": "        .setSystem(\"http://www.nlm.nih.gov/research/umls/rxnorm\")",
      "oldLineNo": "348",
      "newLineNo": "341"
    },
    {
      "type": "not-modified",
      "content": "        .setCode(\"103109\")",
      "oldLineNo": "349",
      "newLineNo": "342"
    },
    {
      "type": "not-modified",
      "content": "        .setDisplay(\"Vitamin E 3 MG Oral Tablet [Ephynal]\")",
      "oldLineNo": "350",
      "newLineNo": "343"
    },
    {
      "type": "not-modified",
      "content": "        .setUserSelected(true);",
      "oldLineNo": "351",
      "newLineNo": "344"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "352",
      "newLineNo": "345"
    },
    {
      "type": "not-modified",
      "content": " medicationRequest.setMedication(itemCodeableConcept);",
      "oldLineNo": "353",
      "newLineNo": "346"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "354",
      "newLineNo": "347"
    },
    {
      "type": "modified",
      "oldContent": " medicationRequest",
      "newContent": " medicationRequest.setSubject(",
      "oldLineNo": "355",
      "newLineNo": "348"
    },
    {
      "type": "modified",
      "oldContent": " .setSubject(new Reference(\"Patient/12345\").setDisplay(\"Here is a display for you.\"));",
      "newContent": " new Reference(\"Patient/12345\").setDisplay(\"Here is a display for you.\"));",
      "oldLineNo": "356",
      "newLineNo": "349"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "357",
      "newLineNo": "350"
    },
    {
      "type": "modified",
      "oldContent": " medicationRequest.setDosageInstruction(ImmutableList.of(",
      "newContent": " medicationRequest.setDosageInstruction(",
      "oldLineNo": "358",
      "newLineNo": "351"
    },
    {
      "type": "modified",
      "oldContent": " new Dosage().setTiming(new Timing().setRepeat(new TimingRepeatComponent().setCount(10)))));",
      "newContent": " ImmutableList.of(",
      "oldLineNo": "359",
      "newLineNo": "352"
    },
    {
      "type": "added",
      "content": " new Dosage()",
      "lineNo": "353"
    },
    {
      "type": "added",
      "content": "                .setTiming(new Timing().setRepeat(new TimingRepeatComponent().setCount(10)))));",
      "lineNo": "354"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "360",
      "newLineNo": "355"
    },
    {
      "type": "modified",
      "oldContent": " medicationRequest",
      "newContent": " medicationRequest.setSubstitution(",
      "oldLineNo": "361",
      "newLineNo": "356"
    },
    {
      "type": "modified",
      "oldContent": " .setSubstitution(new MedicationRequestSubstitutionComponent().setAllowed(true));",
      "newContent": " new MedicationRequestSubstitutionComponent().setAllowed(true));",
      "oldLineNo": "362",
      "newLineNo": "357"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "363",
      "newLineNo": "358"
    },
    {
      "type": "not-modified",
      "content": " return medicationRequest;",
      "oldLineNo": "364",
      "newLineNo": "359"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "365",
      "newLineNo": "360"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "434",
      "newLineNo": "429"
    },
    {
      "type": "not-modified",
      "content": " // add multiple codeableConcept extensions to nestedExtension",
      "oldLineNo": "435",
      "newLineNo": "430"
    },
    {
      "type": "not-modified",
      "content": " final CodeableConcept codeableconcept1 = new CodeableConcept();",
      "oldLineNo": "436",
      "newLineNo": "431"
    },
    {
      "type": "modified",
      "oldContent": " codeableconcept1.addCoding()",
      "newContent": " codeableconcept1",
      "oldLineNo": "437",
      "newLineNo": "432"
    },
    {
      "type": "added",
      "content": "        .addCoding()",
      "lineNo": "433"
    },
    {
      "type": "not-modified",
      "content": "        .setSystem(\"http://snomed.info/sct\")",
      "oldLineNo": "438",
      "newLineNo": "434"
    },
    {
      "type": "not-modified",
      "content": "        .setCode(\"CC1\")",
      "oldLineNo": "439",
      "newLineNo": "435"
    },
    {
      "type": "not-modified",
      "content": "        .setDisplay(\"CC1 - Codeable Concept Extension\")",
      "oldLineNo": "440",
      "newLineNo": "436"
    },
    {
      "type": "not-modified",
      "content": "        .setUserSelected(true);",
      "oldLineNo": "441",
      "newLineNo": "437"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "442",
      "newLineNo": "438"
    },
    {
      "type": "not-modified",
      "content": " final CodeableConcept codeableconcept2 = new CodeableConcept();",
      "oldLineNo": "443",
      "newLineNo": "439"
    },
    {
      "type": "modified",
      "oldContent": " codeableconcept2.addCoding()",
      "newContent": " codeableconcept2",
      "oldLineNo": "444",
      "newLineNo": "440"
    },
    {
      "type": "added",
      "content": "        .addCoding()",
      "lineNo": "441"
    },
    {
      "type": "not-modified",
      "content": "        .setSystem(\"http://snomed.info/sct\")",
      "oldLineNo": "445",
      "newLineNo": "442"
    },
    {
      "type": "not-modified",
      "content": "        .setCode(\"CC2\")",
      "oldLineNo": "446",
      "newLineNo": "443"
    },
    {
      "type": "not-modified",
      "content": "        .setDisplay(\"CC2 - Codeable Concept Extension\")",
      "oldLineNo": "447",
      "newLineNo": "444"
    },
    {
      "type": "not-modified",
      "content": "        .setUserSelected(true);",
      "oldLineNo": "448",
      "newLineNo": "445"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "449",
      "newLineNo": "446"
    },
    {
      "type": "not-modified",
      "content": " final CodeableConcept codeableconcept3 = new CodeableConcept();",
      "oldLineNo": "450",
      "newLineNo": "447"
    },
    {
      "type": "modified",
      "oldContent": " codeableconcept3.addCoding()",
      "newContent": " codeableconcept3",
      "oldLineNo": "451",
      "newLineNo": "448"
    },
    {
      "type": "added",
      "content": "        .addCoding()",
      "lineNo": "449"
    },
    {
      "type": "not-modified",
      "content": "        .setSystem(\"http://snomed.info/sct\")",
      "oldLineNo": "452",
      "newLineNo": "450"
    },
    {
      "type": "not-modified",
      "content": "        .setCode(\"CC3\")",
      "oldLineNo": "453",
      "newLineNo": "451"
    },
    {
      "type": "not-modified",
      "content": "        .setDisplay(\"CC3 - Codeable Concept Extension\")",
      "oldLineNo": "454",
      "newLineNo": "452"
    },
    {
      "type": "not-modified",
      "content": " stringModifierExtension.setValue(new StringType(\"test string modifier value\"));",
      "oldLineNo": "472",
      "newLineNo": "470"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "473",
      "newLineNo": "471"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept concept1 = new CodeableConcept();",
      "oldLineNo": "474",
      "newLineNo": "472"
    },
    {
      "type": "modified",
      "oldContent": " concept1.addCoding()",
      "newContent": " concept1",
      "oldLineNo": "475",
      "newLineNo": "473"
    },
    {
      "type": "added",
      "content": "        .addCoding()",
      "lineNo": "474"
    },
    {
      "type": "not-modified",
      "content": "        .setSystem(\"http://snomed.info/sct\")",
      "oldLineNo": "476",
      "newLineNo": "475"
    },
    {
      "type": "not-modified",
      "content": "        .setCode(\"C-1\")",
      "oldLineNo": "477",
      "newLineNo": "476"
    },
    {
      "type": "not-modified",
      "content": "        .setDisplay(\"C-1 Codeable Concept Modifier Extension\")",
      "oldLineNo": "478",
      "newLineNo": "477"
    },
    {
      "type": "not-modified",
      "content": " codeableConceptField.setValue(concept1);",
      "oldLineNo": "483",
      "newLineNo": "482"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "484",
      "newLineNo": "483"
    },
    {
      "type": "not-modified",
      "content": " CodeableConcept concept2 = new CodeableConcept();",
      "oldLineNo": "485",
      "newLineNo": "484"
    },
    {
      "type": "modified",
      "oldContent": " concept2.addCoding()",
      "newContent": " concept2",
      "oldLineNo": "486",
      "newLineNo": "485"
    },
    {
      "type": "added",
      "content": "        .addCoding()",
      "lineNo": "486"
    },
    {
      "type": "not-modified",
      "content": "        .setSystem(\"http://snomed.info/sct\")",
      "oldLineNo": "487",
      "newLineNo": "487"
    },
    {
      "type": "not-modified",
      "content": "        .setCode(\"C-2\")",
      "oldLineNo": "488",
      "newLineNo": "488"
    },
    {
      "type": "not-modified",
      "content": "        .setDisplay(\"C-2 Codeable Concept Modifier Extension\")",
      "oldLineNo": "489",
      "newLineNo": "489"
    },
    {
      "type": "not-modified",
      "content": "import java.util.ServiceLoader;",
      "oldLineNo": "11",
      "newLineNo": "11"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "12",
      "newLineNo": "12"
    },
    {
      "type": "not-modified",
      "content": "/**",
      "oldLineNo": "13",
      "newLineNo": "13"
    },
    {
      "type": "modified",
      "oldContent": " * Loader for FHIR contexts. Unlike the provided {@link FhirContext} loader,",
      "newContent": " * Loader for FHIR contexts. Unlike the provided {@link FhirContext} loader, this implementation",
      "oldLineNo": "14",
      "newLineNo": "14"
    },
    {
      "type": "modified",
      "oldContent": " * this implementation caches the contexts for reuse, and also loads profiles",
      "newContent": " * caches the contexts for reuse, and also loads profiles that implement the {@link ProfileProvider}",
      "oldLineNo": "15",
      "newLineNo": "15"
    },
    {
      "type": "modified",
      "oldContent": " * that implement the {@link ProfileProvider} SPI.",
      "newContent": " * SPI.",
      "oldLineNo": "16",
      "newLineNo": "16"
    },
    {
      "type": "not-modified",
      "content": " */",
      "oldLineNo": "17",
      "newLineNo": "17"
    },
    {
      "type": "not-modified",
      "content": "public class FhirContexts {",
      "oldLineNo": "18",
      "newLineNo": "18"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "19",
      "newLineNo": "19"
    },
    {
      "type": "modified",
      "oldContent": " /**",
      "newContent": " /** Cache of FHIR contexts. */",
      "oldLineNo": "20",
      "newLineNo": "20"
    },
    {
      "type": "deleted",
      "content": "   * Cache of FHIR contexts.",
      "lineNo": "21"
    },
    {
      "type": "deleted",
      "content": "   */",
      "lineNo": "22"
    },
    {
      "type": "not-modified",
      "content": " private static final Map<FhirVersionEnum, FhirContext> FHIR_CONTEXTS = new HashMap();",
      "oldLineNo": "23",
      "newLineNo": "21"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "24",
      "newLineNo": "22"
    },
    {
      "type": "modified",
      "oldContent": " /**",
      "newContent": " /** Loads structure definitions for supported profiles. */",
      "oldLineNo": "25",
      "newLineNo": "23"
    },
    {
      "type": "deleted",
      "content": "   * Loads structure definitions for supported profiles.",
      "lineNo": "26"
    },
    {
      "type": "deleted",
      "content": "   */",
      "lineNo": "27"
    },
    {
      "type": "not-modified",
      "content": " private static void loadProfiles(FhirContext context) {",
      "oldLineNo": "28",
      "newLineNo": "24"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "29",
      "newLineNo": "25"
    },
    {
      "type": "not-modified",
      "content": " ServiceLoader<ProfileProvider> loader = ServiceLoader.load(ProfileProvider.class);",
      "oldLineNo": "30",
      "newLineNo": "26"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "31",
      "newLineNo": "27"
    },
    {
      "type": "modified",
      "oldContent": " loader.forEach(provider ->",
      "newContent": " loader.forEach(provider -> provider.loadStructureDefinitions(context));",
      "oldLineNo": "32",
      "newLineNo": "28"
    },
    {
      "type": "deleted",
      "content": " provider.loadStructureDefinitions(context));",
      "lineNo": "33"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "34"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "35",
      "newLineNo": "29"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "36",
      "newLineNo": "30"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "37",
      "newLineNo": "31"
    },
    {
      "type": "modified",
      "oldContent": "   * Returns the FHIR context for the given version. This is effectively a cache",
      "newContent": "   * Returns the FHIR context for the given version. This is effectively a cache so consuming code",
      "oldLineNo": "38",
      "newLineNo": "32"
    },
    {
      "type": "modified",
      "oldContent": "   * so consuming code does not need to recreate the context repeatedly.",
      "newContent": "   * does not need to recreate the context repeatedly.",
      "oldLineNo": "39",
      "newLineNo": "33"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "40",
      "newLineNo": "34"
    },
    {
      "type": "not-modified",
      "content": "   * @param fhirVersion the version of FHIR to use",
      "oldLineNo": "41",
      "newLineNo": "35"
    },
    {
      "type": "not-modified",
      "content": "   * @return the FhirContext",
      "oldLineNo": "42",
      "newLineNo": "36"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "43",
      "newLineNo": "37"
    },
    {
      "type": "not-modified",
      "content": " public static FhirContext contextFor(FhirVersionEnum fhirVersion) {",
      "oldLineNo": "44",
      "newLineNo": "38"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "45",
      "newLineNo": "39"
    },
    {
      "type": "not-modified",
      "content": " synchronized (FHIR_CONTEXTS) {",
      "oldLineNo": "46",
      "newLineNo": "40"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "47"
    },
    {
      "type": "not-modified",
      "content": " FhirContext context = FHIR_CONTEXTS.get(fhirVersion);",
      "oldLineNo": "48",
      "newLineNo": "41"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "49",
      "newLineNo": "42"
    },
    {
      "type": "not-modified",
      "content": " if (context == null) {",
      "oldLineNo": "50",
      "newLineNo": "43"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "61",
      "newLineNo": "54"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "62",
      "newLineNo": "55"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "63",
      "newLineNo": "56"
    },
    {
      "type": "modified",
      "oldContent": "   * Returns a builder to create encoders",
      "newContent": "   * Returns a builder to create encoders for FHIR STU3.",
      "oldLineNo": "64",
      "newLineNo": "57"
    },
    {
      "type": "deleted",
      "content": "   * for FHIR STU3.",
      "lineNo": "65"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "66",
      "newLineNo": "58"
    },
    {
      "type": "not-modified",
      "content": "   * @return a builder for encoders.",
      "oldLineNo": "67",
      "newLineNo": "59"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "68",
      "newLineNo": "60"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "72",
      "newLineNo": "64"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "73",
      "newLineNo": "65"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "74",
      "newLineNo": "66"
    },
    {
      "type": "modified",
      "oldContent": "   * Returns a builder to create encoders",
      "newContent": "   * Returns a builder to create encoders for FHIR R4.",
      "oldLineNo": "75",
      "newLineNo": "67"
    },
    {
      "type": "deleted",
      "content": "   * for FHIR R4.",
      "lineNo": "76"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "77",
      "newLineNo": "68"
    },
    {
      "type": "not-modified",
      "content": "   * @return a builder for encoders.",
      "oldLineNo": "78",
      "newLineNo": "69"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "79",
      "newLineNo": "70"
    },
    {
      "type": "not-modified",
      "content": " public static FhirContext forR4() {",
      "oldLineNo": "80",
      "newLineNo": "71"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "81",
      "newLineNo": "72"
    },
    {
      "type": "not-modified",
      "content": " return contextFor(R4);",
      "oldLineNo": "82",
      "newLineNo": "73"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "83",
      "newLineNo": "74"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "84"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "85",
      "newLineNo": "75"
    },
    {
      "type": "not-modified",
      "content": "/**",
      "oldLineNo": "6",
      "newLineNo": "6"
    },
    {
      "type": "not-modified",
      "content": " * Visitor for each field in a FHIR StructureDefinition.",
      "oldLineNo": "7",
      "newLineNo": "7"
    },
    {
      "type": "not-modified",
      "content": " *",
      "oldLineNo": "8",
      "newLineNo": "8"
    },
    {
      "type": "modified",
      "oldContent": " * @param <T> the type produced by the visitor. ",
      "newContent": " * @param <T> the type produced by the visitor.",
      "oldLineNo": "9",
      "newLineNo": "9"
    },
    {
      "type": "not-modified",
      "content": " */",
      "oldLineNo": "10",
      "newLineNo": "10"
    },
    {
      "type": "not-modified",
      "content": "public interface DefinitionVisitor<T> {",
      "oldLineNo": "11",
      "newLineNo": "11"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "12",
      "newLineNo": "12"
    },
    {
      "type": "not-modified",
      "content": "   * @param primitiveType the FHIR type of the primitive.",
      "oldLineNo": "17",
      "newLineNo": "17"
    },
    {
      "type": "not-modified",
      "content": "   * @return the visitor result.",
      "oldLineNo": "18",
      "newLineNo": "18"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "19",
      "newLineNo": "19"
    },
    {
      "type": "modified",
      "oldContent": " T visitPrimitive(String elementName,",
      "newContent": " T visitPrimitive(String elementName, String primitiveType);",
      "oldLineNo": "20",
      "newLineNo": "20"
    },
    {
      "type": "deleted",
      "content": " String primitiveType);",
      "lineNo": "21"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "22",
      "newLineNo": "21"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "23",
      "newLineNo": "22"
    },
    {
      "type": "not-modified",
      "content": "   * Visits a composite type.",
      "oldLineNo": "24",
      "newLineNo": "23"
    },
    {
      "type": "not-modified",
      "content": "   * @param children the composite type's children.",
      "oldLineNo": "30",
      "newLineNo": "29"
    },
    {
      "type": "not-modified",
      "content": "   * @return the visitor result.",
      "oldLineNo": "31",
      "newLineNo": "30"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "32",
      "newLineNo": "31"
    },
    {
      "type": "modified",
      "oldContent": " T visitComposite(String elementName,",
      "newContent": " T visitComposite(",
      "oldLineNo": "33",
      "newLineNo": "32"
    },
    {
      "type": "added",
      "content": " String elementName,",
      "lineNo": "33"
    },
    {
      "type": "not-modified",
      "content": " String elementPath,",
      "oldLineNo": "34",
      "newLineNo": "34"
    },
    {
      "type": "not-modified",
      "content": " String baseType,",
      "oldLineNo": "35",
      "newLineNo": "35"
    },
    {
      "type": "not-modified",
      "content": " String elementTypeUrl,",
      "oldLineNo": "36",
      "newLineNo": "36"
    },
    {
      "type": "not-modified",
      "content": "   * @param contained the map of types to their contained elements.",
      "oldLineNo": "44",
      "newLineNo": "44"
    },
    {
      "type": "not-modified",
      "content": "   * @return the visitor result.",
      "oldLineNo": "45",
      "newLineNo": "45"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "46",
      "newLineNo": "46"
    },
    {
      "type": "modified",
      "oldContent": " T visitContained(String elementPath,",
      "newContent": " T visitContained(String elementPath, String baseType, Map<String, StructureField<T>> contained);",
      "oldLineNo": "47",
      "newLineNo": "47"
    },
    {
      "type": "deleted",
      "content": " String baseType,",
      "lineNo": "48"
    },
    {
      "type": "deleted",
      "content": " Map<String, StructureField<T>> contained);",
      "lineNo": "49"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "50",
      "newLineNo": "48"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "51",
      "newLineNo": "49"
    },
    {
      "type": "modified",
      "oldContent": "   * Visits a reference type.",
      "newContent": "   * Visits a reference type. The element name in itself is not sufficient as similar element names",
      "oldLineNo": "52",
      "newLineNo": "50"
    },
    {
      "type": "modified",
      "oldContent": "   * The element name in itself is not sufficient as similar element names at",
      "newContent": "   * at different places cause conflict and hence we would need full schema path to differentiate",
      "oldLineNo": "53",
      "newLineNo": "51"
    },
    {
      "type": "modified",
      "oldContent": "   * different places cause conflict and hence we would need full schema path",
      "newContent": "   * between such conflicting reference names.",
      "oldLineNo": "54",
      "newLineNo": "52"
    },
    {
      "type": "deleted",
      "content": "   * to differentiate between such conflicting reference names.",
      "lineNo": "55"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "56",
      "newLineNo": "53"
    },
    {
      "type": "not-modified",
      "content": "   * @param elementName the full schema path of element which needs to be visited.",
      "oldLineNo": "57",
      "newLineNo": "54"
    },
    {
      "type": "not-modified",
      "content": "   * @param referenceTypes the types of resource that can be referenced",
      "oldLineNo": "58",
      "newLineNo": "55"
    },
    {
      "type": "not-modified",
      "content": "   * @param children the child fields of the reference",
      "oldLineNo": "59",
      "newLineNo": "56"
    },
    {
      "type": "not-modified",
      "content": "   * @return the visitor result.",
      "oldLineNo": "60",
      "newLineNo": "57"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "61",
      "newLineNo": "58"
    },
    {
      "type": "modified",
      "oldContent": " T visitReference(String elementName,",
      "newContent": " T visitReference(",
      "oldLineNo": "62",
      "newLineNo": "59"
    },
    {
      "type": "modified",
      "oldContent": " List<String> referenceTypes,",
      "newContent": " String elementName, List<String> referenceTypes, List<StructureField<T>> children);",
      "oldLineNo": "63",
      "newLineNo": "60"
    },
    {
      "type": "deleted",
      "content": " List<StructureField<T>> children);",
      "lineNo": "64"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "65",
      "newLineNo": "61"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "66",
      "newLineNo": "62"
    },
    {
      "type": "not-modified",
      "content": "   * Visits a non-leaf extension.",
      "oldLineNo": "67",
      "newLineNo": "63"
    },
    {
      "type": "not-modified",
      "content": "   * @param children the children of the extension",
      "oldLineNo": "71",
      "newLineNo": "67"
    },
    {
      "type": "not-modified",
      "content": "   * @return the visitor result.",
      "oldLineNo": "72",
      "newLineNo": "68"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "73",
      "newLineNo": "69"
    },
    {
      "type": "modified",
      "oldContent": " T visitParentExtension(String elementName,",
      "newContent": " T visitParentExtension(String elementName, String extensionUrl, List<StructureField<T>> children);",
      "oldLineNo": "74",
      "newLineNo": "70"
    },
    {
      "type": "deleted",
      "content": " String extensionUrl,",
      "lineNo": "75"
    },
    {
      "type": "deleted",
      "content": " List<StructureField<T>> children);",
      "lineNo": "76"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "77",
      "newLineNo": "71"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "78",
      "newLineNo": "72"
    },
    {
      "type": "not-modified",
      "content": "   * Visits a leaf extension, which contains some value.",
      "oldLineNo": "79",
      "newLineNo": "73"
    },
    {
      "type": "not-modified",
      "content": "   * @param element the children of the extension.",
      "oldLineNo": "83",
      "newLineNo": "77"
    },
    {
      "type": "not-modified",
      "content": "   * @return the visitor result.",
      "oldLineNo": "84",
      "newLineNo": "78"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "85",
      "newLineNo": "79"
    },
    {
      "type": "modified",
      "oldContent": " T visitLeafExtension(String elementName,",
      "newContent": " T visitLeafExtension(String elementName, String extensionUrl, T element);",
      "oldLineNo": "86",
      "newLineNo": "80"
    },
    {
      "type": "deleted",
      "content": " String extensionUrl,",
      "lineNo": "87"
    },
    {
      "type": "deleted",
      "content": " T element);",
      "lineNo": "88"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "89",
      "newLineNo": "81"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "90",
      "newLineNo": "82"
    },
    {
      "type": "not-modified",
      "content": "   * Visits a multi-valued element.",
      "oldLineNo": "91",
      "newLineNo": "83"
    },
    {
      "type": "not-modified",
      "content": "   * @param arrayElement the visitor result for a single element of the array.",
      "oldLineNo": "94",
      "newLineNo": "86"
    },
    {
      "type": "not-modified",
      "content": "   * @return the visitor result.",
      "oldLineNo": "95",
      "newLineNo": "87"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "96",
      "newLineNo": "88"
    },
    {
      "type": "modified",
      "oldContent": " T visitMultiValued(String elementName,",
      "newContent": " T visitMultiValued(String elementName, T arrayElement);",
      "oldLineNo": "97",
      "newLineNo": "89"
    },
    {
      "type": "deleted",
      "content": " T arrayElement);",
      "lineNo": "98"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "99",
      "newLineNo": "90"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "100",
      "newLineNo": "91"
    },
    {
      "type": "not-modified",
      "content": "   * Visits a choice type.",
      "oldLineNo": "101",
      "newLineNo": "92"
    },
    {
      "type": "not-modified",
      "content": "   * @param fhirToChoiceTypes a map of the choice type with the returned children.",
      "oldLineNo": "104",
      "newLineNo": "95"
    },
    {
      "type": "not-modified",
      "content": "   * @return the visitor result.",
      "oldLineNo": "105",
      "newLineNo": "96"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "106",
      "newLineNo": "97"
    },
    {
      "type": "modified",
      "oldContent": " T visitChoice(String elementName,",
      "newContent": " T visitChoice(String elementName, Map<String, T> fhirToChoiceTypes);",
      "oldLineNo": "107",
      "newLineNo": "98"
    },
    {
      "type": "deleted",
      "content": " Map<String,T> fhirToChoiceTypes);",
      "lineNo": "108"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "109",
      "newLineNo": "99"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "110",
      "newLineNo": "100"
    },
    {
      "type": "not-modified",
      "content": "   * Returns the maximum depth to use for recursive structures of the given type.",
      "oldLineNo": "111",
      "newLineNo": "101"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "66",
      "newLineNo": "66"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "67",
      "newLineNo": "67"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "68",
      "newLineNo": "68"
    },
    {
      "type": "modified",
      "oldContent": "   * This is to extract the full path of an element based on the element traversal stack.",
      "newContent": "   * This is to extract the full path of an element based on the element traversal stack. The reason",
      "oldLineNo": "69",
      "newLineNo": "69"
    },
    {
      "type": "modified",
      "oldContent": "   * The reason for using the full path from stack is to differentiate between same types at",
      "newContent": "   * for using the full path from stack is to differentiate between same types at different",
      "oldLineNo": "70",
      "newLineNo": "70"
    },
    {
      "type": "modified",
      "oldContent": "   * different recursion levels, e.g., when a child is dropped because of recursion max-depth",
      "newContent": "   * recursion levels, e.g., when a child is dropped because of recursion max-depth while in a",
      "oldLineNo": "71",
      "newLineNo": "71"
    },
    {
      "type": "modified",
      "oldContent": "   * while in a different traversal (for the same type) that child is present. Note in both those",
      "newContent": "   * different traversal (for the same type) that child is present. Note in both those cases the",
      "oldLineNo": "72",
      "newLineNo": "72"
    },
    {
      "type": "modified",
      "oldContent": "   * cases the element name and path would be the same hence we need to rely on the full traversal",
      "newContent": "   * element name and path would be the same hence we need to rely on the full traversal stack. As",
      "oldLineNo": "73",
      "newLineNo": "73"
    },
    {
      "type": "modified",
      "oldContent": "   * stack. As an example consider these two fields:",
      "newContent": "   * an example consider these two fields: QuestionnaireResponse.item.answer.item",
      "oldLineNo": "74",
      "newLineNo": "74"
    },
    {
      "type": "modified",
      "oldContent": "   * QuestionnaireResponse.item.answer.item",
      "newContent": "   * QuestionnaireResponse.item.answer.item.answer.item Both of these are `item` with \"element path\"",
      "oldLineNo": "75",
      "newLineNo": "75"
    },
    {
      "type": "modified",
      "oldContent": "   * QuestionnaireResponse.item.answer.item.answer.item",
      "newContent": "   * being `QuestionnaireResponse.item` but the `answer` field might have been dropped in the second",
      "oldLineNo": "76",
      "newLineNo": "76"
    },
    {
      "type": "modified",
      "oldContent": "   * Both of these are `item` with \"element path\" being `QuestionnaireResponse.item` but the",
      "newContent": "   * one because of recursion limits.",
      "oldLineNo": "77",
      "newLineNo": "77"
    },
    {
      "type": "deleted",
      "content": "   * `answer` field might have been dropped in the second one because of recursion limits.",
      "lineNo": "78"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "79",
      "newLineNo": "78"
    },
    {
      "type": "not-modified",
      "content": "   * @param elemName the name of the target element",
      "oldLineNo": "80",
      "newLineNo": "79"
    },
    {
      "type": "not-modified",
      "content": "   * @param stack the current traversal stack leading to `elemName`",
      "oldLineNo": "81",
      "newLineNo": "80"
    },
    {
      "type": "not-modified",
      "content": " return fullPath.stream().collect(Collectors.joining(\".\"));",
      "oldLineNo": "93",
      "newLineNo": "92"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "94",
      "newLineNo": "93"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "95",
      "newLineNo": "94"
    },
    {
      "type": "modified",
      "oldContent": " /**",
      "newContent": " /** Creates a canonical element name from the element path. */",
      "oldLineNo": "96",
      "newLineNo": "95"
    },
    {
      "type": "deleted",
      "content": "   * Creates a canonical element name from the element path.",
      "lineNo": "97"
    },
    {
      "type": "deleted",
      "content": "   */",
      "lineNo": "98"
    },
    {
      "type": "not-modified",
      "content": " public static String elementName(String elementPath) {",
      "oldLineNo": "99",
      "newLineNo": "96"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "100",
      "newLineNo": "97"
    },
    {
      "type": "not-modified",
      "content": " String suffix = elementPath.substring(elementPath.lastIndexOf('.') + 1);",
      "oldLineNo": "101",
      "newLineNo": "98"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "102",
      "newLineNo": "99"
    },
    {
      "type": "modified",
      "oldContent": " return suffix.endsWith(\"[x]\")",
      "newContent": " return suffix.endsWith(\"[x]\") ? suffix.substring(0, suffix.length() - 3) : suffix;",
      "oldLineNo": "103",
      "newLineNo": "100"
    },
    {
      "type": "deleted",
      "content": "        ? suffix.substring(0, suffix.length() - 3)",
      "lineNo": "104"
    },
    {
      "type": "deleted",
      "content": "        : suffix;",
      "lineNo": "105"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "106",
      "newLineNo": "101"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "107"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "108",
      "newLineNo": "102"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "23",
      "newLineNo": "23"
    },
    {
      "type": "not-modified",
      "content": " protected Object fromHapi(IPrimitiveType primitive) {",
      "oldLineNo": "24",
      "newLineNo": "24"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "25",
      "newLineNo": "25"
    },
    {
      "type": "modified",
      "oldContent": " return \"?\".equals(primitive.getValueAsString())",
      "newContent": " return \"?\".equals(primitive.getValueAsString()) ? null : primitive.getValueAsString();",
      "oldLineNo": "26",
      "newLineNo": "26"
    },
    {
      "type": "deleted",
      "content": "        ? null",
      "lineNo": "27"
    },
    {
      "type": "deleted",
      "content": "        : primitive.getValueAsString();",
      "lineNo": "28"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "29",
      "newLineNo": "27"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "30",
      "newLineNo": "28"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.instance.model.api.IBaseResource;",
      "oldLineNo": "10",
      "newLineNo": "10"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "11",
      "newLineNo": "11"
    },
    {
      "type": "not-modified",
      "content": "/**",
      "oldLineNo": "12",
      "newLineNo": "12"
    },
    {
      "type": "modified",
      "oldContent": " * Helper functions to allow code to convert FHIR resources",
      "newContent": " * Helper functions to allow code to convert FHIR resources independently of the FHIR version.",
      "oldLineNo": "13",
      "newLineNo": "13"
    },
    {
      "type": "modified",
      "oldContent": " * independently of the FHIR version. Typically an implementation specific",
      "newContent": " * Typically an implementation specific to a FHIR version is provided at runtime.",
      "oldLineNo": "14",
      "newLineNo": "14"
    },
    {
      "type": "deleted",
      "content": " * to a FHIR version is provided at runtime.",
      "lineNo": "15"
    },
    {
      "type": "not-modified",
      "content": " */",
      "oldLineNo": "16",
      "newLineNo": "15"
    },
    {
      "type": "not-modified",
      "content": "public abstract class FhirConversionSupport implements Serializable {",
      "oldLineNo": "17",
      "newLineNo": "16"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "18",
      "newLineNo": "17"
    },
    {
      "type": "not-modified",
      "content": " private static final String STU3_SUPPORT_CLASS =",
      "oldLineNo": "19",
      "newLineNo": "18"
    },
    {
      "type": "not-modified",
      "content": " \"com.cerner.bunsen.definitions.stu3.Stu3FhirConversionSupport\";",
      "oldLineNo": "20",
      "newLineNo": "19"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "21",
      "newLineNo": "20"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "22"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "23",
      "newLineNo": "21"
    },
    {
      "type": "not-modified",
      "content": "   * Returns the type of a given FHIR object, such as \"Condition\" or \"Observation\".",
      "oldLineNo": "24",
      "newLineNo": "22"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "25",
      "newLineNo": "23"
    },
    {
      "type": "not-modified",
      "content": " public abstract String fhirType(IBase base);",
      "oldLineNo": "29",
      "newLineNo": "27"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "30",
      "newLineNo": "28"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "31",
      "newLineNo": "29"
    },
    {
      "type": "modified",
      "oldContent": "   * Returns a map of the fields in a composite type to the corresponding values. Since",
      "newContent": "   * Returns a map of the fields in a composite type to the corresponding values. Since FHIR fields",
      "oldLineNo": "32",
      "newLineNo": "30"
    },
    {
      "type": "modified",
      "oldContent": "   * FHIR fields may have multiple values a list is returned, and single-valued items",
      "newContent": "   * may have multiple values a list is returned, and single-valued items will have a singleton",
      "oldLineNo": "33",
      "newLineNo": "31"
    },
    {
      "type": "modified",
      "oldContent": "   * will have a singleton list.",
      "newContent": "   * list.",
      "oldLineNo": "34",
      "newLineNo": "32"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "35",
      "newLineNo": "33"
    },
    {
      "type": "not-modified",
      "content": "   * @param composite a FHIR composite type",
      "oldLineNo": "36",
      "newLineNo": "34"
    },
    {
      "type": "not-modified",
      "content": "   * @return a map of field names to the values.",
      "oldLineNo": "37",
      "newLineNo": "35"
    },
    {
      "type": "not-modified",
      "content": "   * @param resourceType the resource type name, such as \"Condition\" or \"Observation\"",
      "oldLineNo": "45",
      "newLineNo": "43"
    },
    {
      "type": "not-modified",
      "content": "   * @return the resources of the specified type.",
      "oldLineNo": "46",
      "newLineNo": "44"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "47",
      "newLineNo": "45"
    },
    {
      "type": "modified",
      "oldContent": " public abstract java.util.List<IBaseResource> extractEntryFromBundle(IBaseBundle bundle,",
      "newContent": " public abstract java.util.List<IBaseResource> extractEntryFromBundle(",
      "oldLineNo": "48",
      "newLineNo": "46"
    },
    {
      "type": "modified",
      "oldContent": " String resourceType);",
      "newContent": " IBaseBundle bundle, String resourceType);",
      "oldLineNo": "49",
      "newLineNo": "47"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "50",
      "newLineNo": "48"
    },
    {
      "type": "modified",
      "oldContent": " /**",
      "newContent": " /** Cache of FHIR contexts. */",
      "oldLineNo": "51",
      "newLineNo": "49"
    },
    {
      "type": "deleted",
      "content": "   * Cache of FHIR contexts.",
      "lineNo": "52"
    },
    {
      "type": "deleted",
      "content": "   */",
      "lineNo": "53"
    },
    {
      "type": "not-modified",
      "content": " private static final Map<FhirVersionEnum, FhirConversionSupport> FHIR_SUPPORT = new HashMap();",
      "oldLineNo": "54",
      "newLineNo": "50"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "55",
      "newLineNo": "51"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "56"
    },
    {
      "type": "not-modified",
      "content": " private static FhirConversionSupport newInstance(FhirVersionEnum fhirVersion) {",
      "oldLineNo": "57",
      "newLineNo": "52"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "58",
      "newLineNo": "53"
    },
    {
      "type": "not-modified",
      "content": " Class fhirSupportClass;",
      "oldLineNo": "59",
      "newLineNo": "54"
    },
    {
      "type": "not-modified",
      "content": "      } catch (ClassNotFoundException exception) {",
      "oldLineNo": "66",
      "newLineNo": "61"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "67",
      "newLineNo": "62"
    },
    {
      "type": "not-modified",
      "content": " throw new IllegalStateException(exception);",
      "oldLineNo": "68",
      "newLineNo": "63"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "69"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "70",
      "newLineNo": "64"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "71",
      "newLineNo": "65"
    },
    {
      "type": "not-modified",
      "content": "    } else {",
      "oldLineNo": "72",
      "newLineNo": "66"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "84",
      "newLineNo": "78"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "85",
      "newLineNo": "79"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "86",
      "newLineNo": "80"
    },
    {
      "type": "modified",
      "oldContent": "   * Returns the FHIR context for the given version. This is effectively a cache",
      "newContent": "   * Returns the FHIR context for the given version. This is effectively a cache so consuming code",
      "oldLineNo": "87",
      "newLineNo": "81"
    },
    {
      "type": "modified",
      "oldContent": "   * so consuming code does not need to recreate the context repeatedly.",
      "newContent": "   * does not need to recreate the context repeatedly.",
      "oldLineNo": "88",
      "newLineNo": "82"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "89",
      "newLineNo": "83"
    },
    {
      "type": "not-modified",
      "content": "   * @param fhirVersion the version of FHIR to use",
      "oldLineNo": "90",
      "newLineNo": "84"
    },
    {
      "type": "not-modified",
      "content": "   * @return the FhirContext",
      "oldLineNo": "91",
      "newLineNo": "85"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "92",
      "newLineNo": "86"
    },
    {
      "type": "not-modified",
      "content": " public static FhirConversionSupport supportFor(FhirVersionEnum fhirVersion) {",
      "oldLineNo": "93",
      "newLineNo": "87"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "94",
      "newLineNo": "88"
    },
    {
      "type": "not-modified",
      "content": " synchronized (FHIR_SUPPORT) {",
      "oldLineNo": "95",
      "newLineNo": "89"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "96"
    },
    {
      "type": "not-modified",
      "content": " FhirConversionSupport support = FHIR_SUPPORT.get(fhirVersion);",
      "oldLineNo": "97",
      "newLineNo": "90"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "98",
      "newLineNo": "91"
    },
    {
      "type": "not-modified",
      "content": " if (support == null) {",
      "oldLineNo": "99",
      "newLineNo": "92"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "14",
      "newLineNo": "14"
    },
    {
      "type": "not-modified",
      "content": " protected abstract Object createComposite(Object[] children);",
      "oldLineNo": "15",
      "newLineNo": "15"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "16",
      "newLineNo": "16"
    },
    {
      "type": "modified",
      "oldContent": " private final Map<String,HapiConverter<T>> choiceTypes;",
      "newContent": " private final Map<String, HapiConverter<T>> choiceTypes;",
      "oldLineNo": "17",
      "newLineNo": "17"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "18",
      "newLineNo": "18"
    },
    {
      "type": "not-modified",
      "content": " private final T structType;",
      "oldLineNo": "19",
      "newLineNo": "19"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "20",
      "newLineNo": "20"
    },
    {
      "type": "not-modified",
      "content": " private final FhirConversionSupport fhirSupport;",
      "oldLineNo": "21",
      "newLineNo": "21"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "22",
      "newLineNo": "22"
    },
    {
      "type": "not-modified",
      "content": " private final class ChoiceFieldSetter implements HapiFieldSetter {",
      "oldLineNo": "23",
      "newLineNo": "23"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "24",
      "newLineNo": "24"
    },
    {
      "type": "modified",
      "oldContent": " private final Map<String,HapiFieldSetter> choiceFieldSetters;",
      "newContent": " private final Map<String, HapiFieldSetter> choiceFieldSetters;",
      "oldLineNo": "25",
      "newLineNo": "25"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "26",
      "newLineNo": "26"
    },
    {
      "type": "not-modified",
      "content": " ChoiceFieldSetter(Map<String, HapiFieldSetter> choiceFieldSetters) {",
      "oldLineNo": "27",
      "newLineNo": "27"
    },
    {
      "type": "not-modified",
      "content": " this.choiceFieldSetters = choiceFieldSetters;",
      "oldLineNo": "28",
      "newLineNo": "28"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "29",
      "newLineNo": "29"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "30",
      "newLineNo": "30"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "31",
      "newLineNo": "31"
    },
    {
      "type": "modified",
      "oldContent": " public void setField(IBase parentObject,",
      "newContent": " public void setField(",
      "oldLineNo": "32",
      "newLineNo": "32"
    },
    {
      "type": "modified",
      "oldContent": " BaseRuntimeChildDefinition fieldToSet,",
      "newContent": " IBase parentObject, BaseRuntimeChildDefinition fieldToSet, Object composite) {",
      "oldLineNo": "33",
      "newLineNo": "33"
    },
    {
      "type": "deleted",
      "content": " Object composite) {",
      "lineNo": "34"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "35",
      "newLineNo": "34"
    },
    {
      "type": "not-modified",
      "content": " Iterator<Entry<String, HapiFieldSetter>> setterIterator =",
      "oldLineNo": "36",
      "newLineNo": "35"
    },
    {
      "type": "not-modified",
      "content": " choiceFieldSetters.entrySet().iterator();",
      "oldLineNo": "37",
      "newLineNo": "36"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "54",
      "newLineNo": "53"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "55",
      "newLineNo": "54"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "56",
      "newLineNo": "55"
    },
    {
      "type": "modified",
      "oldContent": " protected HapiChoiceConverter(Map<String, HapiConverter<T>> choiceTypes,",
      "newContent": " protected HapiChoiceConverter(",
      "oldLineNo": "57",
      "newLineNo": "56"
    },
    {
      "type": "modified",
      "oldContent": " T structType,",
      "newContent": " Map<String, HapiConverter<T>> choiceTypes, T structType, FhirConversionSupport fhirSupport) {",
      "oldLineNo": "58",
      "newLineNo": "57"
    },
    {
      "type": "deleted",
      "content": " FhirConversionSupport fhirSupport) {",
      "lineNo": "59"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "60",
      "newLineNo": "58"
    },
    {
      "type": "not-modified",
      "content": " this.choiceTypes = choiceTypes;",
      "oldLineNo": "61",
      "newLineNo": "59"
    },
    {
      "type": "not-modified",
      "content": " this.structType = structType;",
      "oldLineNo": "62",
      "newLineNo": "60"
    },
    {
      "type": "not-modified",
      "content": " this.fhirSupport = fhirSupport;",
      "oldLineNo": "63",
      "newLineNo": "61"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "64",
      "newLineNo": "62"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "65",
      "newLineNo": "63"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "66"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "67",
      "newLineNo": "64"
    },
    {
      "type": "not-modified",
      "content": " public Object fromHapi(Object input) {",
      "oldLineNo": "68",
      "newLineNo": "65"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "69",
      "newLineNo": "66"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "86",
      "newLineNo": "83"
    },
    {
      "type": "not-modified",
      "content": " values[valueIndex] = converter.fromHapi(input);",
      "oldLineNo": "87",
      "newLineNo": "84"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "88",
      "newLineNo": "85"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "89"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "90",
      "newLineNo": "86"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "91",
      "newLineNo": "87"
    },
    {
      "type": "not-modified",
      "content": " return createComposite(values);",
      "oldLineNo": "92",
      "newLineNo": "88"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "97",
      "newLineNo": "93"
    },
    {
      "type": "not-modified",
      "content": " Map<String, HapiFieldSetter> fieldSetters = new LinkedHashMap<>();",
      "oldLineNo": "98",
      "newLineNo": "94"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "99",
      "newLineNo": "95"
    },
    {
      "type": "modified",
      "oldContent": " for (Map.Entry<String, HapiConverter<T>> choiceEntry: choiceTypes.entrySet()) {",
      "newContent": " for (Map.Entry<String, HapiConverter<T>> choiceEntry : choiceTypes.entrySet()) {",
      "oldLineNo": "100",
      "newLineNo": "96"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "101",
      "newLineNo": "97"
    },
    {
      "type": "not-modified",
      "content": " // The list is small and only consumed when generating the conversion functions,",
      "oldLineNo": "102",
      "newLineNo": "98"
    },
    {
      "type": "not-modified",
      "content": " // so a nested loop isn't a performance issue.",
      "oldLineNo": "103",
      "newLineNo": "99"
    },
    {
      "type": "modified",
      "oldContent": " for (BaseRuntimeElementDefinition elementDefinition: elementDefinitions) {",
      "newContent": " for (BaseRuntimeElementDefinition elementDefinition : elementDefinitions) {",
      "oldLineNo": "104",
      "newLineNo": "100"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "105",
      "newLineNo": "101"
    },
    {
      "type": "not-modified",
      "content": " if (elementDefinition.getName().equals(choiceEntry.getKey())) {",
      "oldLineNo": "106",
      "newLineNo": "102"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "107",
      "newLineNo": "103"
    },
    {
      "type": "modified",
      "oldContent": " fieldSetters.put(choiceEntry.getKey(),",
      "newContent": " fieldSetters.put(",
      "oldLineNo": "108",
      "newLineNo": "104"
    },
    {
      "type": "modified",
      "oldContent": " choiceEntry.getValue().toHapiConverter(elementDefinition));",
      "newContent": " choiceEntry.getKey(), choiceEntry.getValue().toHapiConverter(elementDefinition));",
      "oldLineNo": "109",
      "newLineNo": "105"
    },
    {
      "type": "not-modified",
      "content": "        }",
      "oldLineNo": "110",
      "newLineNo": "106"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "111",
      "newLineNo": "107"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "112",
      "newLineNo": "108"
    },
    {
      "type": "not-modified",
      "content": " public T getDataType() {",
      "oldLineNo": "118",
      "newLineNo": "114"
    },
    {
      "type": "not-modified",
      "content": " return structType;",
      "oldLineNo": "119",
      "newLineNo": "115"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "120",
      "newLineNo": "116"
    },
    {
      "type": "modified",
      "oldContent": "}",
      "newContent": "}",
      "oldLineNo": "121",
      "newLineNo": "117"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "38",
      "newLineNo": "38"
    },
    {
      "type": "not-modified",
      "content": " protected abstract boolean isMultiValued(T schemaType);",
      "oldLineNo": "39",
      "newLineNo": "39"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "40",
      "newLineNo": "40"
    },
    {
      "type": "modified",
      "oldContent": " /**",
      "newContent": " /** Field setter that does nothing for synthetic or unsupported field types. */",
      "oldLineNo": "41",
      "newLineNo": "41"
    },
    {
      "type": "modified",
      "oldContent": "   * Field setter that does nothing for synthetic or unsupported field types.",
      "newContent": " private static final class NoOpFieldSetter implements HapiFieldSetter, HapiObjectConverter {",
      "oldLineNo": "42",
      "newLineNo": "42"
    },
    {
      "type": "deleted",
      "content": "   */",
      "lineNo": "43"
    },
    {
      "type": "deleted",
      "content": " private static final class NoOpFieldSetter implements HapiFieldSetter,",
      "lineNo": "44"
    },
    {
      "type": "deleted",
      "content": " HapiObjectConverter {",
      "lineNo": "45"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "46",
      "newLineNo": "43"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "47",
      "newLineNo": "44"
    },
    {
      "type": "modified",
      "oldContent": " public void setField(IBase parentObject, BaseRuntimeChildDefinition fieldToSet,",
      "newContent": " public void setField(",
      "oldLineNo": "48",
      "newLineNo": "45"
    },
    {
      "type": "modified",
      "oldContent": " Object sourceObject) {",
      "newContent": " IBase parentObject, BaseRuntimeChildDefinition fieldToSet, Object sourceObject) {}",
      "oldLineNo": "49",
      "newLineNo": "46"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "50"
    },
    {
      "type": "deleted",
      "content": "    }",
      "lineNo": "51"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "52",
      "newLineNo": "47"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "53",
      "newLineNo": "48"
    },
    {
      "type": "not-modified",
      "content": " public IBase toHapi(Object input) {",
      "oldLineNo": "54",
      "newLineNo": "49"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "58",
      "newLineNo": "53"
    },
    {
      "type": "not-modified",
      "content": " private static final HapiFieldSetter NOOP_FIELD_SETTER = new NoOpFieldSetter();",
      "oldLineNo": "59",
      "newLineNo": "54"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "60",
      "newLineNo": "55"
    },
    {
      "type": "modified",
      "oldContent": " protected final class CompositeFieldSetter implements HapiFieldSetter,",
      "newContent": " protected final class CompositeFieldSetter implements HapiFieldSetter, HapiObjectConverter {",
      "oldLineNo": "61",
      "newLineNo": "56"
    },
    {
      "type": "deleted",
      "content": " HapiObjectConverter {",
      "lineNo": "62"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "63",
      "newLineNo": "57"
    },
    {
      "type": "not-modified",
      "content": " private final List<StructureField<HapiFieldSetter>> children;",
      "oldLineNo": "64",
      "newLineNo": "58"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "65",
      "newLineNo": "59"
    },
    {
      "type": "not-modified",
      "content": " private final BaseRuntimeElementCompositeDefinition compositeDefinition;",
      "oldLineNo": "66",
      "newLineNo": "60"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "67",
      "newLineNo": "61"
    },
    {
      "type": "modified",
      "oldContent": " CompositeFieldSetter(BaseRuntimeElementCompositeDefinition compositeDefinition,",
      "newContent": " CompositeFieldSetter(",
      "oldLineNo": "68",
      "newLineNo": "62"
    },
    {
      "type": "added",
      "content": " BaseRuntimeElementCompositeDefinition compositeDefinition,",
      "lineNo": "63"
    },
    {
      "type": "not-modified",
      "content": " List<StructureField<HapiFieldSetter>> children) {",
      "oldLineNo": "69",
      "newLineNo": "64"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "70",
      "newLineNo": "65"
    },
    {
      "type": "not-modified",
      "content": " this.compositeDefinition = compositeDefinition;",
      "oldLineNo": "71",
      "newLineNo": "66"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "94",
      "newLineNo": "89"
    },
    {
      "type": "not-modified",
      "content": " if (child.extensionUrl() != null) {",
      "oldLineNo": "95",
      "newLineNo": "90"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "96",
      "newLineNo": "91"
    },
    {
      "type": "modified",
      "oldContent": " BaseRuntimeChildDefinition childDefinition = child.isModifier()",
      "newContent": " BaseRuntimeChildDefinition childDefinition =",
      "oldLineNo": "97",
      "newLineNo": "92"
    },
    {
      "type": "modified",
      "oldContent": "                ? compositeDefinition.getChildByName(\"modifierExtension\")",
      "newContent": " child.isModifier()",
      "oldLineNo": "98",
      "newLineNo": "93"
    },
    {
      "type": "modified",
      "oldContent": "                : compositeDefinition.getChildByName(\"extension\");",
      "newContent": "                    ? compositeDefinition.getChildByName(\"modifierExtension\")",
      "oldLineNo": "99",
      "newLineNo": "94"
    },
    {
      "type": "added",
      "content": "                    : compositeDefinition.getChildByName(\"extension\");",
      "lineNo": "95"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "100",
      "newLineNo": "96"
    },
    {
      "type": "not-modified",
      "content": " child.result().setField(fhirObject, childDefinition, fieldValue);",
      "oldLineNo": "101",
      "newLineNo": "97"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "102",
      "newLineNo": "98"
    },
    {
      "type": "not-modified",
      "content": "          } else {",
      "oldLineNo": "103",
      "newLineNo": "99"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "104",
      "newLineNo": "100"
    },
    {
      "type": "modified",
      "oldContent": " String propertyName = child.isChoice()",
      "newContent": " String propertyName =",
      "oldLineNo": "105",
      "newLineNo": "101"
    },
    {
      "type": "modified",
      "oldContent": "                ? child.propertyName() + \"[x]\"",
      "newContent": " child.isChoice() ? child.propertyName() + \"[x]\" : child.propertyName();",
      "oldLineNo": "106",
      "newLineNo": "102"
    },
    {
      "type": "deleted",
      "content": "                : child.propertyName();",
      "lineNo": "107"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "108",
      "newLineNo": "103"
    },
    {
      "type": "not-modified",
      "content": " BaseRuntimeChildDefinition childDefinition =",
      "oldLineNo": "109",
      "newLineNo": "104"
    },
    {
      "type": "not-modified",
      "content": " compositeDefinition.getChildByName(propertyName);",
      "oldLineNo": "110",
      "newLineNo": "105"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "111",
      "newLineNo": "106"
    },
    {
      "type": "not-modified",
      "content": " child.result().setField(fhirObject, childDefinition, fieldValue);",
      "oldLineNo": "112",
      "newLineNo": "107"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "113"
    },
    {
      "type": "not-modified",
      "content": "          }",
      "oldLineNo": "114",
      "newLineNo": "108"
    },
    {
      "type": "not-modified",
      "content": "        }",
      "oldLineNo": "115",
      "newLineNo": "109"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "116",
      "newLineNo": "110"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "124",
      "newLineNo": "118"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "125",
      "newLineNo": "119"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "126",
      "newLineNo": "120"
    },
    {
      "type": "modified",
      "oldContent": " public void setField(IBase parentObject,",
      "newContent": " public void setField(",
      "oldLineNo": "127",
      "newLineNo": "121"
    },
    {
      "type": "modified",
      "oldContent": " BaseRuntimeChildDefinition fieldToSet,",
      "newContent": " IBase parentObject, BaseRuntimeChildDefinition fieldToSet, Object sourceObject) {",
      "oldLineNo": "128",
      "newLineNo": "122"
    },
    {
      "type": "deleted",
      "content": " Object sourceObject) {",
      "lineNo": "129"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "130",
      "newLineNo": "123"
    },
    {
      "type": "not-modified",
      "content": " IBase fhirObject = toHapi(sourceObject);",
      "oldLineNo": "131",
      "newLineNo": "124"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "132",
      "newLineNo": "125"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "140",
      "newLineNo": "133"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "141",
      "newLineNo": "134"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "142",
      "newLineNo": "135"
    },
    {
      "type": "modified",
      "oldContent": " protected HapiCompositeConverter(String elementType,",
      "newContent": " protected HapiCompositeConverter(",
      "oldLineNo": "143",
      "newLineNo": "136"
    },
    {
      "type": "added",
      "content": " String elementType,",
      "lineNo": "137"
    },
    {
      "type": "not-modified",
      "content": " List<StructureField<HapiConverter<T>>> children,",
      "oldLineNo": "144",
      "newLineNo": "138"
    },
    {
      "type": "not-modified",
      "content": " T structType,",
      "oldLineNo": "145",
      "newLineNo": "139"
    },
    {
      "type": "not-modified",
      "content": " FhirConversionSupport fhirSupport,",
      "oldLineNo": "146",
      "newLineNo": "140"
    },
    {
      "type": "not-modified",
      "content": "      } else if (converter.extensionUrl() != null) {",
      "oldLineNo": "214",
      "newLineNo": "208"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "215",
      "newLineNo": "209"
    },
    {
      "type": "not-modified",
      "content": " // No corresponding property for the name, so see if it is an Extension or ModifierExtention",
      "oldLineNo": "216",
      "newLineNo": "210"
    },
    {
      "type": "modified",
      "oldContent": " List<? extends IBaseExtension> extensions = schemaEntry.isModifier()",
      "newContent": " List<? extends IBaseExtension> extensions =",
      "oldLineNo": "217",
      "newLineNo": "211"
    },
    {
      "type": "modified",
      "oldContent": "            ? ((IBaseHasModifierExtensions) composite).getModifierExtension()",
      "newContent": " schemaEntry.isModifier()",
      "oldLineNo": "218",
      "newLineNo": "212"
    },
    {
      "type": "modified",
      "oldContent": "            : ((IBaseHasExtensions) composite).getExtension();",
      "newContent": "                ? ((IBaseHasModifierExtensions) composite).getModifierExtension()",
      "oldLineNo": "219",
      "newLineNo": "213"
    },
    {
      "type": "added",
      "content": "                : ((IBaseHasExtensions) composite).getExtension();",
      "lineNo": "214"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "220",
      "newLineNo": "215"
    },
    {
      "type": "modified",
      "oldContent": " for (IBaseExtension extension: extensions) {",
      "newContent": " for (IBaseExtension extension : extensions) {",
      "oldLineNo": "221",
      "newLineNo": "216"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "222",
      "newLineNo": "217"
    },
    {
      "type": "not-modified",
      "content": " if (extension.getUrl().equals(converter.extensionUrl())) {",
      "oldLineNo": "223",
      "newLineNo": "218"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "224",
      "newLineNo": "219"
    },
    {
      "type": "not-modified",
      "content": "        }",
      "oldLineNo": "227",
      "newLineNo": "222"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "228",
      "newLineNo": "223"
    },
    {
      "type": "not-modified",
      "content": "      } else if (converter instanceof MultiValueConverter",
      "oldLineNo": "229",
      "newLineNo": "224"
    },
    {
      "type": "modified",
      "oldContent": "          && ((MultiValueConverter)converter).getElementConverter().extensionUrl() != null) {",
      "newContent": "          && ((MultiValueConverter) converter).getElementConverter().extensionUrl() != null) {",
      "oldLineNo": "230",
      "newLineNo": "225"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "231",
      "newLineNo": "226"
    },
    {
      "type": "not-modified",
      "content": " final String extensionUrl =",
      "oldLineNo": "232",
      "newLineNo": "227"
    },
    {
      "type": "not-modified",
      "content": "            ((MultiValueConverter) converter).getElementConverter().extensionUrl();",
      "oldLineNo": "233",
      "newLineNo": "228"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "234",
      "newLineNo": "229"
    },
    {
      "type": "modified",
      "oldContent": " List<? extends IBaseExtension> extensions = schemaEntry.isModifier()",
      "newContent": " List<? extends IBaseExtension> extensions =",
      "oldLineNo": "235",
      "newLineNo": "230"
    },
    {
      "type": "modified",
      "oldContent": "            ? ((IBaseHasModifierExtensions) composite).getModifierExtension()",
      "newContent": " schemaEntry.isModifier()",
      "oldLineNo": "236",
      "newLineNo": "231"
    },
    {
      "type": "modified",
      "oldContent": "            : ((IBaseHasExtensions) composite).getExtension();",
      "newContent": "                ? ((IBaseHasModifierExtensions) composite).getModifierExtension()",
      "oldLineNo": "237",
      "newLineNo": "232"
    },
    {
      "type": "added",
      "content": "                : ((IBaseHasExtensions) composite).getExtension();",
      "lineNo": "233"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "238",
      "newLineNo": "234"
    },
    {
      "type": "modified",
      "oldContent": " final List<? extends IBaseExtension> extensionList = extensions.stream()",
      "newContent": " final List<? extends IBaseExtension> extensionList =",
      "oldLineNo": "239",
      "newLineNo": "235"
    },
    {
      "type": "modified",
      "oldContent": "            .filter(extension -> extension.getUrl().equals(extensionUrl))",
      "newContent": " extensions.stream()",
      "oldLineNo": "240",
      "newLineNo": "236"
    },
    {
      "type": "modified",
      "oldContent": "            .collect(Collectors.toList());",
      "newContent": "                .filter(extension -> extension.getUrl().equals(extensionUrl))",
      "oldLineNo": "241",
      "newLineNo": "237"
    },
    {
      "type": "added",
      "content": "                .collect(Collectors.toList());",
      "lineNo": "238"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "242",
      "newLineNo": "239"
    },
    {
      "type": "not-modified",
      "content": " if (extensionList.size() > 0) {",
      "oldLineNo": "243",
      "newLineNo": "240"
    },
    {
      "type": "not-modified",
      "content": " values[valueIndex] = schemaEntry.result().fromHapi(extensionList);",
      "oldLineNo": "244",
      "newLineNo": "241"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "261",
      "newLineNo": "258"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "262",
      "newLineNo": "259"
    },
    {
      "type": "not-modified",
      "content": " if (!(elementDefinition instanceof BaseRuntimeElementCompositeDefinition)) {",
      "oldLineNo": "263",
      "newLineNo": "260"
    },
    {
      "type": "modified",
      "oldContent": " throw new IllegalArgumentException(\"Composite converter must be given a \"",
      "newContent": " throw new IllegalArgumentException(",
      "oldLineNo": "264",
      "newLineNo": "261"
    },
    {
      "type": "modified",
      "oldContent": "          + \"single composite element, received: \"",
      "newContent": " \"Composite converter must be given a \"",
      "oldLineNo": "265",
      "newLineNo": "262"
    },
    {
      "type": "modified",
      "oldContent": "          + elementDefinition.getName());",
      "newContent": "              + \"single composite element, received: \"",
      "oldLineNo": "266",
      "newLineNo": "263"
    },
    {
      "type": "added",
      "content": "              + elementDefinition.getName());",
      "lineNo": "264"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "267",
      "newLineNo": "265"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "268",
      "newLineNo": "266"
    },
    {
      "type": "not-modified",
      "content": " BaseRuntimeElementCompositeDefinition compositeDefinition =",
      "oldLineNo": "269",
      "newLineNo": "267"
    },
    {
      "type": "not-modified",
      "content": "        (BaseRuntimeElementCompositeDefinition) elementDefinition;",
      "oldLineNo": "270",
      "newLineNo": "268"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "271",
      "newLineNo": "269"
    },
    {
      "type": "modified",
      "oldContent": " List<StructureField<HapiFieldSetter>> toHapiChildren = children.stream().map(child -> {",
      "newContent": " List<StructureField<HapiFieldSetter>> toHapiChildren =",
      "oldLineNo": "272",
      "newLineNo": "270"
    },
    {
      "type": "added",
      "content": " children.stream()",
      "lineNo": "271"
    },
    {
      "type": "added",
      "content": "            .map(",
      "lineNo": "272"
    },
    {
      "type": "added",
      "content": " child -> {",
      "lineNo": "273"
    },
    {
      "type": "added",
      "content": " HapiFieldSetter childConverter;",
      "lineNo": "274"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "273",
      "newLineNo": "275"
    },
    {
      "type": "modified",
      "oldContent": " HapiFieldSetter childConverter;",
      "newContent": "  if (\"contained\".equals(child.propertyName())) {",
      "oldLineNo": "274",
      "newLineNo": "276"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "275",
      "newLineNo": "277"
    },
    {
      "type": "modified",
      "oldContent": " if (\"contained\".equals(child.propertyName())) {",
      "newContent": " // Handle contained resources.",
      "oldLineNo": "276",
      "newLineNo": "278"
    },
    {
      "type": "added",
      "content": " HapiFieldSetter containedFieldSetter = NOOP_FIELD_SETTER;",
      "lineNo": "279"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "277",
      "newLineNo": "280"
    },
    {
      "type": "modified",
      "oldContent": " // Handle contained resources.",
      "newContent": " if (elementDefinitions.length > 1) {",
      "oldLineNo": "278",
      "newLineNo": "281"
    },
    {
      "type": "deleted",
      "content": " HapiFieldSetter containedFieldSetter = NOOP_FIELD_SETTER;",
      "lineNo": "279"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "280",
      "newLineNo": "282"
    },
    {
      "type": "modified",
      "oldContent": " if (elementDefinitions.length > 1) {",
      "newContent": " BaseRuntimeElementDefinition containedDefinition =",
      "oldLineNo": "281",
      "newLineNo": "283"
    },
    {
      "type": "added",
      "content": " compositeDefinition",
      "lineNo": "284"
    },
    {
      "type": "added",
      "content": "                              .getChildByName(\"contained\")",
      "lineNo": "285"
    },
    {
      "type": "added",
      "content": "                              .getChildByName(\"contained\");",
      "lineNo": "286"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "282",
      "newLineNo": "287"
    },
    {
      "type": "modified",
      "oldContent": " BaseRuntimeElementDefinition containedDefinition = compositeDefinition",
      "newContent": " BaseRuntimeElementDefinition[] containedDefinitions =",
      "oldLineNo": "283",
      "newLineNo": "288"
    },
    {
      "type": "modified",
      "oldContent": "              .getChildByName(\"contained\")",
      "newContent": " new BaseRuntimeElementDefinition[elementDefinitions.length];",
      "oldLineNo": "284",
      "newLineNo": "289"
    },
    {
      "type": "deleted",
      "content": "              .getChildByName(\"contained\");",
      "lineNo": "285"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "286",
      "newLineNo": "290"
    },
    {
      "type": "modified",
      "oldContent": " BaseRuntimeElementDefinition[] containedDefinitions =",
      "newContent": " containedDefinitions[0] = containedDefinition;",
      "oldLineNo": "287",
      "newLineNo": "291"
    },
    {
      "type": "deleted",
      "content": " new BaseRuntimeElementDefinition[elementDefinitions.length];",
      "lineNo": "288"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "289",
      "newLineNo": "292"
    },
    {
      "type": "modified",
      "oldContent": " containedDefinitions[0] = containedDefinition;",
      "newContent": " System.arraycopy(",
      "oldLineNo": "290",
      "newLineNo": "293"
    },
    {
      "type": "added",
      "content": " elementDefinitions,",
      "lineNo": "294"
    },
    {
      "type": "added",
      "content": " 1,",
      "lineNo": "295"
    },
    {
      "type": "added",
      "content": " containedDefinitions,",
      "lineNo": "296"
    },
    {
      "type": "added",
      "content": " 1,",
      "lineNo": "297"
    },
    {
      "type": "added",
      "content": " containedDefinitions.length - 1);",
      "lineNo": "298"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "291",
      "newLineNo": "299"
    },
    {
      "type": "modified",
      "oldContent": " System.arraycopy(elementDefinitions,",
      "newContent": " containedFieldSetter = child.result().toHapiConverter(containedDefinitions);",
      "oldLineNo": "292",
      "newLineNo": "300"
    },
    {
      "type": "modified",
      "oldContent": " 1,",
      "newContent": "                    }",
      "oldLineNo": "293",
      "newLineNo": "301"
    },
    {
      "type": "deleted",
      "content": " containedDefinitions,",
      "lineNo": "294"
    },
    {
      "type": "deleted",
      "content": " 1,",
      "lineNo": "295"
    },
    {
      "type": "deleted",
      "content": " containedDefinitions.length - 1);",
      "lineNo": "296"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "297",
      "newLineNo": "302"
    },
    {
      "type": "modified",
      "oldContent": " containedFieldSetter = child.result().toHapiConverter(containedDefinitions);",
      "newContent": "  return new StructureField<>(",
      "oldLineNo": "298",
      "newLineNo": "303"
    },
    {
      "type": "modified",
      "oldContent": " }",
      "newContent": "  \"contained\", \"contained\", null, false, false, containedFieldSetter);",
      "oldLineNo": "299",
      "newLineNo": "304"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "300",
      "newLineNo": "305"
    },
    {
      "type": "modified",
      "oldContent": " return new StructureField<>(\"contained\",",
      "newContent": "                  } else if (child.extensionUrl() != null) {",
      "oldLineNo": "301",
      "newLineNo": "306"
    },
    {
      "type": "deleted",
      "content": " \"contained\",",
      "lineNo": "302"
    },
    {
      "type": "deleted",
      "content": " null,",
      "lineNo": "303"
    },
    {
      "type": "deleted",
      "content": " false,",
      "lineNo": "304"
    },
    {
      "type": "deleted",
      "content": " false,",
      "lineNo": "305"
    },
    {
      "type": "deleted",
      "content": " containedFieldSetter);",
      "lineNo": "306"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "307",
      "newLineNo": "307"
    },
    {
      "type": "modified",
      "oldContent": "      } else if (child.extensionUrl() != null) {",
      "newContent": " // Handle extensions.",
      "oldLineNo": "308",
      "newLineNo": "308"
    },
    {
      "type": "added",
      "content": " BaseRuntimeChildDefinition childDefinition =",
      "lineNo": "309"
    },
    {
      "type": "added",
      "content": " compositeDefinition.getChildByName(\"extension\");",
      "lineNo": "310"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "309",
      "newLineNo": "311"
    },
    {
      "type": "modified",
      "oldContent": " // Handle extensions.",
      "newContent": " childConverter =",
      "oldLineNo": "310",
      "newLineNo": "312"
    },
    {
      "type": "modified",
      "oldContent": " BaseRuntimeChildDefinition childDefinition =",
      "newContent": " child.result().toHapiConverter(childDefinition.getChildByName(\"extension\"));",
      "oldLineNo": "311",
      "newLineNo": "313"
    },
    {
      "type": "deleted",
      "content": " compositeDefinition.getChildByName(\"extension\");",
      "lineNo": "312"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "313",
      "newLineNo": "314"
    },
    {
      "type": "modified",
      "oldContent": " childConverter = child.result()",
      "newContent": "                  } else {",
      "oldLineNo": "314",
      "newLineNo": "315"
    },
    {
      "type": "deleted",
      "content": "            .toHapiConverter(childDefinition.getChildByName(\"extension\"));",
      "lineNo": "315"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "316",
      "newLineNo": "316"
    },
    {
      "type": "modified",
      "oldContent": " } else {",
      "newContent": "  String propertyName = child.propertyName();",
      "oldLineNo": "317",
      "newLineNo": "317"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "318",
      "newLineNo": "318"
    },
    {
      "type": "modified",
      "oldContent": " String propertyName = child.propertyName();",
      "newContent": " // Append the [x] suffix for choice properties.",
      "oldLineNo": "319",
      "newLineNo": "319"
    },
    {
      "type": "added",
      "content": " if (child.isChoice()) {",
      "lineNo": "320"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "320",
      "newLineNo": "321"
    },
    {
      "type": "modified",
      "oldContent": " // Append the [x] suffix for choice properties.",
      "newContent": "  propertyName = propertyName + \"[x]\";",
      "oldLineNo": "321",
      "newLineNo": "322"
    },
    {
      "type": "modified",
      "oldContent": " if (child.isChoice()) {",
      "newContent": "             }",
      "oldLineNo": "322",
      "newLineNo": "323"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "323",
      "newLineNo": "324"
    },
    {
      "type": "modified",
      "oldContent": " propertyName = propertyName + \"[x]\";",
      "newContent": "  BaseRuntimeChildDefinition childDefinition =",
      "oldLineNo": "324",
      "newLineNo": "325"
    },
    {
      "type": "modified",
      "oldContent": " }",
      "newContent": "  compositeDefinition.getChildByName(propertyName);",
      "oldLineNo": "325",
      "newLineNo": "326"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "326",
      "newLineNo": "327"
    },
    {
      "type": "modified",
      "oldContent": " BaseRuntimeChildDefinition childDefinition =",
      "newContent": " BaseRuntimeElementDefinition[] childElementDefinitions;",
      "oldLineNo": "327",
      "newLineNo": "328"
    },
    {
      "type": "deleted",
      "content": " compositeDefinition.getChildByName(propertyName);",
      "lineNo": "328"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "329",
      "newLineNo": "329"
    },
    {
      "type": "modified",
      "oldContent": " BaseRuntimeElementDefinition[] childElementDefinitions;",
      "newContent": "  if (child.isChoice()) {",
      "oldLineNo": "330",
      "newLineNo": "330"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "331",
      "newLineNo": "331"
    },
    {
      "type": "modified",
      "oldContent": " if (child.isChoice()) {",
      "newContent": "  int childCount = childDefinition.getValidChildNames().size();",
      "oldLineNo": "332",
      "newLineNo": "332"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "333",
      "newLineNo": "333"
    },
    {
      "type": "modified",
      "oldContent": " int childCount = childDefinition.getValidChildNames().size();",
      "newContent": "  childElementDefinitions = new BaseRuntimeElementDefinition[childCount];",
      "oldLineNo": "334",
      "newLineNo": "334"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "335",
      "newLineNo": "335"
    },
    {
      "type": "modified",
      "oldContent": " childElementDefinitions = new BaseRuntimeElementDefinition[childCount];",
      "newContent": "  int index = 0;",
      "oldLineNo": "336",
      "newLineNo": "336"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "337",
      "newLineNo": "337"
    },
    {
      "type": "modified",
      "oldContent": " int index = 0;",
      "newContent": "  for (String childName : childDefinition.getValidChildNames()) {",
      "oldLineNo": "338",
      "newLineNo": "338"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "339",
      "newLineNo": "339"
    },
    {
      "type": "modified",
      "oldContent": " for (String childName: childDefinition.getValidChildNames()) {",
      "newContent": "  childDefinition.getChildByName(childName);",
      "oldLineNo": "340",
      "newLineNo": "340"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "341",
      "newLineNo": "341"
    },
    {
      "type": "modified",
      "oldContent": " childDefinition.getChildByName(childName);",
      "newContent": " childElementDefinitions[index++] =",
      "oldLineNo": "342",
      "newLineNo": "342"
    },
    {
      "type": "added",
      "content": " childDefinition.getChildByName(childName);",
      "lineNo": "343"
    },
    {
      "type": "added",
      "content": "                      }",
      "lineNo": "344"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "343",
      "newLineNo": "345"
    },
    {
      "type": "modified",
      "oldContent": " childElementDefinitions[index++] = childDefinition.getChildByName(childName);",
      "newContent": "                    } else {",
      "oldLineNo": "344",
      "newLineNo": "346"
    },
    {
      "type": "deleted",
      "content": "          }",
      "lineNo": "345"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "346",
      "newLineNo": "347"
    },
    {
      "type": "modified",
      "oldContent": "        } else {",
      "newContent": " childElementDefinitions =",
      "oldLineNo": "347",
      "newLineNo": "348"
    },
    {
      "type": "added",
      "content": " new BaseRuntimeElementDefinition[] {",
      "lineNo": "349"
    },
    {
      "type": "added",
      "content": " childDefinition.getChildByName(propertyName)",
      "lineNo": "350"
    },
    {
      "type": "added",
      "content": "                          };",
      "lineNo": "351"
    },
    {
      "type": "added",
      "content": "                    }",
      "lineNo": "352"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "348",
      "newLineNo": "353"
    },
    {
      "type": "modified",
      "oldContent": " childElementDefinitions = new BaseRuntimeElementDefinition[] {",
      "newContent": " childConverter = child.result().toHapiConverter(childElementDefinitions);",
      "oldLineNo": "349",
      "newLineNo": "354"
    },
    {
      "type": "modified",
      "oldContent": " childDefinition.getChildByName(propertyName)",
      "newContent": "                  }",
      "oldLineNo": "350",
      "newLineNo": "355"
    },
    {
      "type": "deleted",
      "content": "          };",
      "lineNo": "351"
    },
    {
      "type": "deleted",
      "content": "        }",
      "lineNo": "352"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "353",
      "newLineNo": "356"
    },
    {
      "type": "modified",
      "oldContent": " childConverter = child.result().toHapiConverter(childElementDefinitions);",
      "newContent": " return new StructureField<>(",
      "oldLineNo": "354",
      "newLineNo": "357"
    },
    {
      "type": "modified",
      "oldContent": "      }",
      "newContent": " child.propertyName(),",
      "oldLineNo": "355",
      "newLineNo": "358"
    },
    {
      "type": "modified",
      "oldContent": "",
      "newContent": " child.fieldName(),",
      "oldLineNo": "356",
      "newLineNo": "359"
    },
    {
      "type": "modified",
      "oldContent": " return new StructureField<>(child.propertyName(),",
      "newContent": " child.extensionUrl(),",
      "oldLineNo": "357",
      "newLineNo": "360"
    },
    {
      "type": "modified",
      "oldContent": " child.fieldName(),",
      "newContent": " child.isModifier(),",
      "oldLineNo": "358",
      "newLineNo": "361"
    },
    {
      "type": "modified",
      "oldContent": " child.extensionUrl(),",
      "newContent": " child.isChoice(),",
      "oldLineNo": "359",
      "newLineNo": "362"
    },
    {
      "type": "modified",
      "oldContent": " child.isModifier(),",
      "newContent": " childConverter);",
      "oldLineNo": "360",
      "newLineNo": "363"
    },
    {
      "type": "modified",
      "oldContent": " child.isChoice(),",
      "newContent": "                })",
      "oldLineNo": "361",
      "newLineNo": "364"
    },
    {
      "type": "modified",
      "oldContent": " childConverter);",
      "newContent": "            .collect(Collectors.toList());",
      "oldLineNo": "362",
      "newLineNo": "365"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "363"
    },
    {
      "type": "deleted",
      "content": "    }).collect(Collectors.toList());",
      "lineNo": "364"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "365",
      "newLineNo": "366"
    },
    {
      "type": "not-modified",
      "content": " return new CompositeFieldSetter(compositeDefinition, toHapiChildren);",
      "oldLineNo": "366",
      "newLineNo": "367"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "367",
      "newLineNo": "368"
    },
    {
      "type": "not-modified",
      "content": " public String getElementType() {",
      "oldLineNo": "380",
      "newLineNo": "381"
    },
    {
      "type": "not-modified",
      "content": " return elementType;",
      "oldLineNo": "381",
      "newLineNo": "382"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "382",
      "newLineNo": "383"
    },
    {
      "type": "modified",
      "oldContent": "}",
      "newContent": "}",
      "oldLineNo": "383",
      "newLineNo": "384"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.instance.model.api.IBase;",
      "oldLineNo": "10",
      "newLineNo": "10"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "11",
      "newLineNo": "11"
    },
    {
      "type": "not-modified",
      "content": "/**",
      "oldLineNo": "12",
      "newLineNo": "12"
    },
    {
      "type": "modified",
      "oldContent": " * Partial converter implementation for contained structures. Contained converters are distinct",
      "newContent": " * Partial converter implementation for contained structures. Contained converters are distinct from",
      "oldLineNo": "13",
      "newLineNo": "13"
    },
    {
      "type": "modified",
      "oldContent": " * from {@link HapiCompositeConverter} in that a Contained converter must translate between a static",
      "newContent": " * {@link HapiCompositeConverter} in that a Contained converter must translate between a static",
      "oldLineNo": "14",
      "newLineNo": "14"
    },
    {
      "type": "not-modified",
      "content": " * Resource Container and FHIR's Any-typed container list of FHIR resources.",
      "oldLineNo": "15",
      "newLineNo": "15"
    },
    {
      "type": "not-modified",
      "content": " *",
      "oldLineNo": "16",
      "newLineNo": "16"
    },
    {
      "type": "not-modified",
      "content": " * @param <T> the type of the schema produced by the converter.",
      "oldLineNo": "17",
      "newLineNo": "17"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "24",
      "newLineNo": "24"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "25",
      "newLineNo": "25"
    },
    {
      "type": "not-modified",
      "content": "   * Retrieves the contained elements from their container, associated with their type.",
      "oldLineNo": "26",
      "newLineNo": "26"
    },
    {
      "type": "added",
      "content": "   *",
      "lineNo": "27"
    },
    {
      "type": "not-modified",
      "content": "   * @param container the Resource Container",
      "oldLineNo": "27",
      "newLineNo": "28"
    },
    {
      "type": "not-modified",
      "content": "   * @return the {@link List} of {@link ContainerEntry}.",
      "oldLineNo": "28",
      "newLineNo": "29"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "29",
      "newLineNo": "30"
    },
    {
      "type": "not-modified",
      "content": " protected abstract List<ContainerEntry> getContained(Object container);",
      "oldLineNo": "30",
      "newLineNo": "31"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "31",
      "newLineNo": "32"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "32",
      "newLineNo": "33"
    },
    {
      "type": "not-modified",
      "content": "   * Constructs a statically typed Resource Container populated with all contained entries.",
      "oldLineNo": "33",
      "newLineNo": "34"
    },
    {
      "type": "added",
      "content": "   *",
      "lineNo": "35"
    },
    {
      "type": "not-modified",
      "content": "   * @param contained the entries to be contained.",
      "oldLineNo": "34",
      "newLineNo": "36"
    },
    {
      "type": "not-modified",
      "content": "   * @return the Resource Container.",
      "oldLineNo": "35",
      "newLineNo": "37"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "36",
      "newLineNo": "38"
    },
    {
      "type": "not-modified",
      "content": " protected abstract Object createContained(Object[] contained);",
      "oldLineNo": "37",
      "newLineNo": "39"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "38",
      "newLineNo": "40"
    },
    {
      "type": "modified",
      "oldContent": " /**",
      "newContent": " /** Represents the association of a contained element to its type. */",
      "oldLineNo": "39",
      "newLineNo": "41"
    },
    {
      "type": "deleted",
      "content": "   * Represents the association of a contained element to its type.",
      "lineNo": "40"
    },
    {
      "type": "deleted",
      "content": "   */",
      "lineNo": "41"
    },
    {
      "type": "not-modified",
      "content": " protected final class ContainerEntry {",
      "oldLineNo": "42",
      "newLineNo": "42"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "43",
      "newLineNo": "43"
    },
    {
      "type": "not-modified",
      "content": " private final String elementType;",
      "oldLineNo": "44",
      "newLineNo": "44"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "71",
      "newLineNo": "71"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "72",
      "newLineNo": "72"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "73",
      "newLineNo": "73"
    },
    {
      "type": "modified",
      "oldContent": " public void setField(IBase parentObject,",
      "newContent": " public void setField(IBase parentObject, BaseRuntimeChildDefinition fieldToSet, Object object) {",
      "oldLineNo": "74",
      "newLineNo": "74"
    },
    {
      "type": "deleted",
      "content": " BaseRuntimeChildDefinition fieldToSet,",
      "lineNo": "75"
    },
    {
      "type": "deleted",
      "content": " Object object) {",
      "lineNo": "76"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "77",
      "newLineNo": "75"
    },
    {
      "type": "not-modified",
      "content": " List<ContainerEntry> containedEntries = getContained(object);",
      "oldLineNo": "78",
      "newLineNo": "76"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "79",
      "newLineNo": "77"
    },
    {
      "type": "modified",
      "oldContent": " for (ContainerEntry containedEntry: containedEntries) {",
      "newContent": " for (ContainerEntry containedEntry : containedEntries) {",
      "oldLineNo": "80",
      "newLineNo": "78"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "81",
      "newLineNo": "79"
    },
    {
      "type": "not-modified",
      "content": " String containedElementType = containedEntry.getElementType();",
      "oldLineNo": "82",
      "newLineNo": "80"
    },
    {
      "type": "not-modified",
      "content": " IBase resource = contained.get(containedElementType).toHapi(containedEntry.getElement());",
      "oldLineNo": "83",
      "newLineNo": "81"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "87",
      "newLineNo": "85"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "88",
      "newLineNo": "86"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "89",
      "newLineNo": "87"
    },
    {
      "type": "modified",
      "oldContent": " protected HapiContainedConverter(Map<String, StructureField<HapiConverter<T>>> contained,",
      "newContent": " protected HapiContainedConverter(",
      "oldLineNo": "90",
      "newLineNo": "88"
    },
    {
      "type": "modified",
      "oldContent": " T structType) {",
      "newContent": " Map<String, StructureField<HapiConverter<T>>> contained, T structType) {",
      "oldLineNo": "91",
      "newLineNo": "89"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "92",
      "newLineNo": "90"
    },
    {
      "type": "not-modified",
      "content": " this.contained = contained;",
      "oldLineNo": "93",
      "newLineNo": "91"
    },
    {
      "type": "not-modified",
      "content": " this.structType = structType;",
      "oldLineNo": "94",
      "newLineNo": "92"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "117",
      "newLineNo": "115"
    },
    {
      "type": "not-modified",
      "content": " Map<String, CompositeFieldSetter> fieldSetters = new LinkedHashMap<>();",
      "oldLineNo": "118",
      "newLineNo": "116"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "119",
      "newLineNo": "117"
    },
    {
      "type": "modified",
      "oldContent": " for (Entry<String, StructureField<HapiConverter<T>>> containedConverter:",
      "newContent": " for (Entry<String, StructureField<HapiConverter<T>>> containedConverter :",
      "oldLineNo": "120",
      "newLineNo": "118"
    },
    {
      "type": "not-modified",
      "content": " contained.entrySet()) {",
      "oldLineNo": "121",
      "newLineNo": "119"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "122",
      "newLineNo": "120"
    },
    {
      "type": "modified",
      "oldContent": " for (BaseRuntimeElementDefinition elementDefinition: elementDefinitions) {",
      "newContent": " for (BaseRuntimeElementDefinition elementDefinition : elementDefinitions) {",
      "oldLineNo": "123",
      "newLineNo": "121"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "124",
      "newLineNo": "122"
    },
    {
      "type": "not-modified",
      "content": " if (elementDefinition.getName().equals(containedConverter.getKey())) {",
      "oldLineNo": "125",
      "newLineNo": "123"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "126",
      "newLineNo": "124"
    },
    {
      "type": "modified",
      "oldContent": " fieldSetters.put(containedConverter.getKey(),",
      "newContent": " fieldSetters.put(",
      "oldLineNo": "127",
      "newLineNo": "125"
    },
    {
      "type": "modified",
      "oldContent": "              (CompositeFieldSetter) containedConverter.getValue().result()",
      "newContent": " containedConverter.getKey(),",
      "oldLineNo": "128",
      "newLineNo": "126"
    },
    {
      "type": "modified",
      "oldContent": "                  .toHapiConverter(elementDefinition));",
      "newContent": "              (CompositeFieldSetter)",
      "oldLineNo": "129",
      "newLineNo": "127"
    },
    {
      "type": "added",
      "content": " containedConverter.getValue().result().toHapiConverter(elementDefinition));",
      "lineNo": "128"
    },
    {
      "type": "not-modified",
      "content": "        }",
      "oldLineNo": "130",
      "newLineNo": "129"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "131",
      "newLineNo": "130"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "132",
      "newLineNo": "131"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.instance.model.api.IBase;",
      "oldLineNo": "5",
      "newLineNo": "5"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "6",
      "newLineNo": "6"
    },
    {
      "type": "not-modified",
      "content": "/**",
      "oldLineNo": "7",
      "newLineNo": "7"
    },
    {
      "type": "modified",
      "oldContent": " * Base class for converting HAPI resources to an alternative object model,",
      "newContent": " * Base class for converting HAPI resources to an alternative object model, such as Spark rows or",
      "oldLineNo": "8",
      "newLineNo": "8"
    },
    {
      "type": "modified",
      "oldContent": " * such as Spark rows or Avro objects.",
      "newContent": " * Avro objects.",
      "oldLineNo": "9",
      "newLineNo": "9"
    },
    {
      "type": "not-modified",
      "content": " */",
      "oldLineNo": "10",
      "newLineNo": "10"
    },
    {
      "type": "not-modified",
      "content": "public abstract class HapiConverter<T> {",
      "oldLineNo": "11",
      "newLineNo": "11"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "12",
      "newLineNo": "12"
    },
    {
      "type": "modified",
      "oldContent": " /**",
      "newContent": " /** Supporting interface to convert and set a field on a HAPI object. */",
      "oldLineNo": "13",
      "newLineNo": "13"
    },
    {
      "type": "deleted",
      "content": "   * Supporting interface to convert and set a field on a HAPI object.",
      "lineNo": "14"
    },
    {
      "type": "deleted",
      "content": "   */",
      "lineNo": "15"
    },
    {
      "type": "not-modified",
      "content": " public interface HapiFieldSetter {",
      "oldLineNo": "16",
      "newLineNo": "14"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "17",
      "newLineNo": "15"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "18",
      "newLineNo": "16"
    },
    {
      "type": "not-modified",
      "content": "     * @param fieldToSet the runtime definition of the field to set.",
      "oldLineNo": "22",
      "newLineNo": "20"
    },
    {
      "type": "not-modified",
      "content": "     * @param value the value to be converted and set on the FHIR object.",
      "oldLineNo": "23",
      "newLineNo": "21"
    },
    {
      "type": "not-modified",
      "content": "     */",
      "oldLineNo": "24",
      "newLineNo": "22"
    },
    {
      "type": "modified",
      "oldContent": " void setField(IBase parentObject,",
      "newContent": " void setField(IBase parentObject, BaseRuntimeChildDefinition fieldToSet, Object value);",
      "oldLineNo": "25",
      "newLineNo": "23"
    },
    {
      "type": "deleted",
      "content": " BaseRuntimeChildDefinition fieldToSet,",
      "lineNo": "26"
    },
    {
      "type": "deleted",
      "content": " Object value);",
      "lineNo": "27"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "28",
      "newLineNo": "24"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "29",
      "newLineNo": "25"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "30",
      "newLineNo": "26"
    },
    {
      "type": "modified",
      "oldContent": "   * Supporting interface to convert an object from a different data model",
      "newContent": "   * Supporting interface to convert an object from a different data model to a HAPI object. This",
      "oldLineNo": "31",
      "newLineNo": "27"
    },
    {
      "type": "modified",
      "oldContent": "   * to a HAPI object. This interface is separated because not all",
      "newContent": "   * interface is separated because not all HAPI objects can be created with a simple function. In",
      "oldLineNo": "32",
      "newLineNo": "28"
    },
    {
      "type": "modified",
      "oldContent": "   * HAPI objects can be created with a simple function. In some cases",
      "newContent": "   * some cases additional context is needed, such as the HAPI parent object which defines the",
      "oldLineNo": "33",
      "newLineNo": "29"
    },
    {
      "type": "modified",
      "oldContent": "   * additional context is needed, such as the HAPI parent object which defines",
      "newContent": "   * enumerated values in a given field. This is why this interface is separate from the {@link",
      "oldLineNo": "34",
      "newLineNo": "30"
    },
    {
      "type": "modified",
      "oldContent": "   * the enumerated values in a given field. This is why this interface is",
      "newContent": "   * HapiFieldSetter} interface.",
      "oldLineNo": "35",
      "newLineNo": "31"
    },
    {
      "type": "deleted",
      "content": "   * separate from the {@link HapiFieldSetter} interface.",
      "lineNo": "36"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "37",
      "newLineNo": "32"
    },
    {
      "type": "not-modified",
      "content": " public interface HapiObjectConverter {",
      "oldLineNo": "38",
      "newLineNo": "33"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "39",
      "newLineNo": "34"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "55",
      "newLineNo": "50"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "56",
      "newLineNo": "51"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "57",
      "newLineNo": "52"
    },
    {
      "type": "modified",
      "oldContent": "   * Converts a HAPI object or list of objects to the equivalent",
      "newContent": "   * Converts a HAPI object or list of objects to the equivalent in the alternative data model.",
      "oldLineNo": "58",
      "newLineNo": "53"
    },
    {
      "type": "deleted",
      "content": "   * in the alternative data model.",
      "lineNo": "59"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "60",
      "newLineNo": "54"
    },
    {
      "type": "not-modified",
      "content": "   * @param input a HAPI object.",
      "oldLineNo": "61",
      "newLineNo": "55"
    },
    {
      "type": "not-modified",
      "content": "   * @return the data model-specific equivalent.",
      "oldLineNo": "62",
      "newLineNo": "56"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "80",
      "newLineNo": "74"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "81",
      "newLineNo": "75"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "82",
      "newLineNo": "76"
    },
    {
      "type": "modified",
      "oldContent": "   * The FHIR type of the element to be converted, or null",
      "newContent": "   * The FHIR type of the element to be converted, or null if there is no FHIR type, such as within",
      "oldLineNo": "83",
      "newLineNo": "77"
    },
    {
      "type": "modified",
      "oldContent": "   * if there is no FHIR type, such as within a FHIR backbone element.",
      "newContent": "   * a FHIR backbone element.",
      "oldLineNo": "84",
      "newLineNo": "78"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "85",
      "newLineNo": "79"
    },
    {
      "type": "not-modified",
      "content": "   * @return FHIR type of the element to be converted.",
      "oldLineNo": "86",
      "newLineNo": "80"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "87",
      "newLineNo": "81"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "90",
      "newLineNo": "84"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "91",
      "newLineNo": "85"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "92",
      "newLineNo": "86"
    },
    {
      "type": "modified",
      "oldContent": "   * Returns a field setter to be used when converting an object of an",
      "newContent": "   * Returns a field setter to be used when converting an object of an alternative model to HAPI.",
      "oldLineNo": "93",
      "newLineNo": "87"
    },
    {
      "type": "modified",
      "oldContent": "   * alternative model to HAPI. Choice types may have multiple element",
      "newContent": "   * Choice types may have multiple element definitions, but in the common case there will be only",
      "oldLineNo": "94",
      "newLineNo": "88"
    },
    {
      "type": "modified",
      "oldContent": "   * definitions, but in the common case there will be only one.",
      "newContent": "   * one.",
      "oldLineNo": "95",
      "newLineNo": "89"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "96",
      "newLineNo": "90"
    },
    {
      "type": "not-modified",
      "content": "   * @param elementDefinitions the set of element definitions that the element can be.",
      "oldLineNo": "97",
      "newLineNo": "91"
    },
    {
      "type": "not-modified",
      "content": "   * @return the field setter.",
      "oldLineNo": "98",
      "newLineNo": "92"
    },
    {
      "type": "not-modified",
      "content": "package com.cerner.bunsen.definitions;",
      "oldLineNo": "1",
      "newLineNo": "1"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "deleted",
      "content": "import java.util.Iterator;",
      "lineNo": "3"
    },
    {
      "type": "not-modified",
      "content": "import java.util.List;",
      "oldLineNo": "4",
      "newLineNo": "3"
    },
    {
      "type": "not-modified",
      "content": "import javax.annotation.Nullable;",
      "oldLineNo": "5",
      "newLineNo": "4"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "6",
      "newLineNo": "5"
    },
    {
      "type": "added",
      "content": "/**",
      "lineNo": "6"
    },
    {
      "type": "added",
      "content": " * This is the minimal interface that is needed from ElementDefinition for doing the type structure",
      "lineNo": "7"
    },
    {
      "type": "added",
      "content": " * traversal. The expected implementation pattern is that a version specific ElementDefinition will",
      "lineNo": "8"
    },
    {
      "type": "added",
      "content": " * be encapsulated by a corresponding IElementDefinition.",
      "lineNo": "9"
    },
    {
      "type": "added",
      "content": " */",
      "lineNo": "10"
    },
    {
      "type": "not-modified",
      "content": "public interface IElementDefinition {",
      "oldLineNo": "7",
      "newLineNo": "11"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "8",
      "newLineNo": "12"
    },
    {
      "type": "not-modified",
      "content": " String getId();",
      "oldLineNo": "9",
      "newLineNo": "13"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "20",
      "newLineNo": "24"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "21",
      "newLineNo": "25"
    },
    {
      "type": "not-modified",
      "content": "   * See return below.",
      "oldLineNo": "22",
      "newLineNo": "26"
    },
    {
      "type": "modified",
      "oldContent": "   * @return true iff this element has exactly one type (e.g., type does  not end in `[x]`).",
      "newContent": "   *",
      "oldLineNo": "23",
      "newLineNo": "27"
    },
    {
      "type": "added",
      "content": "   * @return true iff this element has exactly one type (e.g., type does not end in `[x]`).",
      "lineNo": "28"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "24",
      "newLineNo": "29"
    },
    {
      "type": "not-modified",
      "content": " boolean hasSingleType();",
      "oldLineNo": "25",
      "newLineNo": "30"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "26",
      "newLineNo": "31"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "36",
      "newLineNo": "41"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "37",
      "newLineNo": "42"
    },
    {
      "type": "not-modified",
      "content": "   * See return below.",
      "oldLineNo": "38",
      "newLineNo": "43"
    },
    {
      "type": "added",
      "content": "   *",
      "lineNo": "44"
    },
    {
      "type": "not-modified",
      "content": "   * @return list of `targetProfile`s for each `type` that is a reference.",
      "oldLineNo": "39",
      "newLineNo": "45"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "40",
      "newLineNo": "46"
    },
    {
      "type": "not-modified",
      "content": " List<String> getReferenceTargetProfiles();",
      "oldLineNo": "41",
      "newLineNo": "47"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "42",
      "newLineNo": "48"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "43",
      "newLineNo": "49"
    },
    {
      "type": "not-modified",
      "content": "   * This is a helper to address differences of `ElementDefinition.TypeRefComponent.getProfile()` in",
      "oldLineNo": "44",
      "newLineNo": "50"
    },
    {
      "type": "modified",
      "oldContent": "   * R4 vs. STU3 versions which returns a {@code List<CanonicalType>} in the former but a String",
      "newContent": "   * R4 vs. STU3 versions which returns a {@code List<CanonicalType>} in the former but a String in",
      "oldLineNo": "45",
      "newLineNo": "51"
    },
    {
      "type": "modified",
      "oldContent": "   * in the latter. This is due to the difference between how `Reference` types are represented",
      "newContent": "   * the latter. This is due to the difference between how `Reference` types are represented in R4",
      "oldLineNo": "46",
      "newLineNo": "52"
    },
    {
      "type": "modified",
      "oldContent": "   * in R4 vs STU3; in R4 all \"target profiles\" (i.e., reference's target type) are under the same",
      "newContent": "   * vs STU3; in R4 all \"target profiles\" (i.e., reference's target type) are under the same `type`",
      "oldLineNo": "47",
      "newLineNo": "53"
    },
    {
      "type": "modified",
      "oldContent": "   * `type` while in STU3 we have multiple `type` each with a single target-profile.",
      "newContent": "   * while in STU3 we have multiple `type` each with a single target-profile.",
      "oldLineNo": "48",
      "newLineNo": "54"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "49",
      "newLineNo": "55"
    },
    {
      "type": "not-modified",
      "content": "   * @return first profile or null if this element has no profiles",
      "oldLineNo": "50",
      "newLineNo": "56"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "51",
      "newLineNo": "57"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "not-modified",
      "content": "import java.util.List;",
      "oldLineNo": "3",
      "newLineNo": "3"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "4",
      "newLineNo": "4"
    },
    {
      "type": "added",
      "content": "/**",
      "lineNo": "5"
    },
    {
      "type": "added",
      "content": " * The minimal interface from StructureDefinition that is needed for type traversal. The expected",
      "lineNo": "6"
    },
    {
      "type": "added",
      "content": " * pattern is to encapsulate a FHIR version specific StructureDefinition by an IStructureDefinition.",
      "lineNo": "7"
    },
    {
      "type": "added",
      "content": " */",
      "lineNo": "8"
    },
    {
      "type": "not-modified",
      "content": "public interface IStructureDefinition {",
      "oldLineNo": "5",
      "newLineNo": "9"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "6",
      "newLineNo": "10"
    },
    {
      "type": "not-modified",
      "content": " String getUrl();",
      "oldLineNo": "7",
      "newLineNo": "11"
    },
    {
      "type": "not-modified",
      "content": " IElementDefinition getRootDefinition();",
      "oldLineNo": "11",
      "newLineNo": "15"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "12",
      "newLineNo": "16"
    },
    {
      "type": "not-modified",
      "content": " List<IElementDefinition> getSnapshotDefinitions();",
      "oldLineNo": "13",
      "newLineNo": "17"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "14"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "15",
      "newLineNo": "18"
    },
    {
      "type": "not-modified",
      "content": "package com.cerner.bunsen.definitions;",
      "oldLineNo": "1",
      "newLineNo": "1"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "deleted",
      "content": "import com.google.common.base.Preconditions;",
      "lineNo": "3"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.instance.model.api.IIdType;",
      "oldLineNo": "4",
      "newLineNo": "3"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.instance.model.api.IPrimitiveType;",
      "oldLineNo": "5",
      "newLineNo": "4"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "6",
      "newLineNo": "5"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "21",
      "newLineNo": "21"
    },
    {
      "type": "not-modified",
      "content": " private final BaseRuntimeElementCompositeDefinition elementDefinition;",
      "oldLineNo": "22",
      "newLineNo": "22"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "23",
      "newLineNo": "23"
    },
    {
      "type": "modified",
      "oldContent": " LeafExensionFieldSetter(BaseRuntimeElementCompositeDefinition elementDefinition,",
      "newContent": " LeafExensionFieldSetter(",
      "oldLineNo": "24",
      "newLineNo": "24"
    },
    {
      "type": "added",
      "content": " BaseRuntimeElementCompositeDefinition elementDefinition,",
      "lineNo": "25"
    },
    {
      "type": "not-modified",
      "content": " HapiObjectConverter valuetoHapiConverter) {",
      "oldLineNo": "25",
      "newLineNo": "26"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "26",
      "newLineNo": "27"
    },
    {
      "type": "not-modified",
      "content": " this.elementDefinition = elementDefinition;",
      "oldLineNo": "27",
      "newLineNo": "28"
    },
    {
      "type": "not-modified",
      "content": " this.valuetoHapiConverter = valuetoHapiConverter;",
      "oldLineNo": "28",
      "newLineNo": "29"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "29",
      "newLineNo": "30"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "30",
      "newLineNo": "31"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "31",
      "newLineNo": "32"
    },
    {
      "type": "modified",
      "oldContent": " public void setField(IBase parentObject,",
      "newContent": " public void setField(",
      "oldLineNo": "32",
      "newLineNo": "33"
    },
    {
      "type": "modified",
      "oldContent": " BaseRuntimeChildDefinition fieldToSet,",
      "newContent": " IBase parentObject, BaseRuntimeChildDefinition fieldToSet, Object sparkObject) {",
      "oldLineNo": "33",
      "newLineNo": "34"
    },
    {
      "type": "deleted",
      "content": " Object sparkObject) {",
      "lineNo": "34"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "35",
      "newLineNo": "35"
    },
    {
      "type": "not-modified",
      "content": " IBase hapiObject = valuetoHapiConverter.toHapi(sparkObject);",
      "oldLineNo": "36",
      "newLineNo": "36"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "37",
      "newLineNo": "37"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "61",
      "newLineNo": "61"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "62",
      "newLineNo": "62"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "63",
      "newLineNo": "63"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "64"
    },
    {
      "type": "not-modified",
      "content": " private final String extensionUrl;",
      "oldLineNo": "65",
      "newLineNo": "64"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "66",
      "newLineNo": "65"
    },
    {
      "type": "not-modified",
      "content": " private final HapiConverter<T> valueConverter;",
      "oldLineNo": "67",
      "newLineNo": "66"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "97",
      "newLineNo": "96"
    },
    {
      "type": "not-modified",
      "content": " private BaseRuntimeElementDefinition fetchElementDefinitionForField(",
      "oldLineNo": "98",
      "newLineNo": "97"
    },
    {
      "type": "not-modified",
      "content": " String valueField, RuntimeCompositeDatatypeDefinition definition) {",
      "oldLineNo": "99",
      "newLineNo": "98"
    },
    {
      "type": "modified",
      "oldContent": " BaseRuntimeElementDefinition valueDefinition = definition.getChildByName(valueField)",
      "newContent": " BaseRuntimeElementDefinition valueDefinition =",
      "oldLineNo": "100",
      "newLineNo": "99"
    },
    {
      "type": "modified",
      "oldContent": "        .getChildByName(valueField);",
      "newContent": " definition.getChildByName(valueField).getChildByName(valueField);",
      "oldLineNo": "101",
      "newLineNo": "100"
    },
    {
      "type": "not-modified",
      "content": " return valueDefinition;",
      "oldLineNo": "102",
      "newLineNo": "101"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "103",
      "newLineNo": "102"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "104",
      "newLineNo": "103"
    },
    {
      "type": "not-modified",
      "content": "        (HapiObjectConverter) valueConverter.toHapiConverter(valueDefinition);",
      "oldLineNo": "131",
      "newLineNo": "130"
    },
    {
      "type": "not-modified",
      "content": " return new LeafExensionFieldSetter(definition, sparkToHapi);",
      "oldLineNo": "132",
      "newLineNo": "131"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "133",
      "newLineNo": "132"
    },
    {
      "type": "modified",
      "oldContent": "}",
      "newContent": "}",
      "oldLineNo": "134",
      "newLineNo": "133"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "16",
      "newLineNo": "16"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "17",
      "newLineNo": "17"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "18",
      "newLineNo": "18"
    },
    {
      "type": "modified",
      "oldContent": " public void setField(IBase parentObject,",
      "newContent": " public void setField(IBase parentObject, BaseRuntimeChildDefinition fieldToSet, Object object) {",
      "oldLineNo": "19",
      "newLineNo": "19"
    },
    {
      "type": "deleted",
      "content": " BaseRuntimeChildDefinition fieldToSet,",
      "lineNo": "20"
    },
    {
      "type": "deleted",
      "content": " Object object) {",
      "lineNo": "21"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "22",
      "newLineNo": "20"
    },
    {
      "type": "modified",
      "oldContent": " IPrimitiveType element = (IPrimitiveType) elementDefinition",
      "newContent": " IPrimitiveType element =",
      "oldLineNo": "23",
      "newLineNo": "21"
    },
    {
      "type": "modified",
      "oldContent": "          .newInstance(fieldToSet.getInstanceConstructorArguments());",
      "newContent": "          (IPrimitiveType)",
      "oldLineNo": "24",
      "newLineNo": "22"
    },
    {
      "type": "added",
      "content": " elementDefinition.newInstance(fieldToSet.getInstanceConstructorArguments());",
      "lineNo": "23"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "25",
      "newLineNo": "24"
    },
    {
      "type": "not-modified",
      "content": " PrimitiveConverter.this.toHapi(object, element);",
      "oldLineNo": "26",
      "newLineNo": "25"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "27",
      "newLineNo": "26"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "47",
      "newLineNo": "46"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "48",
      "newLineNo": "47"
    },
    {
      "type": "not-modified",
      "content": "   * Helper method that will set the HAPI value.",
      "oldLineNo": "49",
      "newLineNo": "48"
    },
    {
      "type": "added",
      "content": "   *",
      "lineNo": "49"
    },
    {
      "type": "not-modified",
      "content": "   * @param input the input object",
      "oldLineNo": "50",
      "newLineNo": "50"
    },
    {
      "type": "not-modified",
      "content": "   * @param primitive the FHIR primitive to set",
      "oldLineNo": "51",
      "newLineNo": "51"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "52",
      "newLineNo": "52"
    },
    {
      "type": "not-modified",
      "content": "package com.cerner.bunsen.definitions;",
      "oldLineNo": "1",
      "newLineNo": "1"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "modified",
      "oldContent": "/**",
      "newContent": "/** Simple immutable container for a path to an element qualified by the structure type. */",
      "oldLineNo": "3",
      "newLineNo": "3"
    },
    {
      "type": "deleted",
      "content": " * Simple immutable container for a path to an element qualified by the",
      "lineNo": "4"
    },
    {
      "type": "deleted",
      "content": " * structure type.",
      "lineNo": "5"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "6"
    },
    {
      "type": "not-modified",
      "content": "public class QualifiedPath {",
      "oldLineNo": "7",
      "newLineNo": "4"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "8",
      "newLineNo": "5"
    },
    {
      "type": "not-modified",
      "content": " private final String parentTypeUrl;",
      "oldLineNo": "9",
      "newLineNo": "6"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "10",
      "newLineNo": "7"
    },
    {
      "type": "not-modified",
      "content": " private final String elementPath;",
      "oldLineNo": "11",
      "newLineNo": "8"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "12",
      "newLineNo": "9"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "13",
      "newLineNo": "10"
    },
    {
      "type": "modified",
      "oldContent": "   * Constructs a qualified path for the given element within the given",
      "newContent": "   * Constructs a qualified path for the given element within the given parent type.",
      "oldLineNo": "14",
      "newLineNo": "11"
    },
    {
      "type": "deleted",
      "content": "   * parent type.",
      "lineNo": "15"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "16",
      "newLineNo": "12"
    },
    {
      "type": "not-modified",
      "content": "   * @param parentTypeUrl the parent type containing the element.",
      "oldLineNo": "17",
      "newLineNo": "13"
    },
    {
      "type": "not-modified",
      "content": "   * @param elementPath the path of the element itself.",
      "oldLineNo": "18",
      "newLineNo": "14"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "49",
      "newLineNo": "45"
    },
    {
      "type": "not-modified",
      "content": " public int hashCode() {",
      "oldLineNo": "50",
      "newLineNo": "46"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "51",
      "newLineNo": "47"
    },
    {
      "type": "modified",
      "oldContent": " return 37",
      "newContent": " return 37 * parentTypeUrl.hashCode() * elementPath.hashCode();",
      "oldLineNo": "52",
      "newLineNo": "48"
    },
    {
      "type": "deleted",
      "content": "        * parentTypeUrl.hashCode()",
      "lineNo": "53"
    },
    {
      "type": "deleted",
      "content": "        * elementPath.hashCode();",
      "lineNo": "54"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "55",
      "newLineNo": "49"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "56",
      "newLineNo": "50"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "57",
      "newLineNo": "51"
    },
    {
      "type": "not-modified",
      "content": " return this.parentTypeUrl.equals(that.parentTypeUrl)",
      "oldLineNo": "66",
      "newLineNo": "60"
    },
    {
      "type": "not-modified",
      "content": "        && this.elementPath.equals(that.elementPath);",
      "oldLineNo": "67",
      "newLineNo": "61"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "68",
      "newLineNo": "62"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "69"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "70",
      "newLineNo": "63"
    },
    {
      "type": "not-modified",
      "content": " return primitive.getValueAsString();",
      "oldLineNo": "21",
      "newLineNo": "21"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "22",
      "newLineNo": "22"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "23",
      "newLineNo": "23"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "24"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "25",
      "newLineNo": "24"
    },
    {
      "type": "not-modified",
      "content": " public T getDataType() {",
      "oldLineNo": "26",
      "newLineNo": "25"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "27",
      "newLineNo": "26"
    },
    {
      "type": "not-modified",
      "content": " return dataType;",
      "oldLineNo": "28",
      "newLineNo": "27"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "29",
      "newLineNo": "28"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "30"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "31",
      "newLineNo": "29"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "32"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "33"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.instance.model.api.IBase;",
      "oldLineNo": "7",
      "newLineNo": "7"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.instance.model.api.IPrimitiveType;",
      "oldLineNo": "8",
      "newLineNo": "8"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "9",
      "newLineNo": "9"
    },
    {
      "type": "modified",
      "oldContent": "public class StringToHapiSetter implements HapiFieldSetter,",
      "newContent": "public class StringToHapiSetter implements HapiFieldSetter, HapiObjectConverter {",
      "oldLineNo": "10",
      "newLineNo": "10"
    },
    {
      "type": "deleted",
      "content": " HapiObjectConverter {",
      "lineNo": "11"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "12",
      "newLineNo": "11"
    },
    {
      "type": "not-modified",
      "content": " private final BaseRuntimeElementDefinition elementDefinition;",
      "oldLineNo": "13",
      "newLineNo": "12"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "14",
      "newLineNo": "13"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "17",
      "newLineNo": "16"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "18",
      "newLineNo": "17"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "19",
      "newLineNo": "18"
    },
    {
      "type": "modified",
      "oldContent": " public void setField(IBase parentObject,",
      "newContent": " public void setField(",
      "oldLineNo": "20",
      "newLineNo": "19"
    },
    {
      "type": "modified",
      "oldContent": " BaseRuntimeChildDefinition fieldToSet,",
      "newContent": " IBase parentObject, BaseRuntimeChildDefinition fieldToSet, Object sparkObject) {",
      "oldLineNo": "21",
      "newLineNo": "20"
    },
    {
      "type": "deleted",
      "content": " Object sparkObject) {",
      "lineNo": "22"
    },
    {
      "type": "not-modified",
      "content": " fieldToSet.getMutator().setValue(parentObject, toHapi(sparkObject));",
      "oldLineNo": "23",
      "newLineNo": "21"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "24",
      "newLineNo": "22"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "25",
      "newLineNo": "23"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "not-modified",
      "content": "import ca.uhn.fhir.context.FhirContext;",
      "oldLineNo": "3",
      "newLineNo": "3"
    },
    {
      "type": "not-modified",
      "content": "import ca.uhn.fhir.context.FhirVersionEnum;",
      "oldLineNo": "4",
      "newLineNo": "4"
    },
    {
      "type": "deleted",
      "content": "import ca.uhn.fhir.context.support.IValidationSupport;",
      "lineNo": "5"
    },
    {
      "type": "not-modified",
      "content": "import com.google.common.base.Verify;",
      "oldLineNo": "6",
      "newLineNo": "5"
    },
    {
      "type": "not-modified",
      "content": "import com.google.common.collect.ImmutableSet;",
      "oldLineNo": "7",
      "newLineNo": "6"
    },
    {
      "type": "not-modified",
      "content": "import java.lang.reflect.Constructor;",
      "oldLineNo": "8",
      "newLineNo": "7"
    },
    {
      "type": "not-modified",
      "content": "import java.util.ArrayDeque;",
      "oldLineNo": "9",
      "newLineNo": "8"
    },
    {
      "type": "not-modified",
      "content": "import java.util.ArrayList;",
      "oldLineNo": "10",
      "newLineNo": "9"
    },
    {
      "type": "deleted",
      "content": "import java.util.Collection;",
      "lineNo": "11"
    },
    {
      "type": "not-modified",
      "content": "import java.util.Collections;",
      "oldLineNo": "12",
      "newLineNo": "10"
    },
    {
      "type": "not-modified",
      "content": "import java.util.Deque;",
      "oldLineNo": "13",
      "newLineNo": "11"
    },
    {
      "type": "not-modified",
      "content": "import java.util.LinkedHashMap;",
      "oldLineNo": "14",
      "newLineNo": "12"
    },
    {
      "type": "not-modified",
      "content": "import java.util.Set;",
      "oldLineNo": "18",
      "newLineNo": "16"
    },
    {
      "type": "not-modified",
      "content": "import java.util.stream.Collectors;",
      "oldLineNo": "19",
      "newLineNo": "17"
    },
    {
      "type": "not-modified",
      "content": "import javax.annotation.Nullable;",
      "oldLineNo": "20",
      "newLineNo": "18"
    },
    {
      "type": "deleted",
      "content": "import org.hl7.fhir.r4.model.StructureDefinition;",
      "lineNo": "21"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "22",
      "newLineNo": "19"
    },
    {
      "type": "modified",
      "oldContent": "/**",
      "newContent": "/** Abstract base class to visit FHIR structure definitions. */",
      "oldLineNo": "23",
      "newLineNo": "20"
    },
    {
      "type": "deleted",
      "content": " * Abstract base class to visit FHIR structure definitions.",
      "lineNo": "24"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "25"
    },
    {
      "type": "not-modified",
      "content": "public abstract class StructureDefinitions {",
      "oldLineNo": "26",
      "newLineNo": "21"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "27",
      "newLineNo": "22"
    },
    {
      "type": "not-modified",
      "content": " // TODO make this FHIR version specific and hide it under an abstract method.",
      "oldLineNo": "28",
      "newLineNo": "23"
    },
    {
      "type": "modified",
      "oldContent": " protected static final Set<String> PRIMITIVE_TYPES =  ImmutableSet.<String>builder()",
      "newContent": " protected static final Set<String> PRIMITIVE_TYPES =",
      "oldLineNo": "29",
      "newLineNo": "24"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"id\")",
      "newContent": " ImmutableSet.<String>builder()",
      "oldLineNo": "30",
      "newLineNo": "25"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"boolean\")",
      "newContent": "          .add(\"id\")",
      "oldLineNo": "31",
      "newLineNo": "26"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"code\")",
      "newContent": "          .add(\"boolean\")",
      "oldLineNo": "32",
      "newLineNo": "27"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"markdown\")",
      "newContent": "          .add(\"code\")",
      "oldLineNo": "33",
      "newLineNo": "28"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"date\")",
      "newContent": "          .add(\"markdown\")",
      "oldLineNo": "34",
      "newLineNo": "29"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"instant\")",
      "newContent": "          .add(\"date\")",
      "oldLineNo": "35",
      "newLineNo": "30"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"datetime\")",
      "newContent": "          .add(\"instant\")",
      "oldLineNo": "36",
      "newLineNo": "31"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"dateTime\")",
      "newContent": "          .add(\"datetime\")",
      "oldLineNo": "37",
      "newLineNo": "32"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"time\")",
      "newContent": "          .add(\"dateTime\")",
      "oldLineNo": "38",
      "newLineNo": "33"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"oid\")",
      "newContent": "          .add(\"time\")",
      "oldLineNo": "39",
      "newLineNo": "34"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"string\")",
      "newContent": "          .add(\"oid\")",
      "oldLineNo": "40",
      "newLineNo": "35"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"decimal\")",
      "newContent": "          .add(\"string\")",
      "oldLineNo": "41",
      "newLineNo": "36"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"integer\")",
      "newContent": "          .add(\"decimal\")",
      "oldLineNo": "42",
      "newLineNo": "37"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"xhtml\")",
      "newContent": "          .add(\"integer\")",
      "oldLineNo": "43",
      "newLineNo": "38"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"unsignedInt\")",
      "newContent": "          .add(\"xhtml\")",
      "oldLineNo": "44",
      "newLineNo": "39"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"positiveInt\")",
      "newContent": "          .add(\"unsignedInt\")",
      "oldLineNo": "45",
      "newLineNo": "40"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"base64Binary\")",
      "newContent": "          .add(\"positiveInt\")",
      "oldLineNo": "46",
      "newLineNo": "41"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"uri\")",
      "newContent": "          .add(\"base64Binary\")",
      "oldLineNo": "47",
      "newLineNo": "42"
    },
    {
      "type": "modified",
      "oldContent": " // TODO: Figure out why these are added to R4 resource definitions.",
      "newContent": "          .add(\"uri\")",
      "oldLineNo": "48",
      "newLineNo": "43"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"http://hl7.org/fhirpath/System.Boolean\")",
      "newContent": " // TODO: Figure out why these are added to R4 resource definitions.",
      "oldLineNo": "49",
      "newLineNo": "44"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"http://hl7.org/fhirpath/System.String\")",
      "newContent": "          .add(\"http://hl7.org/fhirpath/System.Boolean\")",
      "oldLineNo": "50",
      "newLineNo": "45"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"http://hl7.org/fhirpath/System.Integer\")",
      "newContent": "          .add(\"http://hl7.org/fhirpath/System.String\")",
      "oldLineNo": "51",
      "newLineNo": "46"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"http://hl7.org/fhirpath/System.Long\")",
      "newContent": "          .add(\"http://hl7.org/fhirpath/System.Integer\")",
      "oldLineNo": "52",
      "newLineNo": "47"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"http://hl7.org/fhirpath/System.Decimal\")",
      "newContent": "          .add(\"http://hl7.org/fhirpath/System.Long\")",
      "oldLineNo": "53",
      "newLineNo": "48"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"http://hl7.org/fhirpath/System.DateTime\")",
      "newContent": "          .add(\"http://hl7.org/fhirpath/System.Decimal\")",
      "oldLineNo": "54",
      "newLineNo": "49"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"http://hl7.org/fhirpath/System.Time\")",
      "newContent": "          .add(\"http://hl7.org/fhirpath/System.DateTime\")",
      "oldLineNo": "55",
      "newLineNo": "50"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"http://hl7.org/fhirpath/System.Quantity\")",
      "newContent": "          .add(\"http://hl7.org/fhirpath/System.Time\")",
      "oldLineNo": "56",
      "newLineNo": "51"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"canonical\")",
      "newContent": "          .add(\"http://hl7.org/fhirpath/System.Quantity\")",
      "oldLineNo": "57",
      "newLineNo": "52"
    },
    {
      "type": "modified",
      "oldContent": "      .add(\"url\")",
      "newContent": "          .add(\"canonical\")",
      "oldLineNo": "58",
      "newLineNo": "53"
    },
    {
      "type": "modified",
      "oldContent": "      .build();",
      "newContent": "          .add(\"url\")",
      "oldLineNo": "59",
      "newLineNo": "54"
    },
    {
      "type": "added",
      "content": "          .build();",
      "lineNo": "55"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "60",
      "newLineNo": "56"
    },
    {
      "type": "not-modified",
      "content": " private static final String STU3_DEFINITIONS_CLASS =",
      "oldLineNo": "61",
      "newLineNo": "57"
    },
    {
      "type": "not-modified",
      "content": " \"com.cerner.bunsen.definitions.stu3.Stu3StructureDefinitions\";",
      "oldLineNo": "62",
      "newLineNo": "58"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "77",
      "newLineNo": "73"
    },
    {
      "type": "not-modified",
      "content": " // TODO the current order of methods reflects previous refactored files to make code review",
      "oldLineNo": "78",
      "newLineNo": "74"
    },
    {
      "type": "not-modified",
      "content": " //  process simpler; we should probably change this in future and move public methods to the top.",
      "oldLineNo": "79",
      "newLineNo": "75"
    },
    {
      "type": "modified",
      "oldContent": " private List<IElementDefinition> getChildren(IElementDefinition parent,",
      "newContent": " private List<IElementDefinition> getChildren(",
      "oldLineNo": "80",
      "newLineNo": "76"
    },
    {
      "type": "modified",
      "oldContent": " List<IElementDefinition> definitions) {",
      "newContent": " IElementDefinition parent, List<IElementDefinition> definitions) {",
      "oldLineNo": "81",
      "newLineNo": "77"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "82",
      "newLineNo": "78"
    },
    {
      "type": "not-modified",
      "content": " if (parent.getContentReference() != null) {",
      "oldLineNo": "83",
      "newLineNo": "79"
    },
    {
      "type": "not-modified",
      "content": " if (!parent.getContentReference().startsWith(\"#\")) {",
      "oldLineNo": "84",
      "newLineNo": "80"
    },
    {
      "type": "not-modified",
      "content": " String referencedType = parent.getContentReference().substring(1);",
      "oldLineNo": "89",
      "newLineNo": "85"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "90",
      "newLineNo": "86"
    },
    {
      "type": "not-modified",
      "content": " // Find the actual type to use.",
      "oldLineNo": "91",
      "newLineNo": "87"
    },
    {
      "type": "modified",
      "oldContent": " parent = definitions.stream()",
      "newContent": " parent =",
      "oldLineNo": "92",
      "newLineNo": "88"
    },
    {
      "type": "modified",
      "oldContent": "          .filter(definition -> definition.getPath().equals(referencedType))",
      "newContent": " definitions.stream()",
      "oldLineNo": "93",
      "newLineNo": "89"
    },
    {
      "type": "modified",
      "oldContent": "          .findFirst()",
      "newContent": "              .filter(definition -> definition.getPath().equals(referencedType))",
      "oldLineNo": "94",
      "newLineNo": "90"
    },
    {
      "type": "modified",
      "oldContent": "          .orElseThrow(() -> new IllegalArgumentException(\"Expected a reference type\"));",
      "newContent": "              .findFirst()",
      "oldLineNo": "95",
      "newLineNo": "91"
    },
    {
      "type": "added",
      "content": "              .orElseThrow(() -> new IllegalArgumentException(\"Expected a reference type\"));",
      "lineNo": "92"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "96",
      "newLineNo": "93"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "97",
      "newLineNo": "94"
    },
    {
      "type": "not-modified",
      "content": " String startsWith = parent.getId() + \".\";",
      "oldLineNo": "98",
      "newLineNo": "95"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "99",
      "newLineNo": "96"
    },
    {
      "type": "not-modified",
      "content": " return definitions.stream()",
      "oldLineNo": "100",
      "newLineNo": "97"
    },
    {
      "type": "modified",
      "oldContent": "        .filter(definition -> definition.getId().startsWith(startsWith)",
      "newContent": "        .filter(",
      "oldLineNo": "101",
      "newLineNo": "98"
    },
    {
      "type": "modified",
      "oldContent": "            && definition.getId().indexOf('.', startsWith.length()) < 0)",
      "newContent": " definition ->",
      "oldLineNo": "102",
      "newLineNo": "99"
    },
    {
      "type": "added",
      "content": " definition.getId().startsWith(startsWith)",
      "lineNo": "100"
    },
    {
      "type": "added",
      "content": "                    && definition.getId().indexOf('.', startsWith.length()) < 0)",
      "lineNo": "101"
    },
    {
      "type": "not-modified",
      "content": "        .collect(Collectors.toList());",
      "oldLineNo": "103",
      "newLineNo": "102"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "104",
      "newLineNo": "103"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "105",
      "newLineNo": "104"
    },
    {
      "type": "not-modified",
      "content": " return Collections.singletonList(StructureField.property(elementName, result));",
      "oldLineNo": "110",
      "newLineNo": "109"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "111",
      "newLineNo": "110"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "112",
      "newLineNo": "111"
    },
    {
      "type": "modified",
      "oldContent": " private boolean shouldTerminateRecursive(DefinitionVisitor visitor,",
      "newContent": " private boolean shouldTerminateRecursive(",
      "oldLineNo": "113",
      "newLineNo": "112"
    },
    {
      "type": "modified",
      "oldContent": " QualifiedPath newPath,",
      "newContent": " DefinitionVisitor visitor, QualifiedPath newPath, Deque<QualifiedPath> stack) {",
      "oldLineNo": "114",
      "newLineNo": "113"
    },
    {
      "type": "deleted",
      "content": " Deque<QualifiedPath> stack) {",
      "lineNo": "115"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "116",
      "newLineNo": "114"
    },
    {
      "type": "not-modified",
      "content": " // TODO we should add configuration parameters for exceptional paths",
      "oldLineNo": "117",
      "newLineNo": "115"
    },
    {
      "type": "not-modified",
      "content": " //  that require deeper recursion; this is where to apply that logic:",
      "oldLineNo": "118",
      "newLineNo": "116"
    },
    {
      "type": "not-modified",
      "content": " return stack.stream().filter(path -> path.equals(newPath)).count() > maxDepth;",
      "oldLineNo": "127",
      "newLineNo": "125"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "128",
      "newLineNo": "126"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "129",
      "newLineNo": "127"
    },
    {
      "type": "modified",
      "oldContent": " private <T> List<StructureField<T>> extensionElementToFields(DefinitionVisitor<T> visitor,",
      "newContent": " private <T> List<StructureField<T>> extensionElementToFields(",
      "oldLineNo": "130",
      "newLineNo": "128"
    },
    {
      "type": "added",
      "content": " DefinitionVisitor<T> visitor,",
      "lineNo": "129"
    },
    {
      "type": "not-modified",
      "content": " IStructureDefinition rootDefinition,",
      "oldLineNo": "131",
      "newLineNo": "130"
    },
    {
      "type": "not-modified",
      "content": " IElementDefinition element,",
      "oldLineNo": "132",
      "newLineNo": "131"
    },
    {
      "type": "not-modified",
      "content": " List<IElementDefinition> snapshotDefinitions,",
      "oldLineNo": "133",
      "newLineNo": "132"
    },
    {
      "type": "not-modified",
      "content": " if (definition != null) {",
      "oldLineNo": "145",
      "newLineNo": "144"
    },
    {
      "type": "not-modified",
      "content": " List<IElementDefinition> extensionDefinitions = definition.getSnapshotDefinitions();",
      "oldLineNo": "146",
      "newLineNo": "145"
    },
    {
      "type": "not-modified",
      "content": " IElementDefinition extensionRoot = extensionDefinitions.get(0);",
      "oldLineNo": "147",
      "newLineNo": "146"
    },
    {
      "type": "modified",
      "oldContent": " extensions = visitExtensionDefinition(visitor,",
      "newContent": " extensions =",
      "oldLineNo": "148",
      "newLineNo": "147"
    },
    {
      "type": "modified",
      "oldContent": " rootDefinition,",
      "newContent": " visitExtensionDefinition(",
      "oldLineNo": "149",
      "newLineNo": "148"
    },
    {
      "type": "modified",
      "oldContent": " element.getSliceName(),",
      "newContent": " visitor,",
      "oldLineNo": "150",
      "newLineNo": "149"
    },
    {
      "type": "modified",
      "oldContent": " stack,",
      "newContent": " rootDefinition,",
      "oldLineNo": "151",
      "newLineNo": "150"
    },
    {
      "type": "modified",
      "oldContent": " definition.getUrl(),",
      "newContent": " element.getSliceName(),",
      "oldLineNo": "152",
      "newLineNo": "151"
    },
    {
      "type": "modified",
      "oldContent": " extensionDefinitions,",
      "newContent": " stack,",
      "oldLineNo": "153",
      "newLineNo": "152"
    },
    {
      "type": "modified",
      "oldContent": " extensionRoot);",
      "newContent": " definition.getUrl(),",
      "oldLineNo": "154",
      "newLineNo": "153"
    },
    {
      "type": "added",
      "content": " extensionDefinitions,",
      "lineNo": "154"
    },
    {
      "type": "added",
      "content": " extensionRoot);",
      "lineNo": "155"
    },
    {
      "type": "not-modified",
      "content": "    } else {",
      "oldLineNo": "155",
      "newLineNo": "156"
    },
    {
      "type": "not-modified",
      "content": " if (element.getSliceName() == null) {",
      "oldLineNo": "156",
      "newLineNo": "157"
    },
    {
      "type": "not-modified",
      "content": " return Collections.emptyList();",
      "oldLineNo": "157",
      "newLineNo": "158"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "158",
      "newLineNo": "159"
    },
    {
      "type": "modified",
      "oldContent": " extensions = visitExtensionDefinition(visitor,",
      "newContent": " extensions =",
      "oldLineNo": "159",
      "newLineNo": "160"
    },
    {
      "type": "modified",
      "oldContent": " rootDefinition,",
      "newContent": " visitExtensionDefinition(",
      "oldLineNo": "160",
      "newLineNo": "161"
    },
    {
      "type": "modified",
      "oldContent": " element.getSliceName(),",
      "newContent": " visitor,",
      "oldLineNo": "161",
      "newLineNo": "162"
    },
    {
      "type": "modified",
      "oldContent": " stack,",
      "newContent": " rootDefinition,",
      "oldLineNo": "162",
      "newLineNo": "163"
    },
    {
      "type": "modified",
      "oldContent": " element.getFirstTypeProfile(),",
      "newContent": " element.getSliceName(),",
      "oldLineNo": "163",
      "newLineNo": "164"
    },
    {
      "type": "modified",
      "oldContent": " snapshotDefinitions,",
      "newContent": " stack,",
      "oldLineNo": "164",
      "newLineNo": "165"
    },
    {
      "type": "modified",
      "oldContent": " element);",
      "newContent": " element.getFirstTypeProfile(),",
      "oldLineNo": "165",
      "newLineNo": "166"
    },
    {
      "type": "added",
      "content": " snapshotDefinitions,",
      "lineNo": "167"
    },
    {
      "type": "added",
      "content": " element);",
      "lineNo": "168"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "166",
      "newLineNo": "169"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "167",
      "newLineNo": "170"
    },
    {
      "type": "not-modified",
      "content": " if (!element.getMax().equals(\"1\") && extensions.size() > 0) {",
      "oldLineNo": "168",
      "newLineNo": "171"
    },
    {
      "type": "not-modified",
      "content": " // the nested extension element has max: *",
      "oldLineNo": "169",
      "newLineNo": "172"
    },
    {
      "type": "modified",
      "oldContent": " return Collections.singletonList(StructureField.extension(",
      "newContent": " return Collections.singletonList(",
      "oldLineNo": "170",
      "newLineNo": "173"
    },
    {
      "type": "modified",
      "oldContent": " extensions.get(0).fieldName(),",
      "newContent": " StructureField.extension(",
      "oldLineNo": "171",
      "newLineNo": "174"
    },
    {
      "type": "modified",
      "oldContent": " extensions.get(0).extensionUrl(),",
      "newContent": " extensions.get(0).fieldName(),",
      "oldLineNo": "172",
      "newLineNo": "175"
    },
    {
      "type": "modified",
      "oldContent": " extensions.get(0).isModifier(),",
      "newContent": " extensions.get(0).extensionUrl(),",
      "oldLineNo": "173",
      "newLineNo": "176"
    },
    {
      "type": "modified",
      "oldContent": " visitor.visitMultiValued(extensions.get(0).fieldName(), extensions.get(0).result())));",
      "newContent": " extensions.get(0).isModifier(),",
      "oldLineNo": "174",
      "newLineNo": "177"
    },
    {
      "type": "added",
      "content": " visitor.visitMultiValued(extensions.get(0).fieldName(), extensions.get(0).result())));",
      "lineNo": "178"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "175",
      "newLineNo": "179"
    },
    {
      "type": "not-modified",
      "content": "    } else {",
      "oldLineNo": "176",
      "newLineNo": "180"
    },
    {
      "type": "not-modified",
      "content": " return extensions;",
      "oldLineNo": "177",
      "newLineNo": "181"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "178",
      "newLineNo": "182"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "179",
      "newLineNo": "183"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "180",
      "newLineNo": "184"
    },
    {
      "type": "modified",
      "oldContent": " private <T> List<StructureField<T>> visitExtensionDefinition(DefinitionVisitor<T> visitor,",
      "newContent": " private <T> List<StructureField<T>> visitExtensionDefinition(",
      "oldLineNo": "181",
      "newLineNo": "185"
    },
    {
      "type": "added",
      "content": " DefinitionVisitor<T> visitor,",
      "lineNo": "186"
    },
    {
      "type": "not-modified",
      "content": " IStructureDefinition rootDefinition,",
      "oldLineNo": "182",
      "newLineNo": "187"
    },
    {
      "type": "not-modified",
      "content": " String sliceName,",
      "oldLineNo": "183",
      "newLineNo": "188"
    },
    {
      "type": "not-modified",
      "content": " Deque<QualifiedPath> stack,",
      "oldLineNo": "184",
      "newLineNo": "189"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "191",
      "newLineNo": "196"
    },
    {
      "type": "not-modified",
      "content": " // Extensions may contain either additional extensions or a value field, but not both.",
      "oldLineNo": "192",
      "newLineNo": "197"
    },
    {
      "type": "not-modified",
      "content": " // So if it has a child element with a slice name, it has additional extensions.",
      "oldLineNo": "193",
      "newLineNo": "198"
    },
    {
      "type": "modified",
      "oldContent": " List<IElementDefinition> childExtensions = children.stream()",
      "newContent": " List<IElementDefinition> childExtensions =",
      "oldLineNo": "194",
      "newLineNo": "199"
    },
    {
      "type": "modified",
      "oldContent": "        .filter(element -> element.getSliceName() != null)",
      "newContent": " children.stream()",
      "oldLineNo": "195",
      "newLineNo": "200"
    },
    {
      "type": "modified",
      "oldContent": "        .collect(Collectors.toList());",
      "newContent": "            .filter(element -> element.getSliceName() != null)",
      "oldLineNo": "196",
      "newLineNo": "201"
    },
    {
      "type": "added",
      "content": "            .collect(Collectors.toList());",
      "lineNo": "202"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "197",
      "newLineNo": "203"
    },
    {
      "type": "not-modified",
      "content": " if (!childExtensions.isEmpty()) {",
      "oldLineNo": "198",
      "newLineNo": "204"
    },
    {
      "type": "not-modified",
      "content": " List<StructureField<T>> childFields = new ArrayList<>();",
      "oldLineNo": "199",
      "newLineNo": "205"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "200",
      "newLineNo": "206"
    },
    {
      "type": "modified",
      "oldContent": " for (IElementDefinition childExtension: childExtensions) {",
      "newContent": " for (IElementDefinition childExtension : childExtensions) {",
      "oldLineNo": "201",
      "newLineNo": "207"
    },
    {
      "type": "modified",
      "oldContent": " List<StructureField<T>> childField = extensionElementToFields(visitor,",
      "newContent": " List<StructureField<T>> childField =",
      "oldLineNo": "202",
      "newLineNo": "208"
    },
    {
      "type": "modified",
      "oldContent": " rootDefinition, childExtension, extensionDefinitions, stack);",
      "newContent": " extensionElementToFields(",
      "oldLineNo": "203",
      "newLineNo": "209"
    },
    {
      "type": "added",
      "content": " visitor, rootDefinition, childExtension, extensionDefinitions, stack);",
      "lineNo": "210"
    },
    {
      "type": "not-modified",
      "content": " childFields.addAll(childField);",
      "oldLineNo": "204",
      "newLineNo": "211"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "205",
      "newLineNo": "212"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "206",
      "newLineNo": "213"
    },
    {
      "type": "modified",
      "oldContent": " T result = visitor.visitParentExtension(sliceName,",
      "newContent": " T result = visitor.visitParentExtension(sliceName, url, childFields);",
      "oldLineNo": "207",
      "newLineNo": "214"
    },
    {
      "type": "deleted",
      "content": " url,",
      "lineNo": "208"
    },
    {
      "type": "deleted",
      "content": " childFields);",
      "lineNo": "209"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "210",
      "newLineNo": "215"
    },
    {
      "type": "not-modified",
      "content": " if (result == null) {",
      "oldLineNo": "211",
      "newLineNo": "216"
    },
    {
      "type": "not-modified",
      "content": " return Collections.emptyList();",
      "oldLineNo": "212",
      "newLineNo": "217"
    },
    {
      "type": "not-modified",
      "content": "      } else {",
      "oldLineNo": "213",
      "newLineNo": "218"
    },
    {
      "type": "not-modified",
      "content": " return Collections.singletonList(",
      "oldLineNo": "214",
      "newLineNo": "219"
    },
    {
      "type": "modified",
      "oldContent": " StructureField.extension(sliceName,",
      "newContent": " StructureField.extension(sliceName, url, extensionRoot.getIsModifier(), result));",
      "oldLineNo": "215",
      "newLineNo": "220"
    },
    {
      "type": "deleted",
      "content": " url,",
      "lineNo": "216"
    },
    {
      "type": "deleted",
      "content": " extensionRoot.getIsModifier(),",
      "lineNo": "217"
    },
    {
      "type": "deleted",
      "content": " result));",
      "lineNo": "218"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "219",
      "newLineNo": "221"
    },
    {
      "type": "not-modified",
      "content": "    } else {",
      "oldLineNo": "220",
      "newLineNo": "222"
    },
    {
      "type": "not-modified",
      "content": " // The extension has no children, so produce its value.",
      "oldLineNo": "221",
      "newLineNo": "223"
    },
    {
      "type": "modified",
      "oldContent": " Optional<IElementDefinition> valueElement = children.stream()",
      "newContent": " Optional<IElementDefinition> valueElement =",
      "oldLineNo": "222",
      "newLineNo": "224"
    },
    {
      "type": "modified",
      "oldContent": "          .filter(e -> e.getPath().contains(\"value\"))",
      "newContent": " children.stream().filter(e -> e.getPath().contains(\"value\")).findFirst();",
      "oldLineNo": "223",
      "newLineNo": "225"
    },
    {
      "type": "deleted",
      "content": "          .findFirst();",
      "lineNo": "224"
    },
    {
      "type": "not-modified",
      "content": " // FIXME: get the extension URL.",
      "oldLineNo": "225",
      "newLineNo": "226"
    },
    {
      "type": "modified",
      "oldContent": " Optional<IElementDefinition> urlElement = children.stream()",
      "newContent": " Optional<IElementDefinition> urlElement =",
      "oldLineNo": "226",
      "newLineNo": "227"
    },
    {
      "type": "modified",
      "oldContent": "          .filter(e -> e.getPath().endsWith(\"url\"))",
      "newContent": " children.stream().filter(e -> e.getPath().endsWith(\"url\")).findFirst();",
      "oldLineNo": "227",
      "newLineNo": "228"
    },
    {
      "type": "deleted",
      "content": "          .findFirst();",
      "lineNo": "228"
    },
    {
      "type": "not-modified",
      "content": " String extensionUrl = urlElement.get().getFixedPrimitiveValue();",
      "oldLineNo": "229",
      "newLineNo": "229"
    },
    {
      "type": "modified",
      "oldContent": " List<StructureField<T>> childField = elementToFields(visitor, rootDefinition,",
      "newContent": " List<StructureField<T>> childField =",
      "oldLineNo": "230",
      "newLineNo": "230"
    },
    {
      "type": "modified",
      "oldContent": " valueElement.get(), extensionDefinitions, stack);",
      "newContent": " elementToFields(visitor, rootDefinition, valueElement.get(), extensionDefinitions, stack);",
      "oldLineNo": "231",
      "newLineNo": "231"
    },
    {
      "type": "modified",
      "oldContent": " T result = visitor.visitLeafExtension(sliceName,",
      "newContent": " T result =",
      "oldLineNo": "232",
      "newLineNo": "232"
    },
    {
      "type": "modified",
      "oldContent": " extensionUrl,",
      "newContent": " visitor.visitLeafExtension(",
      "oldLineNo": "233",
      "newLineNo": "233"
    },
    {
      "type": "modified",
      "oldContent": " childField.iterator().next().result());",
      "newContent": "  sliceName, extensionUrl, childField.iterator().next().result());",
      "oldLineNo": "234",
      "newLineNo": "234"
    },
    {
      "type": "not-modified",
      "content": " return Collections.singletonList(",
      "oldLineNo": "235",
      "newLineNo": "235"
    },
    {
      "type": "modified",
      "oldContent": " StructureField.extension(sliceName,",
      "newContent": " StructureField.extension(sliceName, extensionUrl, extensionRoot.getIsModifier(), result));",
      "oldLineNo": "236",
      "newLineNo": "236"
    },
    {
      "type": "deleted",
      "content": " extensionUrl,",
      "lineNo": "237"
    },
    {
      "type": "deleted",
      "content": " extensionRoot.getIsModifier(),",
      "lineNo": "238"
    },
    {
      "type": "deleted",
      "content": " result));",
      "lineNo": "239"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "240",
      "newLineNo": "237"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "241",
      "newLineNo": "238"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "242",
      "newLineNo": "239"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "243",
      "newLineNo": "240"
    },
    {
      "type": "modified",
      "oldContent": "   * Returns the fields for the given element. The returned stream can be empty",
      "newContent": "   * Returns the fields for the given element. The returned stream can be empty (e.g., for elements",
      "oldLineNo": "244",
      "newLineNo": "241"
    },
    {
      "type": "modified",
      "oldContent": "   * (e.g., for elements with max of zero), or have multiple values (for elements",
      "newContent": "   * with max of zero), or have multiple values (for elements that generate fields with additional",
      "oldLineNo": "245",
      "newLineNo": "242"
    },
    {
      "type": "modified",
      "oldContent": "   * that generate fields with additional data in siblings.)",
      "newContent": "   * data in siblings.)",
      "oldLineNo": "246",
      "newLineNo": "243"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "247",
      "newLineNo": "244"
    },
    {
      "type": "modified",
      "oldContent": " private <T> List<StructureField<T>> elementToFields(DefinitionVisitor<T> visitor,",
      "newContent": " private <T> List<StructureField<T>> elementToFields(",
      "oldLineNo": "248",
      "newLineNo": "245"
    },
    {
      "type": "added",
      "content": " DefinitionVisitor<T> visitor,",
      "lineNo": "246"
    },
    {
      "type": "not-modified",
      "content": " IStructureDefinition rootDefinition,",
      "oldLineNo": "249",
      "newLineNo": "247"
    },
    {
      "type": "not-modified",
      "content": " IElementDefinition element,",
      "oldLineNo": "250",
      "newLineNo": "248"
    },
    {
      "type": "not-modified",
      "content": " List<IElementDefinition> snapshotDefinitions,",
      "oldLineNo": "251",
      "newLineNo": "249"
    },
    {
      "type": "not-modified",
      "content": " // Drop slices for non-extension fields; otherwise we will end up with duplicated fields.",
      "oldLineNo": "262",
      "newLineNo": "260"
    },
    {
      "type": "not-modified",
      "content": " return Collections.emptyList();",
      "oldLineNo": "263",
      "newLineNo": "261"
    },
    {
      "type": "not-modified",
      "content": "    } else if (element.hasSingleType() && PRIMITIVE_TYPES.contains(element.getFirstTypeCode())) {",
      "oldLineNo": "264",
      "newLineNo": "262"
    },
    {
      "type": "modified",
      "oldContent": " T primitiveConverter = visitor",
      "newContent": " T primitiveConverter = visitor.visitPrimitive(elementName, element.getFirstTypeCode());",
      "oldLineNo": "265",
      "newLineNo": "263"
    },
    {
      "type": "deleted",
      "content": "          .visitPrimitive(elementName, element.getFirstTypeCode());",
      "lineNo": "266"
    },
    {
      "type": "not-modified",
      "content": " if (!element.getMax().equals(\"1\")) {",
      "oldLineNo": "267",
      "newLineNo": "264"
    },
    {
      "type": "not-modified",
      "content": " return singleField(elementName, visitor.visitMultiValued(elementName, primitiveConverter));",
      "oldLineNo": "268",
      "newLineNo": "265"
    },
    {
      "type": "not-modified",
      "content": "      } else {",
      "oldLineNo": "269",
      "newLineNo": "266"
    },
    {
      "type": "not-modified",
      "content": " //  why this cannot lead to infinite recursion for choice types. If",
      "oldLineNo": "288",
      "newLineNo": "285"
    },
    {
      "type": "not-modified",
      "content": " //  we don't reset the stack, then we should handle null returns.",
      "oldLineNo": "289",
      "newLineNo": "286"
    },
    {
      "type": "not-modified",
      "content": " T child = transform(visitor, element, structureDefinition, new ArrayDeque<>());",
      "oldLineNo": "290",
      "newLineNo": "287"
    },
    {
      "type": "modified",
      "oldContent": " Verify.verify(child != null,",
      "newContent": " Verify.verify(",
      "oldLineNo": "291",
      "newLineNo": "288"
    },
    {
      "type": "modified",
      "oldContent": " \"Unexpected null choice type {} for element {}\", typeCode, element);",
      "newContent": " child != null, \"Unexpected null choice type {} for element {}\", typeCode, element);",
      "oldLineNo": "292",
      "newLineNo": "289"
    },
    {
      "type": "not-modified",
      "content": " choiceTypes.put(typeCode, child);",
      "oldLineNo": "293",
      "newLineNo": "290"
    },
    {
      "type": "not-modified",
      "content": "        }",
      "oldLineNo": "294",
      "newLineNo": "291"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "295",
      "newLineNo": "292"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "296",
      "newLineNo": "293"
    },
    {
      "type": "modified",
      "oldContent": " StructureField<T> field = new StructureField<>(elementName,",
      "newContent": " StructureField<T> field =",
      "oldLineNo": "297",
      "newLineNo": "294"
    },
    {
      "type": "modified",
      "oldContent": " elementName,",
      "newContent": " new StructureField<>(",
      "oldLineNo": "298",
      "newLineNo": "295"
    },
    {
      "type": "modified",
      "oldContent": " null,",
      "newContent": " elementName,",
      "oldLineNo": "299",
      "newLineNo": "296"
    },
    {
      "type": "modified",
      "oldContent": " false,",
      "newContent": " elementName,",
      "oldLineNo": "300",
      "newLineNo": "297"
    },
    {
      "type": "modified",
      "oldContent": " true,",
      "newContent": " null,",
      "oldLineNo": "301",
      "newLineNo": "298"
    },
    {
      "type": "modified",
      "oldContent": " visitor.visitChoice(elementName, choiceTypes));",
      "newContent": " false,",
      "oldLineNo": "302",
      "newLineNo": "299"
    },
    {
      "type": "added",
      "content": " true,",
      "lineNo": "300"
    },
    {
      "type": "added",
      "content": " visitor.visitChoice(elementName, choiceTypes));",
      "lineNo": "301"
    },
    {
      "type": "not-modified",
      "content": " return Collections.singletonList(field);",
      "oldLineNo": "303",
      "newLineNo": "302"
    },
    {
      "type": "not-modified",
      "content": "    } else if (!element.getMax().equals(\"1\")) {",
      "oldLineNo": "304",
      "newLineNo": "303"
    },
    {
      "type": "not-modified",
      "content": " if (getDefinition(element) != null) {",
      "oldLineNo": "305",
      "newLineNo": "304"
    },
    {
      "type": "not-modified",
      "content": " // Handle defined data types.",
      "oldLineNo": "306",
      "newLineNo": "305"
    },
    {
      "type": "not-modified",
      "content": " IStructureDefinition definition = getDefinition(element);",
      "oldLineNo": "307",
      "newLineNo": "306"
    },
    {
      "type": "not-modified",
      "content": " T type = transform(visitor, element, definition, stack);",
      "oldLineNo": "308",
      "newLineNo": "307"
    },
    {
      "type": "modified",
      "oldContent": " return singleField(elementName,",
      "newContent": " return singleField(elementName, visitor.visitMultiValued(elementName, type));",
      "oldLineNo": "309",
      "newLineNo": "308"
    },
    {
      "type": "deleted",
      "content": " visitor.visitMultiValued(elementName, type));",
      "lineNo": "310"
    },
    {
      "type": "not-modified",
      "content": "      } else {",
      "oldLineNo": "311",
      "newLineNo": "309"
    },
    {
      "type": "modified",
      "oldContent": " List<StructureField<T>> childElements = transformChildren(visitor,",
      "newContent": " List<StructureField<T>> childElements =",
      "oldLineNo": "312",
      "newLineNo": "310"
    },
    {
      "type": "modified",
      "oldContent": " rootDefinition, snapshotDefinitions, stack, element);",
      "newContent": " transformChildren(visitor, rootDefinition, snapshotDefinitions, stack, element);",
      "oldLineNo": "313",
      "newLineNo": "311"
    },
    {
      "type": "not-modified",
      "content": " if (childElements.isEmpty()) {",
      "oldLineNo": "314",
      "newLineNo": "312"
    },
    {
      "type": "not-modified",
      "content": " // All children were dropped because of recursion depth limit.",
      "oldLineNo": "315",
      "newLineNo": "313"
    },
    {
      "type": "modified",
      "oldContent": " return  Collections.emptyList();",
      "newContent": " return Collections.emptyList();",
      "oldLineNo": "316",
      "newLineNo": "314"
    },
    {
      "type": "not-modified",
      "content": "        }",
      "oldLineNo": "317",
      "newLineNo": "315"
    },
    {
      "type": "modified",
      "oldContent": " T result = visitor.visitComposite(elementName,",
      "newContent": " T result =",
      "oldLineNo": "318",
      "newLineNo": "316"
    },
    {
      "type": "modified",
      "oldContent": " DefinitionVisitorsUtil.pathFromStack(elementName, stack),",
      "newContent": " visitor.visitComposite(",
      "oldLineNo": "319",
      "newLineNo": "317"
    },
    {
      "type": "modified",
      "oldContent": " elementName,",
      "newContent": " elementName,",
      "oldLineNo": "320",
      "newLineNo": "318"
    },
    {
      "type": "modified",
      "oldContent": " rootDefinition.getUrl(),",
      "newContent": " DefinitionVisitorsUtil.pathFromStack(elementName, stack),",
      "oldLineNo": "321",
      "newLineNo": "319"
    },
    {
      "type": "modified",
      "oldContent": " childElements);",
      "newContent": " elementName,",
      "oldLineNo": "322",
      "newLineNo": "320"
    },
    {
      "type": "added",
      "content": " rootDefinition.getUrl(),",
      "lineNo": "321"
    },
    {
      "type": "added",
      "content": " childElements);",
      "lineNo": "322"
    },
    {
      "type": "not-modified",
      "content": " List<StructureField<T>> composite = singleField(elementName, result);",
      "oldLineNo": "323",
      "newLineNo": "323"
    },
    {
      "type": "not-modified",
      "content": " // Array types should produce only a single element.",
      "oldLineNo": "324",
      "newLineNo": "324"
    },
    {
      "type": "not-modified",
      "content": " if (composite.size() != 1) {",
      "oldLineNo": "325",
      "newLineNo": "325"
    },
    {
      "type": "modified",
      "oldContent": " throw new IllegalStateException(\"Array type in \"",
      "newContent": " throw new IllegalStateException(",
      "oldLineNo": "326",
      "newLineNo": "326"
    },
    {
      "type": "modified",
      "oldContent": "              + element.getPath()",
      "newContent": " \"Array type in \" + element.getPath() + \" must map to a single structure.\");",
      "oldLineNo": "327",
      "newLineNo": "327"
    },
    {
      "type": "deleted",
      "content": "              + \" must map to a single structure.\");",
      "lineNo": "328"
    },
    {
      "type": "not-modified",
      "content": "        }",
      "oldLineNo": "329",
      "newLineNo": "328"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "330",
      "newLineNo": "329"
    },
    {
      "type": "not-modified",
      "content": " // Wrap the item in the corresponding multi-valued type.",
      "oldLineNo": "331",
      "newLineNo": "330"
    },
    {
      "type": "modified",
      "oldContent": " return singleField(elementName,",
      "newContent": " return singleField(",
      "oldLineNo": "332",
      "newLineNo": "331"
    },
    {
      "type": "modified",
      "oldContent": " visitor.visitMultiValued(elementName, composite.get(0).result()));",
      "newContent": " elementName, visitor.visitMultiValued(elementName, composite.get(0).result()));",
      "oldLineNo": "333",
      "newLineNo": "332"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "334",
      "newLineNo": "333"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "335",
      "newLineNo": "334"
    },
    {
      "type": "not-modified",
      "content": "    } else if (getDefinition(element) != null) {",
      "oldLineNo": "336",
      "newLineNo": "335"
    },
    {
      "type": "not-modified",
      "content": "    } else {",
      "oldLineNo": "343",
      "newLineNo": "342"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "344",
      "newLineNo": "343"
    },
    {
      "type": "not-modified",
      "content": " // Handle composite type",
      "oldLineNo": "345",
      "newLineNo": "344"
    },
    {
      "type": "modified",
      "oldContent": " List<StructureField<T>> childElements = transformChildren(visitor, rootDefinition,",
      "newContent": " List<StructureField<T>> childElements =",
      "oldLineNo": "346",
      "newLineNo": "345"
    },
    {
      "type": "modified",
      "oldContent": " snapshotDefinitions, stack, element);",
      "newContent": " transformChildren(visitor, rootDefinition, snapshotDefinitions, stack, element);",
      "oldLineNo": "347",
      "newLineNo": "346"
    },
    {
      "type": "not-modified",
      "content": " if (childElements.isEmpty()) {",
      "oldLineNo": "348",
      "newLineNo": "347"
    },
    {
      "type": "not-modified",
      "content": " // All children were dropped because of recursion depth limit.",
      "oldLineNo": "349",
      "newLineNo": "348"
    },
    {
      "type": "modified",
      "oldContent": " return  Collections.emptyList();",
      "newContent": " return Collections.emptyList();",
      "oldLineNo": "350",
      "newLineNo": "349"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "351",
      "newLineNo": "350"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "352",
      "newLineNo": "351"
    },
    {
      "type": "modified",
      "oldContent": " T result = visitor.visitComposite(elementName,",
      "newContent": " T result =",
      "oldLineNo": "353",
      "newLineNo": "352"
    },
    {
      "type": "modified",
      "oldContent": " DefinitionVisitorsUtil.pathFromStack(elementName, stack),",
      "newContent": " visitor.visitComposite(",
      "oldLineNo": "354",
      "newLineNo": "353"
    },
    {
      "type": "modified",
      "oldContent": " elementName,",
      "newContent": " elementName,",
      "oldLineNo": "355",
      "newLineNo": "354"
    },
    {
      "type": "modified",
      "oldContent": " rootDefinition.getUrl(),",
      "newContent": " DefinitionVisitorsUtil.pathFromStack(elementName, stack),",
      "oldLineNo": "356",
      "newLineNo": "355"
    },
    {
      "type": "modified",
      "oldContent": " childElements);",
      "newContent": " elementName,",
      "oldLineNo": "357",
      "newLineNo": "356"
    },
    {
      "type": "added",
      "content": " rootDefinition.getUrl(),",
      "lineNo": "357"
    },
    {
      "type": "added",
      "content": " childElements);",
      "lineNo": "358"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "358",
      "newLineNo": "359"
    },
    {
      "type": "not-modified",
      "content": " return singleField(elementName, result);",
      "oldLineNo": "359",
      "newLineNo": "360"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "360",
      "newLineNo": "361"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "361",
      "newLineNo": "362"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "362",
      "newLineNo": "363"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "363",
      "newLineNo": "364"
    },
    {
      "type": "modified",
      "oldContent": "   * Goes through the list of children of the given `element` and convert each",
      "newContent": "   * Goes through the list of children of the given `element` and convert each of those",
      "oldLineNo": "364",
      "newLineNo": "365"
    },
    {
      "type": "modified",
      "oldContent": "   * of those `ElementDefinision`s to `StructureField`s.",
      "newContent": "   * `ElementDefinision`s to `StructureField`s. NOTE: This is the only place where the traversal",
      "oldLineNo": "365",
      "newLineNo": "366"
    },
    {
      "type": "modified",
      "oldContent": "   * NOTE: This is the only place where the traversal stack can grow. It is also",
      "newContent": "   * stack can grow. It is also best if this is the only place where `shouldTerminateRecursive` is",
      "oldLineNo": "366",
      "newLineNo": "367"
    },
    {
      "type": "modified",
      "oldContent": "   * best if this is the only place where `shouldTerminateRecursive` is called.",
      "newContent": "   * called.",
      "oldLineNo": "367",
      "newLineNo": "368"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "368",
      "newLineNo": "369"
    },
    {
      "type": "modified",
      "oldContent": " private <T> List<StructureField<T>> transformChildren(DefinitionVisitor<T> visitor,",
      "newContent": " private <T> List<StructureField<T>> transformChildren(",
      "oldLineNo": "369",
      "newLineNo": "370"
    },
    {
      "type": "added",
      "content": " DefinitionVisitor<T> visitor,",
      "lineNo": "371"
    },
    {
      "type": "not-modified",
      "content": " IStructureDefinition rootDefinition,",
      "oldLineNo": "370",
      "newLineNo": "372"
    },
    {
      "type": "not-modified",
      "content": " List<IElementDefinition> snapshotDefinitions,",
      "oldLineNo": "371",
      "newLineNo": "373"
    },
    {
      "type": "not-modified",
      "content": " Deque<QualifiedPath> stack,",
      "oldLineNo": "372",
      "newLineNo": "374"
    },
    {
      "type": "not-modified",
      "content": " IElementDefinition element) {",
      "oldLineNo": "373",
      "newLineNo": "375"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "374",
      "newLineNo": "376"
    },
    {
      "type": "modified",
      "oldContent": " QualifiedPath qualifiedPath = new QualifiedPath(rootDefinition.getUrl(),  element.getPath());",
      "newContent": " QualifiedPath qualifiedPath = new QualifiedPath(rootDefinition.getUrl(), element.getPath());",
      "oldLineNo": "375",
      "newLineNo": "377"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "376",
      "newLineNo": "378"
    },
    {
      "type": "not-modified",
      "content": " if (shouldTerminateRecursive(visitor, qualifiedPath, stack)) {",
      "oldLineNo": "377",
      "newLineNo": "379"
    },
    {
      "type": "not-modified",
      "content": " return Collections.emptyList();",
      "oldLineNo": "378",
      "newLineNo": "380"
    },
    {
      "type": "not-modified",
      "content": " // Handle composite type",
      "oldLineNo": "382",
      "newLineNo": "384"
    },
    {
      "type": "not-modified",
      "content": " List<StructureField<T>> childElements = new ArrayList<>();",
      "oldLineNo": "383",
      "newLineNo": "385"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "384",
      "newLineNo": "386"
    },
    {
      "type": "modified",
      "oldContent": " for (IElementDefinition child: getChildren(element, snapshotDefinitions)) {",
      "newContent": " for (IElementDefinition child : getChildren(element, snapshotDefinitions)) {",
      "oldLineNo": "385",
      "newLineNo": "387"
    },
    {
      "type": "modified",
      "oldContent": " List<StructureField<T>> childFields = elementToFields(visitor, rootDefinition,",
      "newContent": " List<StructureField<T>> childFields =",
      "oldLineNo": "386",
      "newLineNo": "388"
    },
    {
      "type": "modified",
      "oldContent": " child, snapshotDefinitions, stack);",
      "newContent": " elementToFields(visitor, rootDefinition, child, snapshotDefinitions, stack);",
      "oldLineNo": "387",
      "newLineNo": "389"
    },
    {
      "type": "not-modified",
      "content": " childElements.addAll(childFields);",
      "oldLineNo": "388",
      "newLineNo": "390"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "389",
      "newLineNo": "391"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "390",
      "newLineNo": "392"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "394",
      "newLineNo": "396"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "395",
      "newLineNo": "397"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "396",
      "newLineNo": "398"
    },
    {
      "type": "modified",
      "oldContent": " private <T> StructureField<T> transformContained(DefinitionVisitor<T> visitor,",
      "newContent": " private <T> StructureField<T> transformContained(",
      "oldLineNo": "397",
      "newLineNo": "399"
    },
    {
      "type": "added",
      "content": " DefinitionVisitor<T> visitor,",
      "lineNo": "400"
    },
    {
      "type": "not-modified",
      "content": " IStructureDefinition rootDefinition,",
      "oldLineNo": "398",
      "newLineNo": "401"
    },
    {
      "type": "not-modified",
      "content": " List<IStructureDefinition> containedDefinitions,",
      "oldLineNo": "399",
      "newLineNo": "402"
    },
    {
      "type": "not-modified",
      "content": " Deque<QualifiedPath> stack,",
      "oldLineNo": "400",
      "newLineNo": "403"
    },
    {
      "type": "not-modified",
      "content": " IElementDefinition element) {",
      "oldLineNo": "401",
      "newLineNo": "404"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "402",
      "newLineNo": "405"
    },
    {
      "type": "not-modified",
      "content": " Map<String, StructureField<T>> containedElements = new LinkedHashMap<>();",
      "oldLineNo": "403",
      "newLineNo": "406"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "404",
      "newLineNo": "407"
    },
    {
      "type": "modified",
      "oldContent": " for (IStructureDefinition containedDefinition: containedDefinitions) {",
      "newContent": " for (IStructureDefinition containedDefinition : containedDefinitions) {",
      "oldLineNo": "405",
      "newLineNo": "408"
    },
    {
      "type": "not-modified",
      "content": " IElementDefinition containedRootElement = containedDefinition.getRootDefinition();",
      "oldLineNo": "406",
      "newLineNo": "409"
    },
    {
      "type": "not-modified",
      "content": " List<IElementDefinition> snapshotDefinitions = containedDefinition.getSnapshotDefinitions();",
      "oldLineNo": "407",
      "newLineNo": "410"
    },
    {
      "type": "modified",
      "oldContent": " List<StructureField<T>> childElements = transformChildren(visitor,",
      "newContent": " List<StructureField<T>> childElements =",
      "oldLineNo": "408",
      "newLineNo": "411"
    },
    {
      "type": "modified",
      "oldContent": " containedDefinition,",
      "newContent": " transformChildren(",
      "oldLineNo": "409",
      "newLineNo": "412"
    },
    {
      "type": "modified",
      "oldContent": " snapshotDefinitions,",
      "newContent": " visitor, containedDefinition, snapshotDefinitions, stack, containedRootElement);",
      "oldLineNo": "410",
      "newLineNo": "413"
    },
    {
      "type": "deleted",
      "content": " stack,",
      "lineNo": "411"
    },
    {
      "type": "deleted",
      "content": " containedRootElement);",
      "lineNo": "412"
    },
    {
      "type": "not-modified",
      "content": " // At this level no child should be dropped because of recursion limit.",
      "oldLineNo": "413",
      "newLineNo": "414"
    },
    {
      "type": "not-modified",
      "content": " Verify.verify(!childElements.isEmpty());",
      "oldLineNo": "414",
      "newLineNo": "415"
    },
    {
      "type": "not-modified",
      "content": " String rootName = DefinitionVisitorsUtil.elementName(containedRootElement.getPath());",
      "oldLineNo": "415",
      "newLineNo": "416"
    },
    {
      "type": "modified",
      "oldContent": " T result = visitor.visitComposite(rootName,",
      "newContent": " T result =",
      "oldLineNo": "416",
      "newLineNo": "417"
    },
    {
      "type": "modified",
      "oldContent": " containedRootElement.getPath(),",
      "newContent": " visitor.visitComposite(",
      "oldLineNo": "417",
      "newLineNo": "418"
    },
    {
      "type": "modified",
      "oldContent": " rootName,",
      "newContent": " rootName,",
      "oldLineNo": "418",
      "newLineNo": "419"
    },
    {
      "type": "modified",
      "oldContent": " containedDefinition.getUrl(),",
      "newContent": " containedRootElement.getPath(),",
      "oldLineNo": "419",
      "newLineNo": "420"
    },
    {
      "type": "modified",
      "oldContent": " childElements);",
      "newContent": " rootName,",
      "oldLineNo": "420",
      "newLineNo": "421"
    },
    {
      "type": "added",
      "content": " containedDefinition.getUrl(),",
      "lineNo": "422"
    },
    {
      "type": "added",
      "content": " childElements);",
      "lineNo": "423"
    },
    {
      "type": "not-modified",
      "content": " containedElements.put(rootName, StructureField.property(rootName, result));",
      "oldLineNo": "421",
      "newLineNo": "424"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "422",
      "newLineNo": "425"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "423",
      "newLineNo": "426"
    },
    {
      "type": "modified",
      "oldContent": " T result = visitor.visitContained(element.getPath() + \".contained\",",
      "newContent": " T result =",
      "oldLineNo": "424",
      "newLineNo": "427"
    },
    {
      "type": "modified",
      "oldContent": " rootDefinition.getUrl(),",
      "newContent": " visitor.visitContained(",
      "oldLineNo": "425",
      "newLineNo": "428"
    },
    {
      "type": "modified",
      "oldContent": " containedElements);",
      "newContent": "  element.getPath() + \".contained\", rootDefinition.getUrl(), containedElements);",
      "oldLineNo": "426",
      "newLineNo": "429"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "427",
      "newLineNo": "430"
    },
    {
      "type": "not-modified",
      "content": " return StructureField.property(\"contained\", result);",
      "oldLineNo": "428",
      "newLineNo": "431"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "429",
      "newLineNo": "432"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "442",
      "newLineNo": "445"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "443",
      "newLineNo": "446"
    },
    {
      "type": "not-modified",
      "content": "   * Transforms a FHIR resource to a type defined by the visitor.",
      "oldLineNo": "444",
      "newLineNo": "447"
    },
    {
      "type": "added",
      "content": "   *",
      "lineNo": "448"
    },
    {
      "type": "not-modified",
      "content": "   * @param visitor a visitor class to recursively transform the structure.",
      "oldLineNo": "445",
      "newLineNo": "449"
    },
    {
      "type": "not-modified",
      "content": "   * @param resourceTypeUrl the URL defining the resource type or profile.",
      "oldLineNo": "446",
      "newLineNo": "450"
    },
    {
      "type": "not-modified",
      "content": "   * @param containedResourceTypeUrls the URLs defining the resource types or profiles to be",
      "oldLineNo": "447",
      "newLineNo": "451"
    },
    {
      "type": "modified",
      "oldContent": "   *      contained to the given resource.",
      "newContent": "   *     contained to the given resource.",
      "oldLineNo": "448",
      "newLineNo": "452"
    },
    {
      "type": "not-modified",
      "content": "   * @param <T> the return type of the visitor.",
      "oldLineNo": "449",
      "newLineNo": "453"
    },
    {
      "type": "not-modified",
      "content": "   * @return the transformed result.",
      "oldLineNo": "450",
      "newLineNo": "454"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "451",
      "newLineNo": "455"
    },
    {
      "type": "modified",
      "oldContent": " public <T> T transform(DefinitionVisitor<T> visitor,",
      "newContent": " public <T> T transform(",
      "oldLineNo": "452",
      "newLineNo": "456"
    },
    {
      "type": "added",
      "content": " DefinitionVisitor<T> visitor,",
      "lineNo": "457"
    },
    {
      "type": "not-modified",
      "content": " String resourceTypeUrl,",
      "oldLineNo": "453",
      "newLineNo": "458"
    },
    {
      "type": "not-modified",
      "content": " List<String> containedResourceTypeUrls) {",
      "oldLineNo": "454",
      "newLineNo": "459"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "455",
      "newLineNo": "460"
    },
    {
      "type": "not-modified",
      "content": " throw new IllegalArgumentException(\"Unable to find definition for \" + resourceTypeUrl);",
      "oldLineNo": "459",
      "newLineNo": "464"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "460",
      "newLineNo": "465"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "461",
      "newLineNo": "466"
    },
    {
      "type": "modified",
      "oldContent": " List<IStructureDefinition> containedDefinitions = containedResourceTypeUrls.stream()",
      "newContent": " List<IStructureDefinition> containedDefinitions =",
      "oldLineNo": "462",
      "newLineNo": "467"
    },
    {
      "type": "modified",
      "oldContent": "        .map(containedResourceTypeUrl -> {",
      "newContent": " containedResourceTypeUrls.stream()",
      "oldLineNo": "463",
      "newLineNo": "468"
    },
    {
      "type": "modified",
      "oldContent": " IStructureDefinition containedDefinition =",
      "newContent": "            .map(",
      "oldLineNo": "464",
      "newLineNo": "469"
    },
    {
      "type": "modified",
      "oldContent": " getStructureDefinition(containedResourceTypeUrl);",
      "newContent": " containedResourceTypeUrl -> {",
      "oldLineNo": "465",
      "newLineNo": "470"
    },
    {
      "type": "added",
      "content": " IStructureDefinition containedDefinition =",
      "lineNo": "471"
    },
    {
      "type": "added",
      "content": " getStructureDefinition(containedResourceTypeUrl);",
      "lineNo": "472"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "466",
      "newLineNo": "473"
    },
    {
      "type": "modified",
      "oldContent": " if (containedDefinition == null) {",
      "newContent": "  if (containedDefinition == null) {",
      "oldLineNo": "467",
      "newLineNo": "474"
    },
    {
      "type": "modified",
      "oldContent": " throw new IllegalArgumentException(\"Unable to find definition for \"",
      "newContent": "  throw new IllegalArgumentException(",
      "oldLineNo": "468",
      "newLineNo": "475"
    },
    {
      "type": "modified",
      "oldContent": "                + containedResourceTypeUrl);",
      "newContent": "  \"Unable to find definition for \" + containedResourceTypeUrl);",
      "oldLineNo": "469",
      "newLineNo": "476"
    },
    {
      "type": "modified",
      "oldContent": "          }",
      "newContent": "  }",
      "oldLineNo": "470",
      "newLineNo": "477"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "471",
      "newLineNo": "478"
    },
    {
      "type": "modified",
      "oldContent": " return containedDefinition;",
      "newContent": "  return containedDefinition;",
      "oldLineNo": "472",
      "newLineNo": "479"
    },
    {
      "type": "modified",
      "oldContent": "        })",
      "newContent": "  })",
      "oldLineNo": "473",
      "newLineNo": "480"
    },
    {
      "type": "modified",
      "oldContent": "        .collect(Collectors.toList());",
      "newContent": "  .collect(Collectors.toList());",
      "oldLineNo": "474",
      "newLineNo": "481"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "475",
      "newLineNo": "482"
    },
    {
      "type": "not-modified",
      "content": " return transformRoot(visitor, definition, containedDefinitions);",
      "oldLineNo": "476",
      "newLineNo": "483"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "477",
      "newLineNo": "484"
    },
    {
      "type": "not-modified",
      "content": "   * Transforms the given FHIR structure definition.",
      "oldLineNo": "481",
      "newLineNo": "488"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "482",
      "newLineNo": "489"
    },
    {
      "type": "not-modified",
      "content": "   * @param visitor the visitor performing the transformation",
      "oldLineNo": "483",
      "newLineNo": "490"
    },
    {
      "type": "modified",
      "oldContent": "   * @param parentElement the element containing this definition for additional type information,",
      "newContent": "   * @param parentElement the element containing this definition for additional type information, or",
      "oldLineNo": "484",
      "newLineNo": "491"
    },
    {
      "type": "modified",
      "oldContent": "   *     or null if it is not contained in a parent element.",
      "newContent": "   *     null if it is not contained in a parent element.",
      "oldLineNo": "485",
      "newLineNo": "492"
    },
    {
      "type": "not-modified",
      "content": "   * @param definition the FHIR structure definition to be converted",
      "oldLineNo": "486",
      "newLineNo": "493"
    },
    {
      "type": "not-modified",
      "content": "   * @param stack a stack of FHIR type URLs to detect recursive definitions.",
      "oldLineNo": "487",
      "newLineNo": "494"
    },
    {
      "type": "deleted",
      "content": "   *",
      "lineNo": "488"
    },
    {
      "type": "not-modified",
      "content": "   * @return the transformed structure, or null if it should not be included in the parent.",
      "oldLineNo": "489",
      "newLineNo": "495"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "490",
      "newLineNo": "496"
    },
    {
      "type": "not-modified",
      "content": " @Nullable",
      "oldLineNo": "491",
      "newLineNo": "497"
    },
    {
      "type": "modified",
      "oldContent": " private <T> T transform(DefinitionVisitor<T> visitor,",
      "newContent": " private <T> T transform(",
      "oldLineNo": "492",
      "newLineNo": "498"
    },
    {
      "type": "added",
      "content": " DefinitionVisitor<T> visitor,",
      "lineNo": "499"
    },
    {
      "type": "not-modified",
      "content": " IElementDefinition parentElement,",
      "oldLineNo": "493",
      "newLineNo": "500"
    },
    {
      "type": "not-modified",
      "content": " IStructureDefinition definition,",
      "oldLineNo": "494",
      "newLineNo": "501"
    },
    {
      "type": "not-modified",
      "content": " Deque<QualifiedPath> stack) {",
      "oldLineNo": "495",
      "newLineNo": "502"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "496",
      "newLineNo": "503"
    },
    {
      "type": "not-modified",
      "content": " List<IElementDefinition> snapshotDefinitions = definition.getSnapshotDefinitions();",
      "oldLineNo": "497",
      "newLineNo": "504"
    },
    {
      "type": "not-modified",
      "content": " IElementDefinition root = definition.getRootDefinition();",
      "oldLineNo": "498",
      "newLineNo": "505"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "499",
      "newLineNo": "506"
    },
    {
      "type": "modified",
      "oldContent": " List<StructureField<T>> childElements = transformChildren(visitor, definition,",
      "newContent": " List<StructureField<T>> childElements =",
      "oldLineNo": "500",
      "newLineNo": "507"
    },
    {
      "type": "modified",
      "oldContent": " snapshotDefinitions, stack, root);",
      "newContent": " transformChildren(visitor, definition, snapshotDefinitions, stack, root);",
      "oldLineNo": "501",
      "newLineNo": "508"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "502",
      "newLineNo": "509"
    },
    {
      "type": "not-modified",
      "content": " if (\"Reference\".equals(definition.getType())) {",
      "oldLineNo": "503",
      "newLineNo": "510"
    },
    {
      "type": "not-modified",
      "content": " List<String> referenceProfiles = parentElement.getReferenceTargetProfiles();",
      "oldLineNo": "504",
      "newLineNo": "511"
    },
    {
      "type": "modified",
      "oldContent": " List<String> referenceTypes = referenceProfiles.stream()",
      "newContent": " List<String> referenceTypes =",
      "oldLineNo": "505",
      "newLineNo": "512"
    },
    {
      "type": "modified",
      "oldContent": "          .map(profile -> getStructureDefinition(profile).getType())",
      "newContent": " referenceProfiles.stream()",
      "oldLineNo": "506",
      "newLineNo": "513"
    },
    {
      "type": "modified",
      "oldContent": "          .sorted()",
      "newContent": "              .map(profile -> getStructureDefinition(profile).getType())",
      "oldLineNo": "507",
      "newLineNo": "514"
    },
    {
      "type": "modified",
      "oldContent": "          .collect(Collectors.toList());",
      "newContent": "              .sorted()",
      "oldLineNo": "508",
      "newLineNo": "515"
    },
    {
      "type": "added",
      "content": "              .collect(Collectors.toList());",
      "lineNo": "516"
    },
    {
      "type": "not-modified",
      "content": " return visitor.visitReference(parentElement.toString(), referenceTypes, childElements);",
      "oldLineNo": "509",
      "newLineNo": "517"
    },
    {
      "type": "not-modified",
      "content": "    } else {",
      "oldLineNo": "510",
      "newLineNo": "518"
    },
    {
      "type": "not-modified",
      "content": " String rootName = DefinitionVisitorsUtil.elementName(root.getPath());",
      "oldLineNo": "511",
      "newLineNo": "519"
    },
    {
      "type": "not-modified",
      "content": " // All children were dropped because of recursion depth limit.",
      "oldLineNo": "518",
      "newLineNo": "526"
    },
    {
      "type": "not-modified",
      "content": " return null;",
      "oldLineNo": "519",
      "newLineNo": "527"
    },
    {
      "type": "not-modified",
      "content": "      }",
      "oldLineNo": "520",
      "newLineNo": "528"
    },
    {
      "type": "modified",
      "oldContent": " return visitor.visitComposite(rootName,",
      "newContent": " return visitor.visitComposite(",
      "oldLineNo": "521",
      "newLineNo": "529"
    },
    {
      "type": "added",
      "content": " rootName,",
      "lineNo": "530"
    },
    {
      "type": "not-modified",
      "content": " DefinitionVisitorsUtil.pathFromStack(root.getPath(), stack),",
      "oldLineNo": "522",
      "newLineNo": "531"
    },
    {
      "type": "not-modified",
      "content": " rootName,",
      "oldLineNo": "523",
      "newLineNo": "532"
    },
    {
      "type": "not-modified",
      "content": " definition.getUrl(),",
      "oldLineNo": "524",
      "newLineNo": "533"
    },
    {
      "type": "not-modified",
      "content": " childElements);",
      "oldLineNo": "525",
      "newLineNo": "534"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "526",
      "newLineNo": "535"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "527",
      "newLineNo": "536"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "528",
      "newLineNo": "537"
    },
    {
      "type": "modified",
      "oldContent": " private <T> T transformRoot(DefinitionVisitor<T> visitor,",
      "newContent": " private <T> T transformRoot(",
      "oldLineNo": "529",
      "newLineNo": "538"
    },
    {
      "type": "added",
      "content": " DefinitionVisitor<T> visitor,",
      "lineNo": "539"
    },
    {
      "type": "not-modified",
      "content": " IStructureDefinition definition,",
      "oldLineNo": "530",
      "newLineNo": "540"
    },
    {
      "type": "not-modified",
      "content": " List<IStructureDefinition> containedDefinitions) {",
      "oldLineNo": "531",
      "newLineNo": "541"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "532",
      "newLineNo": "542"
    },
    {
      "type": "not-modified",
      "content": " IElementDefinition rootElement = definition.getRootDefinition();",
      "oldLineNo": "533",
      "newLineNo": "543"
    },
    {
      "type": "not-modified",
      "content": " List<IElementDefinition> snapshotDefinitions = definition.getSnapshotDefinitions();",
      "oldLineNo": "534",
      "newLineNo": "544"
    },
    {
      "type": "not-modified",
      "content": " Deque<QualifiedPath> stack = new ArrayDeque<>();",
      "oldLineNo": "535",
      "newLineNo": "545"
    },
    {
      "type": "modified",
      "oldContent": " List<StructureField<T>> childElements = transformChildren(visitor,",
      "newContent": " List<StructureField<T>> childElements =",
      "oldLineNo": "536",
      "newLineNo": "546"
    },
    {
      "type": "modified",
      "oldContent": " definition,",
      "newContent": " transformChildren(visitor, definition, snapshotDefinitions, stack, rootElement);",
      "oldLineNo": "537",
      "newLineNo": "547"
    },
    {
      "type": "deleted",
      "content": " snapshotDefinitions,",
      "lineNo": "538"
    },
    {
      "type": "deleted",
      "content": " stack,",
      "lineNo": "539"
    },
    {
      "type": "deleted",
      "content": " rootElement);",
      "lineNo": "540"
    },
    {
      "type": "not-modified",
      "content": " // At this level no child should be dropped because of recursion limit.",
      "oldLineNo": "541",
      "newLineNo": "548"
    },
    {
      "type": "not-modified",
      "content": " Verify.verify(!childElements.isEmpty());",
      "oldLineNo": "542",
      "newLineNo": "549"
    },
    {
      "type": "not-modified",
      "content": " Verify.verify(stack.isEmpty());",
      "oldLineNo": "543",
      "newLineNo": "550"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "544",
      "newLineNo": "551"
    },
    {
      "type": "not-modified",
      "content": " // If there are contained definitions, create a Resource Container StructureField",
      "oldLineNo": "545",
      "newLineNo": "552"
    },
    {
      "type": "not-modified",
      "content": " if (containedDefinitions.size() > 0) {",
      "oldLineNo": "546",
      "newLineNo": "553"
    },
    {
      "type": "modified",
      "oldContent": " StructureField<T> containedElement = transformContained(visitor,",
      "newContent": " StructureField<T> containedElement =",
      "oldLineNo": "547",
      "newLineNo": "554"
    },
    {
      "type": "modified",
      "oldContent": " definition,",
      "newContent": " transformContained(visitor, definition, containedDefinitions, stack, rootElement);",
      "oldLineNo": "548",
      "newLineNo": "555"
    },
    {
      "type": "deleted",
      "content": " containedDefinitions,",
      "lineNo": "549"
    },
    {
      "type": "deleted",
      "content": " stack,",
      "lineNo": "550"
    },
    {
      "type": "deleted",
      "content": " rootElement);",
      "lineNo": "551"
    },
    {
      "type": "not-modified",
      "content": " // Replace default StructureField with constructed Resource Container StructureField",
      "oldLineNo": "552",
      "newLineNo": "556"
    },
    {
      "type": "not-modified",
      "content": " // TODO make this future proof instead of using a hard-coded index for `contained`.",
      "oldLineNo": "553",
      "newLineNo": "557"
    },
    {
      "type": "not-modified",
      "content": " childElements.set(5, containedElement);",
      "oldLineNo": "554",
      "newLineNo": "558"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "555",
      "newLineNo": "559"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "556",
      "newLineNo": "560"
    },
    {
      "type": "not-modified",
      "content": " String rootName = DefinitionVisitorsUtil.elementName(rootElement.getPath());",
      "oldLineNo": "557",
      "newLineNo": "561"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "558",
      "newLineNo": "562"
    },
    {
      "type": "modified",
      "oldContent": " return visitor.visitComposite(rootName,",
      "newContent": " return visitor.visitComposite(rootName, rootName, rootName, definition.getUrl(), childElements);",
      "oldLineNo": "559",
      "newLineNo": "563"
    },
    {
      "type": "deleted",
      "content": " rootName,",
      "lineNo": "560"
    },
    {
      "type": "deleted",
      "content": " rootName,",
      "lineNo": "561"
    },
    {
      "type": "deleted",
      "content": " definition.getUrl(),",
      "lineNo": "562"
    },
    {
      "type": "deleted",
      "content": " childElements);",
      "lineNo": "563"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "564",
      "newLineNo": "564"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "565",
      "newLineNo": "565"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "566",
      "newLineNo": "566"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "573",
      "newLineNo": "573"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "574",
      "newLineNo": "574"
    },
    {
      "type": "not-modified",
      "content": "   * Returns the structure definition interface corresponding to the given element.",
      "oldLineNo": "575",
      "newLineNo": "575"
    },
    {
      "type": "added",
      "content": "   *",
      "lineNo": "576"
    },
    {
      "type": "not-modified",
      "content": "   * @param element the target element",
      "oldLineNo": "576",
      "newLineNo": "577"
    },
    {
      "type": "not-modified",
      "content": "   * @return the structure definition or null if the given element has no type code.",
      "oldLineNo": "577",
      "newLineNo": "578"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "578",
      "newLineNo": "579"
    },
    {
      "type": "not-modified",
      "content": " @Nullable",
      "oldLineNo": "579",
      "newLineNo": "580"
    },
    {
      "type": "not-modified",
      "content": " private IStructureDefinition getDefinition(IElementDefinition element) {",
      "oldLineNo": "580",
      "newLineNo": "581"
    },
    {
      "type": "not-modified",
      "content": " String typeCode = element.getFirstTypeCode();",
      "oldLineNo": "581",
      "newLineNo": "582"
    },
    {
      "type": "modified",
      "oldContent": " return typeCode == null",
      "newContent": " return typeCode == null || typeCode.equals(\"BackboneElement\") || typeCode.equals(\"Element\")",
      "oldLineNo": "582",
      "newLineNo": "583"
    },
    {
      "type": "deleted",
      "content": "        || typeCode.equals(\"BackboneElement\")",
      "lineNo": "583"
    },
    {
      "type": "deleted",
      "content": "        || typeCode.equals(\"Element\")",
      "lineNo": "584"
    },
    {
      "type": "not-modified",
      "content": "        ? null",
      "oldLineNo": "585",
      "newLineNo": "584"
    },
    {
      "type": "not-modified",
      "content": "        : getStructureDefinition(typeCode);",
      "oldLineNo": "586",
      "newLineNo": "585"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "587",
      "newLineNo": "586"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "588",
      "newLineNo": "587"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "589"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "590",
      "newLineNo": "588"
    },
    {
      "type": "not-modified",
      "content": "   * Returns supporting functions to make FHIR conversion work independent of version.",
      "oldLineNo": "591",
      "newLineNo": "589"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "592",
      "newLineNo": "590"
    },
    {
      "type": "not-modified",
      "content": "   * @return functions supporting FHIR conversion.",
      "oldLineNo": "593",
      "newLineNo": "591"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "594",
      "newLineNo": "592"
    },
    {
      "type": "not-modified",
      "content": " public abstract FhirConversionSupport conversionSupport();",
      "oldLineNo": "595",
      "newLineNo": "593"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "596",
      "newLineNo": "594"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "597"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "598",
      "newLineNo": "595"
    },
    {
      "type": "not-modified",
      "content": "   * Create a new instance of this class for the given version of FHIR.",
      "oldLineNo": "599",
      "newLineNo": "596"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "600",
      "newLineNo": "597"
    },
    {
      "type": "not-modified",
      "content": " throw new IllegalStateException(exception);",
      "oldLineNo": "629",
      "newLineNo": "626"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "630",
      "newLineNo": "627"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "631",
      "newLineNo": "628"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "632"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "633",
      "newLineNo": "629"
    },
    {
      "type": "not-modified",
      "content": "package com.cerner.bunsen.definitions;",
      "oldLineNo": "1",
      "newLineNo": "1"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "not-modified",
      "content": "/**",
      "oldLineNo": "3",
      "newLineNo": "3"
    },
    {
      "type": "modified",
      "oldContent": " * This is a container for a field in a FHIR composite type",
      "newContent": " * This is a container for a field in a FHIR composite type that defines the field, its FHIR",
      "oldLineNo": "4",
      "newLineNo": "4"
    },
    {
      "type": "modified",
      "oldContent": " * that defines the field, its FHIR property, and a transformed result produced",
      "newContent": " * property, and a transformed result produced by the visitor itself.",
      "oldLineNo": "5",
      "newLineNo": "5"
    },
    {
      "type": "deleted",
      "content": " * by the visitor itself.",
      "lineNo": "6"
    },
    {
      "type": "not-modified",
      "content": " *",
      "oldLineNo": "7",
      "newLineNo": "6"
    },
    {
      "type": "not-modified",
      "content": " * @param <T> the type produced by the visitor.",
      "oldLineNo": "8",
      "newLineNo": "7"
    },
    {
      "type": "not-modified",
      "content": " */",
      "oldLineNo": "9",
      "newLineNo": "8"
    },
    {
      "type": "not-modified",
      "content": "   * @param isChoice flag indicating whether this is a choice type",
      "oldLineNo": "31",
      "newLineNo": "30"
    },
    {
      "type": "not-modified",
      "content": "   * @param visitorResult the result of the visitor.",
      "oldLineNo": "32",
      "newLineNo": "31"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "33",
      "newLineNo": "32"
    },
    {
      "type": "modified",
      "oldContent": " public StructureField(String propertyName,",
      "newContent": " public StructureField(",
      "oldLineNo": "34",
      "newLineNo": "33"
    },
    {
      "type": "added",
      "content": " String propertyName,",
      "lineNo": "34"
    },
    {
      "type": "not-modified",
      "content": " String fieldName,",
      "oldLineNo": "35",
      "newLineNo": "35"
    },
    {
      "type": "not-modified",
      "content": " String extensionUrl,",
      "oldLineNo": "36",
      "newLineNo": "36"
    },
    {
      "type": "not-modified",
      "content": " boolean isModifier,",
      "oldLineNo": "37",
      "newLineNo": "37"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "57",
      "newLineNo": "57"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "58",
      "newLineNo": "58"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "59",
      "newLineNo": "59"
    },
    {
      "type": "modified",
      "oldContent": "   * The field name of the converted result. This generally be the same",
      "newContent": "   * The field name of the converted result. This generally be the same as the FHIR property name,",
      "oldLineNo": "60",
      "newLineNo": "60"
    },
    {
      "type": "modified",
      "oldContent": "   * as the FHIR property name, only changing for special cases like",
      "newContent": "   * only changing for special cases like fields generated to directly represent extensions.",
      "oldLineNo": "61",
      "newLineNo": "61"
    },
    {
      "type": "deleted",
      "content": "   * fields generated to directly represent extensions.",
      "lineNo": "62"
    },
    {
      "type": "not-modified",
      "content": "   *",
      "oldLineNo": "63",
      "newLineNo": "62"
    },
    {
      "type": "not-modified",
      "content": "   * @return the field name",
      "oldLineNo": "64",
      "newLineNo": "63"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "65",
      "newLineNo": "64"
    },
    {
      "type": "not-modified",
      "content": "   * @param <T> the return type of the visitor.",
      "oldLineNo": "131",
      "newLineNo": "130"
    },
    {
      "type": "not-modified",
      "content": "   * @return the StructField for the given extension.",
      "oldLineNo": "132",
      "newLineNo": "131"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "133",
      "newLineNo": "132"
    },
    {
      "type": "modified",
      "oldContent": " public static <T> StructureField<T> extension(String fieldName,",
      "newContent": " public static <T> StructureField<T> extension(",
      "oldLineNo": "134",
      "newLineNo": "133"
    },
    {
      "type": "modified",
      "oldContent": " String extensionUrl,",
      "newContent": " String fieldName, String extensionUrl, boolean isModifier, T visitorResult) {",
      "oldLineNo": "135",
      "newLineNo": "134"
    },
    {
      "type": "deleted",
      "content": " boolean isModifier,",
      "lineNo": "136"
    },
    {
      "type": "deleted",
      "content": " T visitorResult) {",
      "lineNo": "137"
    },
    {
      "type": "not-modified",
      "content": " return new StructureField<>(null, fieldName, extensionUrl, isModifier, false, visitorResult);",
      "oldLineNo": "138",
      "newLineNo": "135"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "139",
      "newLineNo": "136"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "140",
      "newLineNo": "137"
    },
    {
      "type": "not-modified",
      "content": "/**",
      "oldLineNo": "1",
      "newLineNo": "1"
    },
    {
      "type": "modified",
      "oldContent": " * Support for traversing FHIR definitions to convert them into other data models. Most users",
      "newContent": " * Support for traversing FHIR definitions to convert them into other data models. Most users will",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "modified",
      "oldContent": " * will not use this package, but rather directly use Bunsen's Spark support.",
      "newContent": " * not use this package, but rather directly use Bunsen's Spark support.",
      "oldLineNo": "3",
      "newLineNo": "3"
    },
    {
      "type": "not-modified",
      "content": " */",
      "oldLineNo": "4",
      "newLineNo": "4"
    },
    {
      "type": "modified",
      "oldContent": "package com.cerner.bunsen.definitions;",
      "newContent": "package com.cerner.bunsen.definitions;",
      "oldLineNo": "5",
      "newLineNo": "5"
    },
    {
      "type": "modified",
      "oldContent": "/**",
      "newContent": "/** Core API for using FHIR in Apache Spark. */",
      "oldLineNo": "1",
      "newLineNo": "1"
    },
    {
      "type": "modified",
      "oldContent": " * Core API for using FHIR in Apache Spark.",
      "newContent": "package com.cerner.bunsen;",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "3"
    },
    {
      "type": "deleted",
      "content": "package com.cerner.bunsen;",
      "lineNo": "4"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "not-modified",
      "content": "import ca.uhn.fhir.context.FhirContext;",
      "oldLineNo": "3",
      "newLineNo": "3"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "4",
      "newLineNo": "4"
    },
    {
      "type": "modified",
      "oldContent": "/**",
      "newContent": "/** SPI interface to load FHIR structure definitions. */",
      "oldLineNo": "5",
      "newLineNo": "5"
    },
    {
      "type": "deleted",
      "content": " * SPI interface to load FHIR structure definitions.",
      "lineNo": "6"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "7"
    },
    {
      "type": "not-modified",
      "content": "public interface ProfileProvider {",
      "oldLineNo": "8",
      "newLineNo": "6"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "9",
      "newLineNo": "7"
    },
    {
      "type": "not-modified",
      "content": " /**",
      "oldLineNo": "10",
      "newLineNo": "8"
    },
    {
      "type": "not-modified",
      "content": "   * @param context The context to which the profiles are added.",
      "oldLineNo": "14",
      "newLineNo": "12"
    },
    {
      "type": "not-modified",
      "content": "   */",
      "oldLineNo": "15",
      "newLineNo": "13"
    },
    {
      "type": "not-modified",
      "content": " void loadStructureDefinitions(FhirContext context);",
      "oldLineNo": "16",
      "newLineNo": "14"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "17"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "18",
      "newLineNo": "15"
    },
    {
      "type": "not-modified",
      "content": "/**",
      "oldLineNo": "1",
      "newLineNo": "1"
    },
    {
      "type": "modified",
      "oldContent": " * Support for dynamically providing structure definitions at runtime.",
      "newContent": " * Support for dynamically providing structure definitions at runtime. See {@link",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "modified",
      "oldContent": " * See {@link com.cerner.bunsen.profiles.ProfileProvider} for details.",
      "newContent": " * com.cerner.bunsen.profiles.ProfileProvider} for details.",
      "oldLineNo": "3",
      "newLineNo": "3"
    },
    {
      "type": "not-modified",
      "content": " */",
      "oldLineNo": "4",
      "newLineNo": "4"
    },
    {
      "type": "modified",
      "oldContent": "package com.cerner.bunsen.profiles;",
      "newContent": "package com.cerner.bunsen.profiles;",
      "oldLineNo": "5",
      "newLineNo": "5"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "33",
      "newLineNo": "33"
    },
    {
      "type": "not-modified",
      "content": " // In real scenarios this would be the specific type to/from which the HAPI conversion happens,",
      "oldLineNo": "34",
      "newLineNo": "34"
    },
    {
      "type": "not-modified",
      "content": " // e.g., an Avro Schema when the conversion is to/from Avro records.",
      "oldLineNo": "35",
      "newLineNo": "35"
    },
    {
      "type": "modified",
      "oldContent": " private static class ArbitraryDataType {",
      "newContent": " private static class ArbitraryDataType {}",
      "oldLineNo": "36",
      "newLineNo": "36"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "37"
    },
    {
      "type": "deleted",
      "content": "  }",
      "lineNo": "38"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "39"
    },
    {
      "type": "not-modified",
      "content": "}",
      "oldLineNo": "40",
      "newLineNo": "37"
    },
    {
      "type": "not-modified",
      "content": "import org.slf4j.Logger;",
      "oldLineNo": "15",
      "newLineNo": "15"
    },
    {
      "type": "not-modified",
      "content": "import org.slf4j.LoggerFactory;",
      "oldLineNo": "16",
      "newLineNo": "16"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "17",
      "newLineNo": "17"
    },
    {
      "type": "modified",
      "oldContent": "/**",
      "newContent": "/** SPI implementation to load profile resources for US Core. */",
      "oldLineNo": "18",
      "newLineNo": "18"
    },
    {
      "type": "deleted",
      "content": " * SPI implementation to load profile resources for US Core.",
      "lineNo": "19"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "20"
    },
    {
      "type": "not-modified",
      "content": "public class UsCoreProfileProvider implements ProfileProvider {",
      "oldLineNo": "21",
      "newLineNo": "19"
    },
    {
      "type": "not-modified",
      "content": " private static final Logger log = LoggerFactory.getLogger(UsCoreProfileProvider.class);",
      "oldLineNo": "22",
      "newLineNo": "20"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "23",
      "newLineNo": "21"
    },
    {
      "type": "modified",
      "oldContent": " private static void load(PrePopulatedValidationSupport support,",
      "newContent": " private static void load(",
      "oldLineNo": "24",
      "newLineNo": "22"
    },
    {
      "type": "modified",
      "oldContent": " IParser jsonParser,",
      "newContent": " PrePopulatedValidationSupport support, IParser jsonParser, String resource) {",
      "oldLineNo": "25",
      "newLineNo": "23"
    },
    {
      "type": "deleted",
      "content": " String resource) {",
      "lineNo": "26"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "27",
      "newLineNo": "24"
    },
    {
      "type": "modified",
      "oldContent": " try (InputStream input = UsCoreProfileProvider.class",
      "newContent": " try (InputStream input =",
      "oldLineNo": "28",
      "newLineNo": "25"
    },
    {
      "type": "modified",
      "oldContent": "        .getClassLoader()",
      "newContent": " UsCoreProfileProvider.class.getClassLoader().getResourceAsStream(resource)) {",
      "oldLineNo": "29",
      "newLineNo": "26"
    },
    {
      "type": "deleted",
      "content": "        .getResourceAsStream(resource)) {",
      "lineNo": "30"
    },
    {
      "type": "not-modified",
      "content": " IBaseResource definition = jsonParser.parseResource(new InputStreamReader(input));",
      "oldLineNo": "31",
      "newLineNo": "27"
    },
    {
      "type": "not-modified",
      "content": " support.addStructureDefinition(definition);",
      "oldLineNo": "32",
      "newLineNo": "28"
    },
    {
      "type": "not-modified",
      "content": "    } catch (IOException exception) {",
      "oldLineNo": "33",
      "newLineNo": "29"
    },
    {
      "type": "not-modified",
      "content": " load(support, parser, \"definitions-r4/StructureDefinition-us-core-vital-signs.json\");",
      "oldLineNo": "148",
      "newLineNo": "144"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "149",
      "newLineNo": "145"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "150",
      "newLineNo": "146"
    },
    {
      "type": "modified",
      "oldContent": " private static void addUsCoreDefinitions(PrePopulatedValidationSupport support,",
      "newContent": " private static void addUsCoreDefinitions(",
      "oldLineNo": "151",
      "newLineNo": "147"
    },
    {
      "type": "modified",
      "oldContent": " FhirContext context) {",
      "newContent": " PrePopulatedValidationSupport support, FhirContext context) {",
      "oldLineNo": "152",
      "newLineNo": "148"
    },
    {
      "type": "modified",
      "oldContent": " Preconditions.checkArgument(context.getVersion().getVersion() == FhirVersionEnum.DSTU3",
      "newContent": " Preconditions.checkArgument(",
      "oldLineNo": "153",
      "newLineNo": "149"
    },
    {
      "type": "modified",
      "oldContent": "        || context.getVersion().getVersion() == FhirVersionEnum.R4);",
      "newContent": " context.getVersion().getVersion() == FhirVersionEnum.DSTU3",
      "oldLineNo": "154",
      "newLineNo": "150"
    },
    {
      "type": "added",
      "content": "            || context.getVersion().getVersion() == FhirVersionEnum.R4);",
      "lineNo": "151"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "155",
      "newLineNo": "152"
    },
    {
      "type": "not-modified",
      "content": " if (context.getVersion().getVersion() == FhirVersionEnum.DSTU3) {",
      "oldLineNo": "156",
      "newLineNo": "153"
    },
    {
      "type": "not-modified",
      "content": " addUsCoreDefinitionsForDstu3(support, context);",
      "oldLineNo": "157",
      "newLineNo": "154"
    },
    {
      "type": "not-modified",
      "content": " IValidationSupport defaultSupport = context.getValidationSupport();",
      "oldLineNo": "179",
      "newLineNo": "176"
    },
    {
      "type": "not-modified",
      "content": " PrePopulatedValidationSupport support = new PrePopulatedValidationSupport(context);",
      "oldLineNo": "180",
      "newLineNo": "177"
    },
    {
      "type": "not-modified",
      "content": " List<IBaseResource> defaultDefinitions = defaultSupport.fetchAllStructureDefinitions();",
      "oldLineNo": "181",
      "newLineNo": "178"
    },
    {
      "type": "modified",
      "oldContent": " for (IBaseResource definition:  defaultDefinitions) {",
      "newContent": " for (IBaseResource definition : defaultDefinitions) {",
      "oldLineNo": "182",
      "newLineNo": "179"
    },
    {
      "type": "not-modified",
      "content": " support.addStructureDefinition(definition);",
      "oldLineNo": "183",
      "newLineNo": "180"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "184",
      "newLineNo": "181"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "185",
      "newLineNo": "182"
    },
    {
      "type": "not-modified",
      "content": "import org.hl7.fhir.dstu3.model.StructureDefinition;",
      "oldLineNo": "13",
      "newLineNo": "13"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "14",
      "newLineNo": "14"
    },
    {
      "type": "not-modified",
      "content": "// TODO make this generic for R4: https://github.com/google/fhir-data-pipes/issues/558",
      "oldLineNo": "15",
      "newLineNo": "15"
    },
    {
      "type": "modified",
      "oldContent": "/**",
      "newContent": "/** {@link ProfileProvider} implementation to load resources required for Bunsen Testing. */",
      "oldLineNo": "16",
      "newLineNo": "16"
    },
    {
      "type": "deleted",
      "content": " * {@link ProfileProvider} implementation to load resources required for Bunsen Testing.",
      "lineNo": "17"
    },
    {
      "type": "deleted",
      "content": " */",
      "lineNo": "18"
    },
    {
      "type": "not-modified",
      "content": "public class BunsenTestStu3ProfileProvider implements ProfileProvider {",
      "oldLineNo": "19",
      "newLineNo": "17"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "20",
      "newLineNo": "18"
    },
    {
      "type": "modified",
      "oldContent": " private static void load(PrePopulatedValidationSupport support, IParser jsonParser,",
      "newContent": " private static void load(",
      "oldLineNo": "21",
      "newLineNo": "19"
    },
    {
      "type": "modified",
      "oldContent": " String resource) {",
      "newContent": " PrePopulatedValidationSupport support, IParser jsonParser, String resource) {",
      "oldLineNo": "22",
      "newLineNo": "20"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "23",
      "newLineNo": "21"
    },
    {
      "type": "modified",
      "oldContent": " try (InputStream input = BunsenTestStu3ProfileProvider.class.getClassLoader()",
      "newContent": " try (InputStream input =",
      "oldLineNo": "24",
      "newLineNo": "22"
    },
    {
      "type": "modified",
      "oldContent": "        .getResourceAsStream(resource)) {",
      "newContent": " BunsenTestStu3ProfileProvider.class.getClassLoader().getResourceAsStream(resource)) {",
      "oldLineNo": "25",
      "newLineNo": "23"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "26",
      "newLineNo": "24"
    },
    {
      "type": "modified",
      "oldContent": " StructureDefinition definition = (StructureDefinition) jsonParser",
      "newContent": " StructureDefinition definition =",
      "oldLineNo": "27",
      "newLineNo": "25"
    },
    {
      "type": "modified",
      "oldContent": "          .parseResource(new InputStreamReader(input));",
      "newContent": " (StructureDefinition) jsonParser.parseResource(new InputStreamReader(input));",
      "oldLineNo": "28",
      "newLineNo": "26"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "29",
      "newLineNo": "27"
    },
    {
      "type": "not-modified",
      "content": " support.addStructureDefinition(definition);",
      "oldLineNo": "30",
      "newLineNo": "28"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "31",
      "newLineNo": "29"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "35",
      "newLineNo": "33"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "36",
      "newLineNo": "34"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "37",
      "newLineNo": "35"
    },
    {
      "type": "modified",
      "oldContent": " private static void addBunsenTestStu3ProfileDefinitions(PrePopulatedValidationSupport support,",
      "newContent": " private static void addBunsenTestStu3ProfileDefinitions(",
      "oldLineNo": "38",
      "newLineNo": "36"
    },
    {
      "type": "modified",
      "oldContent": " FhirContext context) {",
      "newContent": " PrePopulatedValidationSupport support, FhirContext context) {",
      "oldLineNo": "39",
      "newLineNo": "37"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "40",
      "newLineNo": "38"
    },
    {
      "type": "not-modified",
      "content": " IParser parser = context.newJsonParser();",
      "oldLineNo": "41",
      "newLineNo": "39"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "42",
      "newLineNo": "40"
    },
    {
      "type": "not-modified",
      "content": " load(support, parser, \"definitions/StructureDefinition-bunsen-test-profile-booleanfield.json\");",
      "oldLineNo": "43",
      "newLineNo": "41"
    },
    {
      "type": "not-modified",
      "content": " load(support, parser, \"definitions/StructureDefinition-bunsen-test-profile-integerfield.json\");",
      "oldLineNo": "44",
      "newLineNo": "42"
    },
    {
      "type": "not-modified",
      "content": " load(support, parser, \"definitions/StructureDefinition-bunsen-test-profile-Patient.json\");",
      "oldLineNo": "45",
      "newLineNo": "43"
    },
    {
      "type": "modified",
      "oldContent": " load(support, parser,",
      "newContent": " load(",
      "oldLineNo": "46",
      "newLineNo": "44"
    },
    {
      "type": "added",
      "content": " support,",
      "lineNo": "45"
    },
    {
      "type": "added",
      "content": " parser,",
      "lineNo": "46"
    },
    {
      "type": "not-modified",
      "content": " \"definitions/StructureDefinition-bunsen-test-profile-integerArrayField.json\");",
      "oldLineNo": "47",
      "newLineNo": "47"
    },
    {
      "type": "modified",
      "oldContent": " load(support, parser,",
      "newContent": " load(",
      "oldLineNo": "48",
      "newLineNo": "48"
    },
    {
      "type": "added",
      "content": " support,",
      "lineNo": "49"
    },
    {
      "type": "added",
      "content": " parser,",
      "lineNo": "50"
    },
    {
      "type": "not-modified",
      "content": " \"definitions/StructureDefinition-bunsen-test-profile-nested-extension.json\");",
      "oldLineNo": "49",
      "newLineNo": "51"
    },
    {
      "type": "modified",
      "oldContent": " load(support, parser,",
      "newContent": " load(",
      "oldLineNo": "50",
      "newLineNo": "52"
    },
    {
      "type": "added",
      "content": " support,",
      "lineNo": "53"
    },
    {
      "type": "added",
      "content": " parser,",
      "lineNo": "54"
    },
    {
      "type": "not-modified",
      "content": " \"definitions/StructureDefinition-bunsen-test-profile-codeableconcept-ext.json\");",
      "oldLineNo": "51",
      "newLineNo": "55"
    },
    {
      "type": "modified",
      "oldContent": " load(support, parser,",
      "newContent": " load(",
      "oldLineNo": "52",
      "newLineNo": "56"
    },
    {
      "type": "added",
      "content": " support,",
      "lineNo": "57"
    },
    {
      "type": "added",
      "content": " parser,",
      "lineNo": "58"
    },
    {
      "type": "not-modified",
      "content": " \"definitions/StructureDefinition-bunsen-test-codeableConcept-modifierExt.json\");",
      "oldLineNo": "53",
      "newLineNo": "59"
    },
    {
      "type": "modified",
      "oldContent": " load(support, parser,",
      "newContent": " load(support, parser, \"definitions/StructureDefinition-bunsen-test-string-modifierExt.json\");",
      "oldLineNo": "54",
      "newLineNo": "60"
    },
    {
      "type": "deleted",
      "content": " \"definitions/StructureDefinition-bunsen-test-string-modifierExt.json\");",
      "lineNo": "55"
    },
    {
      "type": "not-modified",
      "content": "  }",
      "oldLineNo": "56",
      "newLineNo": "61"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "57",
      "newLineNo": "62"
    },
    {
      "type": "not-modified",
      "content": " @Override",
      "oldLineNo": "58",
      "newLineNo": "63"
    },
    {
      "type": "not-modified",
      "content": " for (StructureDefinition definition : defaultDefinitions) {",
      "oldLineNo": "72",
      "newLineNo": "77"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "73",
      "newLineNo": "78"
    },
    {
      "type": "not-modified",
      "content": " support.addStructureDefinition(definition);",
      "oldLineNo": "74",
      "newLineNo": "79"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "75"
    },
    {
      "type": "not-modified",
      "content": "    }",
      "oldLineNo": "76",
      "newLineNo": "80"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "77",
      "newLineNo": "81"
    },
    {
      "type": "not-modified",
      "content": " addBunsenTestStu3ProfileDefinitions(support, context);",
      "oldLineNo": "78",
      "newLineNo": "82"
    },
    {
      "type": "not-modified",
      "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">",
      "oldLineNo": "2",
      "newLineNo": "2"
    },
    {
      "type": "not-modified",
      "content": "  <modelVersion>4.0.0</modelVersion>",
      "oldLineNo": "3",
      "newLineNo": "3"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "4",
      "newLineNo": "4"
    },
    {
      "type": "added",
      "content": "  <parent>",
      "lineNo": "5"
    },
    {
      "type": "added",
      "content": "    <groupId>com.google.fhir.analytics</groupId>",
      "lineNo": "6"
    },
    {
      "type": "added",
      "content": "    <artifactId>root</artifactId>",
      "lineNo": "7"
    },
    {
      "type": "added",
      "content": "    <version>0.1.0-SNAPSHOT</version>",
      "lineNo": "8"
    },
    {
      "type": "added",
      "content": "  </parent>",
      "lineNo": "9"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "10"
    },
    {
      "type": "not-modified",
      "content": "  <groupId>com.cerner.bunsen</groupId>",
      "oldLineNo": "5",
      "newLineNo": "11"
    },
    {
      "type": "not-modified",
      "content": "  <artifactId>bunsen-parent</artifactId>",
      "oldLineNo": "6",
      "newLineNo": "12"
    },
    {
      "type": "not-modified",
      "content": "  <packaging>pom</packaging>",
      "oldLineNo": "7",
      "newLineNo": "13"
    },
    {
      "type": "not-modified",
      "content": "      </plugin>",
      "oldLineNo": "164",
      "newLineNo": "170"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "165",
      "newLineNo": "171"
    },
    {
      "type": "not-modified",
      "content": "      <plugin>",
      "oldLineNo": "166",
      "newLineNo": "172"
    },
    {
      "type": "modified",
      "oldContent": "        <groupId>org.apache.maven.plugins</groupId>",
      "newContent": "        <groupId>com.diffplug.spotless</groupId>",
      "oldLineNo": "167",
      "newLineNo": "173"
    },
    {
      "type": "modified",
      "oldContent": "        <artifactId>maven-checkstyle-plugin</artifactId>",
      "newContent": "        <artifactId>spotless-maven-plugin</artifactId>",
      "oldLineNo": "168",
      "newLineNo": "174"
    },
    {
      "type": "deleted",
      "content": "        <executions>",
      "lineNo": "169"
    },
    {
      "type": "deleted",
      "content": "          <execution>",
      "lineNo": "170"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "171"
    },
    {
      "type": "deleted",
      "content": "            <id>verify_checkstyleReport</id>",
      "lineNo": "172"
    },
    {
      "type": "deleted",
      "content": "            <phase>verify</phase>",
      "lineNo": "173"
    },
    {
      "type": "deleted",
      "content": "            <goals>",
      "lineNo": "174"
    },
    {
      "type": "deleted",
      "content": "              <goal>checkstyle</goal>",
      "lineNo": "175"
    },
    {
      "type": "deleted",
      "content": "            </goals>",
      "lineNo": "176"
    },
    {
      "type": "deleted",
      "content": "            <configuration>",
      "lineNo": "177"
    },
    {
      "type": "deleted",
      "content": "              <configLocation>google_checks.xml</configLocation>",
      "lineNo": "178"
    },
    {
      "type": "deleted",
      "content": "              <consoleOutput>false</consoleOutput>",
      "lineNo": "179"
    },
    {
      "type": "deleted",
      "content": "              <enableRulesSummary>true</enableRulesSummary>",
      "lineNo": "180"
    },
    {
      "type": "deleted",
      "content": "              <enableFilesSummary>true</enableFilesSummary>",
      "lineNo": "181"
    },
    {
      "type": "deleted",
      "content": "              <includeTestSourceDirectory>true</includeTestSourceDirectory>",
      "lineNo": "182"
    },
    {
      "type": "deleted",
      "content": "              <linkXRef>true</linkXRef>",
      "lineNo": "183"
    },
    {
      "type": "deleted",
      "content": "            </configuration>",
      "lineNo": "184"
    },
    {
      "type": "deleted",
      "content": "          </execution>",
      "lineNo": "185"
    },
    {
      "type": "deleted",
      "content": "          <execution>",
      "lineNo": "186"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "187"
    },
    {
      "type": "deleted",
      "content": "            <id>verify_checkstyleCheck</id>",
      "lineNo": "188"
    },
    {
      "type": "deleted",
      "content": "            <goals>",
      "lineNo": "189"
    },
    {
      "type": "deleted",
      "content": "              <goal>check</goal>",
      "lineNo": "190"
    },
    {
      "type": "deleted",
      "content": "            </goals>",
      "lineNo": "191"
    },
    {
      "type": "deleted",
      "content": "            <configuration>",
      "lineNo": "192"
    },
    {
      "type": "deleted",
      "content": "              <configLocation>google_checks.xml</configLocation>",
      "lineNo": "193"
    },
    {
      "type": "deleted",
      "content": "              <consoleOutput>true</consoleOutput>",
      "lineNo": "194"
    },
    {
      "type": "deleted",
      "content": "              <failOnViolation>true</failOnViolation>",
      "lineNo": "195"
    },
    {
      "type": "deleted",
      "content": "              <includeTestSourceDirectory>true</includeTestSourceDirectory>",
      "lineNo": "196"
    },
    {
      "type": "deleted",
      "content": "              <violationSeverity>warning</violationSeverity>",
      "lineNo": "197"
    },
    {
      "type": "deleted",
      "content": "              <maxAllowedViolations>0</maxAllowedViolations>",
      "lineNo": "198"
    },
    {
      "type": "deleted",
      "content": "            </configuration>",
      "lineNo": "199"
    },
    {
      "type": "deleted",
      "content": "          </execution>",
      "lineNo": "200"
    },
    {
      "type": "deleted",
      "content": "        </executions>",
      "lineNo": "201"
    },
    {
      "type": "not-modified",
      "content": "      </plugin>",
      "oldLineNo": "202",
      "newLineNo": "175"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "203",
      "newLineNo": "176"
    },
    {
      "type": "not-modified",
      "content": "    </plugins>",
      "oldLineNo": "204",
      "newLineNo": "177"
    },
    {
      "type": "not-modified",
      "content": "          </executions>",
      "oldLineNo": "326",
      "newLineNo": "299"
    },
    {
      "type": "not-modified",
      "content": "        </plugin>",
      "oldLineNo": "327",
      "newLineNo": "300"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "328",
      "newLineNo": "301"
    },
    {
      "type": "deleted",
      "content": "        <plugin> <!-- Upgrading Checkstyle at Runtime -->",
      "lineNo": "329"
    },
    {
      "type": "deleted",
      "content": "          <groupId>org.apache.maven.plugins</groupId>",
      "lineNo": "330"
    },
    {
      "type": "deleted",
      "content": "          <artifactId>maven-checkstyle-plugin</artifactId>",
      "lineNo": "331"
    },
    {
      "type": "deleted",
      "content": "          <version>3.3.0</version>",
      "lineNo": "332"
    },
    {
      "type": "deleted",
      "content": "          <dependencies>",
      "lineNo": "333"
    },
    {
      "type": "deleted",
      "content": "            <dependency>",
      "lineNo": "334"
    },
    {
      "type": "deleted",
      "content": "              <groupId>com.puppycrawl.tools</groupId>",
      "lineNo": "335"
    },
    {
      "type": "deleted",
      "content": "              <artifactId>checkstyle</artifactId>",
      "lineNo": "336"
    },
    {
      "type": "deleted",
      "content": " <!-- Dependabot bumps this version which throws bunch of issues in which case",
      "lineNo": "337"
    },
    {
      "type": "deleted",
      "content": "                   revert to 8.29 -->",
      "lineNo": "338"
    },
    {
      "type": "deleted",
      "content": "              <version>8.29</version>",
      "lineNo": "339"
    },
    {
      "type": "deleted",
      "content": "            </dependency>",
      "lineNo": "340"
    },
    {
      "type": "deleted",
      "content": "          </dependencies>",
      "lineNo": "341"
    },
    {
      "type": "deleted",
      "content": "          <configuration>",
      "lineNo": "342"
    },
    {
      "type": "deleted",
      "content": "            <configLocation>/google_checks.xml</configLocation>",
      "lineNo": "343"
    },
    {
      "type": "deleted",
      "content": "            <enableFilesSummary>true</enableFilesSummary>",
      "lineNo": "344"
    },
    {
      "type": "deleted",
      "content": "          </configuration>",
      "lineNo": "345"
    },
    {
      "type": "deleted",
      "content": "        </plugin>",
      "lineNo": "346"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "347"
    },
    {
      "type": "not-modified",
      "content": "        <plugin>",
      "oldLineNo": "348",
      "newLineNo": "302"
    },
    {
      "type": "not-modified",
      "content": "          <groupId>org.apache.maven.plugins</groupId>",
      "oldLineNo": "349",
      "newLineNo": "303"
    },
    {
      "type": "not-modified",
      "content": "          <artifactId>maven-surefire-plugin</artifactId>",
      "oldLineNo": "350",
      "newLineNo": "304"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "417",
      "newLineNo": "371"
    },
    {
      "type": "not-modified",
      "content": "  <reporting>",
      "oldLineNo": "418",
      "newLineNo": "372"
    },
    {
      "type": "not-modified",
      "content": "    <plugins>",
      "oldLineNo": "419",
      "newLineNo": "373"
    },
    {
      "type": "deleted",
      "content": "      <plugin>",
      "lineNo": "420"
    },
    {
      "type": "deleted",
      "content": "        <groupId>org.apache.maven.plugins</groupId>",
      "lineNo": "421"
    },
    {
      "type": "deleted",
      "content": "        <artifactId>maven-checkstyle-plugin</artifactId>",
      "lineNo": "422"
    },
    {
      "type": "deleted",
      "content": "        <configuration>",
      "lineNo": "423"
    },
    {
      "type": "deleted",
      "content": "          <configLocation>google_checks.xml</configLocation>",
      "lineNo": "424"
    },
    {
      "type": "deleted",
      "content": "        </configuration>",
      "lineNo": "425"
    },
    {
      "type": "deleted",
      "content": "        <reportSets>",
      "lineNo": "426"
    },
    {
      "type": "deleted",
      "content": "          <reportSet>",
      "lineNo": "427"
    },
    {
      "type": "deleted",
      "content": "            <reports>",
      "lineNo": "428"
    },
    {
      "type": "deleted",
      "content": "              <report>checkstyle</report>",
      "lineNo": "429"
    },
    {
      "type": "deleted",
      "content": "            </reports>",
      "lineNo": "430"
    },
    {
      "type": "deleted",
      "content": "          </reportSet>",
      "lineNo": "431"
    },
    {
      "type": "deleted",
      "content": "        </reportSets>",
      "lineNo": "432"
    },
    {
      "type": "deleted",
      "content": "      </plugin>",
      "lineNo": "433"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "434",
      "newLineNo": "374"
    },
    {
      "type": "not-modified",
      "content": "      <plugin>",
      "oldLineNo": "435",
      "newLineNo": "375"
    },
    {
      "type": "not-modified",
      "content": "        <artifactId>maven-javadoc-plugin</artifactId>",
      "oldLineNo": "436",
      "newLineNo": "376"
    },
    {
      "type": "not-modified",
      "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
      "oldLineNo": "19",
      "newLineNo": "19"
    },
    {
      "type": "not-modified",
      "content": "  <modelVersion>4.0.0</modelVersion>",
      "oldLineNo": "20",
      "newLineNo": "20"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "21",
      "newLineNo": "21"
    },
    {
      "type": "added",
      "content": "  <parent>",
      "lineNo": "22"
    },
    {
      "type": "added",
      "content": "    <groupId>com.google.fhir.analytics</groupId>",
      "lineNo": "23"
    },
    {
      "type": "added",
      "content": "    <artifactId>root</artifactId>",
      "lineNo": "24"
    },
    {
      "type": "added",
      "content": "    <version>0.1.0-SNAPSHOT</version>",
      "lineNo": "25"
    },
    {
      "type": "added",
      "content": "  </parent>",
      "lineNo": "26"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "27"
    },
    {
      "type": "not-modified",
      "content": "  <groupId>com.google.fhir.analytics</groupId>",
      "oldLineNo": "22",
      "newLineNo": "28"
    },
    {
      "type": "not-modified",
      "content": "  <artifactId>pipelines</artifactId>",
      "oldLineNo": "23",
      "newLineNo": "29"
    },
    {
      "type": "not-modified",
      "content": "  <version>0.1.0-SNAPSHOT</version>",
      "oldLineNo": "24",
      "newLineNo": "30"
    },
    {
      "type": "not-modified",
      "content": "          <artifactId>maven-project-info-reports-plugin</artifactId>",
      "oldLineNo": "208",
      "newLineNo": "214"
    },
    {
      "type": "not-modified",
      "content": "          <version>3.4.3</version>",
      "oldLineNo": "209",
      "newLineNo": "215"
    },
    {
      "type": "not-modified",
      "content": "        </plugin>",
      "oldLineNo": "210",
      "newLineNo": "216"
    },
    {
      "type": "deleted",
      "content": " <!-- Code formatter -->",
      "lineNo": "211"
    },
    {
      "type": "deleted",
      "content": "        <plugin>",
      "lineNo": "212"
    },
    {
      "type": "deleted",
      "content": "          <groupId>com.diffplug.spotless</groupId>",
      "lineNo": "213"
    },
    {
      "type": "deleted",
      "content": "          <artifactId>spotless-maven-plugin</artifactId>",
      "lineNo": "214"
    },
    {
      "type": "deleted",
      "content": "          <version>2.37.0</version>",
      "lineNo": "215"
    },
    {
      "type": "deleted",
      "content": "          <configuration>",
      "lineNo": "216"
    },
    {
      "type": "deleted",
      "content": "            <pom>",
      "lineNo": "217"
    },
    {
      "type": "deleted",
      "content": "              <sortPom>",
      "lineNo": "218"
    },
    {
      "type": "deleted",
      "content": "                <expandEmptyElements>false</expandEmptyElements>",
      "lineNo": "219"
    },
    {
      "type": "deleted",
      "content": "              </sortPom>",
      "lineNo": "220"
    },
    {
      "type": "deleted",
      "content": "              <trimTrailingWhitespace/>",
      "lineNo": "221"
    },
    {
      "type": "deleted",
      "content": "              <endWithNewline/>",
      "lineNo": "222"
    },
    {
      "type": "deleted",
      "content": "              <indent>",
      "lineNo": "223"
    },
    {
      "type": "deleted",
      "content": "                <spaces>true</spaces>",
      "lineNo": "224"
    },
    {
      "type": "deleted",
      "content": "              </indent>",
      "lineNo": "225"
    },
    {
      "type": "deleted",
      "content": "            </pom>",
      "lineNo": "226"
    },
    {
      "type": "deleted",
      "content": "            <formats>",
      "lineNo": "227"
    },
    {
      "type": "deleted",
      "content": " <!-- you can define as many formats as you want, each is independent -->",
      "lineNo": "228"
    },
    {
      "type": "deleted",
      "content": "              <format>",
      "lineNo": "229"
    },
    {
      "type": "deleted",
      "content": " <!-- define the files to apply to -->",
      "lineNo": "230"
    },
    {
      "type": "deleted",
      "content": "                <includes>",
      "lineNo": "231"
    },
    {
      "type": "deleted",
      "content": "                  <include>**/*.sh</include>",
      "lineNo": "232"
    },
    {
      "type": "deleted",
      "content": "                  <include>**/*.xml</include>",
      "lineNo": "233"
    },
    {
      "type": "deleted",
      "content": "                  <include>.gitignore</include>",
      "lineNo": "234"
    },
    {
      "type": "deleted",
      "content": "                </includes>",
      "lineNo": "235"
    },
    {
      "type": "deleted",
      "content": " <!-- ignore build files -->",
      "lineNo": "236"
    },
    {
      "type": "deleted",
      "content": "                <excludes>",
      "lineNo": "237"
    },
    {
      "type": "deleted",
      "content": "                  <exclude>.idea/**</exclude>",
      "lineNo": "238"
    },
    {
      "type": "deleted",
      "content": "                  <exclude>.settings/**</exclude>",
      "lineNo": "239"
    },
    {
      "type": "deleted",
      "content": "                  <exclude>**/target/**</exclude>",
      "lineNo": "240"
    },
    {
      "type": "deleted",
      "content": "                  <exclude>bin/**</exclude>",
      "lineNo": "241"
    },
    {
      "type": "deleted",
      "content": "                  <exclude>tmp/**</exclude>",
      "lineNo": "242"
    },
    {
      "type": "deleted",
      "content": "                </excludes>",
      "lineNo": "243"
    },
    {
      "type": "deleted",
      "content": "                <trimTrailingWhitespace/>",
      "lineNo": "244"
    },
    {
      "type": "deleted",
      "content": "                <endWithNewline/>",
      "lineNo": "245"
    },
    {
      "type": "deleted",
      "content": "                <indent>",
      "lineNo": "246"
    },
    {
      "type": "deleted",
      "content": "                  <spaces>true</spaces>",
      "lineNo": "247"
    },
    {
      "type": "deleted",
      "content": "                </indent>",
      "lineNo": "248"
    },
    {
      "type": "deleted",
      "content": "              </format>",
      "lineNo": "249"
    },
    {
      "type": "deleted",
      "content": "              <format>",
      "lineNo": "250"
    },
    {
      "type": "deleted",
      "content": "                <includes>",
      "lineNo": "251"
    },
    {
      "type": "deleted",
      "content": "                  <include>**/*.md</include>",
      "lineNo": "252"
    },
    {
      "type": "deleted",
      "content": "                </includes>",
      "lineNo": "253"
    },
    {
      "type": "deleted",
      "content": "                <excludes>",
      "lineNo": "254"
    },
    {
      "type": "deleted",
      "content": "                  <exclude>**/target/**</exclude>",
      "lineNo": "255"
    },
    {
      "type": "deleted",
      "content": "                </excludes>",
      "lineNo": "256"
    },
    {
      "type": "deleted",
      "content": "                <prettier>",
      "lineNo": "257"
    },
    {
      "type": "deleted",
      "content": " <!-- Formatter that Spotless supports and can format Markdown:",
      "lineNo": "258"
    },
    {
      "type": "deleted",
      "content": "                       https://github.com/diffplug/spotless/tree/main/plugin-maven#prettier",
      "lineNo": "259"
    },
    {
      "type": "deleted",
      "content": "                     Only Spotless-supported formatter that can be configured to",
      "lineNo": "260"
    },
    {
      "type": "deleted",
      "content": "                     force line wrap -->",
      "lineNo": "261"
    },
    {
      "type": "deleted",
      "content": "                  <config>",
      "lineNo": "262"
    },
    {
      "type": "deleted",
      "content": "                    <proseWrap>always</proseWrap>",
      "lineNo": "263"
    },
    {
      "type": "deleted",
      "content": "                  </config>",
      "lineNo": "264"
    },
    {
      "type": "deleted",
      "content": "                </prettier>",
      "lineNo": "265"
    },
    {
      "type": "deleted",
      "content": "              </format>",
      "lineNo": "266"
    },
    {
      "type": "deleted",
      "content": "            </formats>",
      "lineNo": "267"
    },
    {
      "type": "deleted",
      "content": " <!-- define a language-specific format -->",
      "lineNo": "268"
    },
    {
      "type": "deleted",
      "content": "            <java>",
      "lineNo": "269"
    },
    {
      "type": "deleted",
      "content": "              <importOrder/>",
      "lineNo": "270"
    },
    {
      "type": "deleted",
      "content": " <!-- standard import order -->",
      "lineNo": "271"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "272"
    },
    {
      "type": "deleted",
      "content": "              <removeUnusedImports/>",
      "lineNo": "273"
    },
    {
      "type": "deleted",
      "content": "",
      "lineNo": "274"
    },
    {
      "type": "deleted",
      "content": " <!-- apply a specific flavor of google-java-format and reflow long strings -->",
      "lineNo": "275"
    },
    {
      "type": "deleted",
      "content": "              <googleJavaFormat>",
      "lineNo": "276"
    },
    {
      "type": "deleted",
      "content": "                <version>1.15.0</version>",
      "lineNo": "277"
    },
    {
      "type": "deleted",
      "content": "                <style>GOOGLE</style>",
      "lineNo": "278"
    },
    {
      "type": "deleted",
      "content": "                <reflowLongStrings>true</reflowLongStrings>",
      "lineNo": "279"
    },
    {
      "type": "deleted",
      "content": "              </googleJavaFormat>",
      "lineNo": "280"
    },
    {
      "type": "deleted",
      "content": "            </java>",
      "lineNo": "281"
    },
    {
      "type": "deleted",
      "content": "          </configuration>",
      "lineNo": "282"
    },
    {
      "type": "deleted",
      "content": "          <executions>",
      "lineNo": "283"
    },
    {
      "type": "deleted",
      "content": "            <execution>",
      "lineNo": "284"
    },
    {
      "type": "deleted",
      "content": "              <goals>",
      "lineNo": "285"
    },
    {
      "type": "deleted",
      "content": "                <goal>apply</goal>",
      "lineNo": "286"
    },
    {
      "type": "deleted",
      "content": "              </goals>",
      "lineNo": "287"
    },
    {
      "type": "deleted",
      "content": "              <phase>compile</phase>",
      "lineNo": "288"
    },
    {
      "type": "deleted",
      "content": "            </execution>",
      "lineNo": "289"
    },
    {
      "type": "deleted",
      "content": "          </executions>",
      "lineNo": "290"
    },
    {
      "type": "deleted",
      "content": "        </plugin>",
      "lineNo": "291"
    },
    {
      "type": "not-modified",
      "content": " <!-- this is for finding files at the root ${main.basedir} easier -->",
      "oldLineNo": "292",
      "newLineNo": "217"
    },
    {
      "type": "not-modified",
      "content": "        <plugin>",
      "oldLineNo": "293",
      "newLineNo": "218"
    },
    {
      "type": "not-modified",
      "content": "          <groupId>org.commonjava.maven.plugins</groupId>",
      "oldLineNo": "294",
      "newLineNo": "219"
    },
    {
      "type": "not-modified",
      "content": "    <module>pipelines</module>",
      "oldLineNo": "29",
      "newLineNo": "29"
    },
    {
      "type": "not-modified",
      "content": "  </modules>",
      "oldLineNo": "30",
      "newLineNo": "30"
    },
    {
      "type": "not-modified",
      "content": "",
      "oldLineNo": "31",
      "newLineNo": "31"
    },
    {
      "type": "added",
      "content": "  <build>",
      "lineNo": "32"
    },
    {
      "type": "added",
      "content": "    <pluginManagement>",
      "lineNo": "33"
    },
    {
      "type": "added",
      "content": "      <plugins>",
      "lineNo": "34"
    },
    {
      "type": "added",
      "content": " <!-- Code formatter -->",
      "lineNo": "35"
    },
    {
      "type": "added",
      "content": "        <plugin>",
      "lineNo": "36"
    },
    {
      "type": "added",
      "content": "          <groupId>com.diffplug.spotless</groupId>",
      "lineNo": "37"
    },
    {
      "type": "added",
      "content": "          <artifactId>spotless-maven-plugin</artifactId>",
      "lineNo": "38"
    },
    {
      "type": "added",
      "content": " <!-- version>2.37.0</version -->",
      "lineNo": "39"
    },
    {
      "type": "added",
      "content": "          <configuration>",
      "lineNo": "40"
    },
    {
      "type": "added",
      "content": "            <pom>",
      "lineNo": "41"
    },
    {
      "type": "added",
      "content": "              <sortPom>",
      "lineNo": "42"
    },
    {
      "type": "added",
      "content": "                <expandEmptyElements>false</expandEmptyElements>",
      "lineNo": "43"
    },
    {
      "type": "added",
      "content": "              </sortPom>",
      "lineNo": "44"
    },
    {
      "type": "added",
      "content": "              <trimTrailingWhitespace/>",
      "lineNo": "45"
    },
    {
      "type": "added",
      "content": "              <endWithNewline/>",
      "lineNo": "46"
    },
    {
      "type": "added",
      "content": "              <indent>",
      "lineNo": "47"
    },
    {
      "type": "added",
      "content": "                <spaces>true</spaces>",
      "lineNo": "48"
    },
    {
      "type": "added",
      "content": "              </indent>",
      "lineNo": "49"
    },
    {
      "type": "added",
      "content": "            </pom>",
      "lineNo": "50"
    },
    {
      "type": "added",
      "content": "            <formats>",
      "lineNo": "51"
    },
    {
      "type": "added",
      "content": " <!-- you can define as many formats as you want, each is independent -->",
      "lineNo": "52"
    },
    {
      "type": "added",
      "content": "              <format>",
      "lineNo": "53"
    },
    {
      "type": "added",
      "content": " <!-- define the files to apply to -->",
      "lineNo": "54"
    },
    {
      "type": "added",
      "content": "                <includes>",
      "lineNo": "55"
    },
    {
      "type": "added",
      "content": "                  <include>**/*.sh</include>",
      "lineNo": "56"
    },
    {
      "type": "added",
      "content": "                  <include>**/*.xml</include>",
      "lineNo": "57"
    },
    {
      "type": "added",
      "content": "                  <include>.gitignore</include>",
      "lineNo": "58"
    },
    {
      "type": "added",
      "content": "                </includes>",
      "lineNo": "59"
    },
    {
      "type": "added",
      "content": " <!-- ignore build files -->",
      "lineNo": "60"
    },
    {
      "type": "added",
      "content": "                <excludes>",
      "lineNo": "61"
    },
    {
      "type": "added",
      "content": "                  <exclude>.idea/**</exclude>",
      "lineNo": "62"
    },
    {
      "type": "added",
      "content": "                  <exclude>.settings/**</exclude>",
      "lineNo": "63"
    },
    {
      "type": "added",
      "content": "                  <exclude>**/target/**</exclude>",
      "lineNo": "64"
    },
    {
      "type": "added",
      "content": "                  <exclude>bin/**</exclude>",
      "lineNo": "65"
    },
    {
      "type": "added",
      "content": "                  <exclude>tmp/**</exclude>",
      "lineNo": "66"
    },
    {
      "type": "added",
      "content": "                </excludes>",
      "lineNo": "67"
    },
    {
      "type": "added",
      "content": "                <trimTrailingWhitespace/>",
      "lineNo": "68"
    },
    {
      "type": "added",
      "content": "                <endWithNewline/>",
      "lineNo": "69"
    },
    {
      "type": "added",
      "content": "                <indent>",
      "lineNo": "70"
    },
    {
      "type": "added",
      "content": "                  <spaces>true</spaces>",
      "lineNo": "71"
    },
    {
      "type": "added",
      "content": "                </indent>",
      "lineNo": "72"
    },
    {
      "type": "added",
      "content": "              </format>",
      "lineNo": "73"
    },
    {
      "type": "added",
      "content": "              <format>",
      "lineNo": "74"
    },
    {
      "type": "added",
      "content": "                <includes>",
      "lineNo": "75"
    },
    {
      "type": "added",
      "content": "                  <include>**/*.md</include>",
      "lineNo": "76"
    },
    {
      "type": "added",
      "content": "                </includes>",
      "lineNo": "77"
    },
    {
      "type": "added",
      "content": "                <excludes>",
      "lineNo": "78"
    },
    {
      "type": "added",
      "content": "                  <exclude>**/target/**</exclude>",
      "lineNo": "79"
    },
    {
      "type": "added",
      "content": "                </excludes>",
      "lineNo": "80"
    },
    {
      "type": "added",
      "content": "                <prettier>",
      "lineNo": "81"
    },
    {
      "type": "added",
      "content": " <!-- Formatter that Spotless supports and can format Markdown:",
      "lineNo": "82"
    },
    {
      "type": "added",
      "content": "                       https://github.com/diffplug/spotless/tree/main/plugin-maven#prettier",
      "lineNo": "83"
    },
    {
      "type": "added",
      "content": "                     Only Spotless-supported formatter that can be configured to",
      "lineNo": "84"
    },
    {
      "type": "added",
      "content": "                     force line wrap -->",
      "lineNo": "85"
    },
    {
      "type": "added",
      "content": "                  <config>",
      "lineNo": "86"
    },
    {
      "type": "added",
      "content": "                    <proseWrap>always</proseWrap>",
      "lineNo": "87"
    },
    {
      "type": "added",
      "content": "                  </config>",
      "lineNo": "88"
    },
    {
      "type": "added",
      "content": "                </prettier>",
      "lineNo": "89"
    },
    {
      "type": "added",
      "content": "              </format>",
      "lineNo": "90"
    },
    {
      "type": "added",
      "content": "            </formats>",
      "lineNo": "91"
    },
    {
      "type": "added",
      "content": " <!-- define a language-specific format -->",
      "lineNo": "92"
    },
    {
      "type": "added",
      "content": "            <java>",
      "lineNo": "93"
    },
    {
      "type": "added",
      "content": "              <importOrder/>",
      "lineNo": "94"
    },
    {
      "type": "added",
      "content": " <!-- standard import order -->",
      "lineNo": "95"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "96"
    },
    {
      "type": "added",
      "content": "              <removeUnusedImports/>",
      "lineNo": "97"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "98"
    },
    {
      "type": "added",
      "content": " <!-- apply a specific flavor of google-java-format and reflow long strings -->",
      "lineNo": "99"
    },
    {
      "type": "added",
      "content": "              <googleJavaFormat>",
      "lineNo": "100"
    },
    {
      "type": "added",
      "content": "                <version>1.15.0</version>",
      "lineNo": "101"
    },
    {
      "type": "added",
      "content": "                <style>GOOGLE</style>",
      "lineNo": "102"
    },
    {
      "type": "added",
      "content": "                <reflowLongStrings>true</reflowLongStrings>",
      "lineNo": "103"
    },
    {
      "type": "added",
      "content": "              </googleJavaFormat>",
      "lineNo": "104"
    },
    {
      "type": "added",
      "content": "            </java>",
      "lineNo": "105"
    },
    {
      "type": "added",
      "content": "          </configuration>",
      "lineNo": "106"
    },
    {
      "type": "added",
      "content": "          <executions>",
      "lineNo": "107"
    },
    {
      "type": "added",
      "content": "            <execution>",
      "lineNo": "108"
    },
    {
      "type": "added",
      "content": "              <goals>",
      "lineNo": "109"
    },
    {
      "type": "added",
      "content": "                <goal>apply</goal>",
      "lineNo": "110"
    },
    {
      "type": "added",
      "content": "              </goals>",
      "lineNo": "111"
    },
    {
      "type": "added",
      "content": "              <phase>compile</phase>",
      "lineNo": "112"
    },
    {
      "type": "added",
      "content": "            </execution>",
      "lineNo": "113"
    },
    {
      "type": "added",
      "content": "          </executions>",
      "lineNo": "114"
    },
    {
      "type": "added",
      "content": "        </plugin>",
      "lineNo": "115"
    },
    {
      "type": "added",
      "content": "      </plugins>",
      "lineNo": "116"
    },
    {
      "type": "added",
      "content": "    </pluginManagement>",
      "lineNo": "117"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "118"
    },
    {
      "type": "added",
      "content": "  </build>",
      "lineNo": "119"
    },
    {
      "type": "added",
      "content": "",
      "lineNo": "120"
    },
    {
      "type": "not-modified",
      "content": "</project>",
      "oldLineNo": "32",
      "newLineNo": "121"
    }
  ]
}